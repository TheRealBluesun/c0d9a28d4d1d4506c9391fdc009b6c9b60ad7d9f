
testbleh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b74  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08004c38  08004c38  00014c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004f38  08004f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004f3c  08004f3c  00014f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08004f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001298  20000010  08004f4c  00020010  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200012a8  08004f4c  000212a8  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fea9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000041de  00000000  00000000  0003fedd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00011a82  00000000  00000000  000440bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001518  00000000  00000000  00055b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001800  00000000  00000000  00057058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a38f  00000000  00000000  00058858  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000675d  00000000  00000000  00062be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00069344  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038f0  00000000  00000000  000693c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c1c 	.word	0x08004c1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004c1c 	.word	0x08004c1c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	1c08      	adds	r0, r1, #0
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f830 	bl	8000498 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_lmul>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	46ce      	mov	lr, r9
 8000448:	4647      	mov	r7, r8
 800044a:	0415      	lsls	r5, r2, #16
 800044c:	0c2d      	lsrs	r5, r5, #16
 800044e:	002e      	movs	r6, r5
 8000450:	b580      	push	{r7, lr}
 8000452:	0407      	lsls	r7, r0, #16
 8000454:	0c14      	lsrs	r4, r2, #16
 8000456:	0c3f      	lsrs	r7, r7, #16
 8000458:	4699      	mov	r9, r3
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	437e      	muls	r6, r7
 800045e:	435d      	muls	r5, r3
 8000460:	4367      	muls	r7, r4
 8000462:	4363      	muls	r3, r4
 8000464:	197f      	adds	r7, r7, r5
 8000466:	0c34      	lsrs	r4, r6, #16
 8000468:	19e4      	adds	r4, r4, r7
 800046a:	469c      	mov	ip, r3
 800046c:	42a5      	cmp	r5, r4
 800046e:	d903      	bls.n	8000478 <__aeabi_lmul+0x34>
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	025b      	lsls	r3, r3, #9
 8000474:	4698      	mov	r8, r3
 8000476:	44c4      	add	ip, r8
 8000478:	464b      	mov	r3, r9
 800047a:	4351      	muls	r1, r2
 800047c:	4343      	muls	r3, r0
 800047e:	0436      	lsls	r6, r6, #16
 8000480:	0c36      	lsrs	r6, r6, #16
 8000482:	0c25      	lsrs	r5, r4, #16
 8000484:	0424      	lsls	r4, r4, #16
 8000486:	4465      	add	r5, ip
 8000488:	19a4      	adds	r4, r4, r6
 800048a:	1859      	adds	r1, r3, r1
 800048c:	1949      	adds	r1, r1, r5
 800048e:	0020      	movs	r0, r4
 8000490:	bc0c      	pop	{r2, r3}
 8000492:	4690      	mov	r8, r2
 8000494:	4699      	mov	r9, r3
 8000496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000498 <__udivmoddi4>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	4657      	mov	r7, sl
 800049c:	464e      	mov	r6, r9
 800049e:	4645      	mov	r5, r8
 80004a0:	46de      	mov	lr, fp
 80004a2:	b5e0      	push	{r5, r6, r7, lr}
 80004a4:	0004      	movs	r4, r0
 80004a6:	b083      	sub	sp, #12
 80004a8:	000d      	movs	r5, r1
 80004aa:	4692      	mov	sl, r2
 80004ac:	4699      	mov	r9, r3
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d82f      	bhi.n	8000512 <__udivmoddi4+0x7a>
 80004b2:	d02c      	beq.n	800050e <__udivmoddi4+0x76>
 80004b4:	4649      	mov	r1, r9
 80004b6:	4650      	mov	r0, sl
 80004b8:	f000 f8ae 	bl	8000618 <__clzdi2>
 80004bc:	0029      	movs	r1, r5
 80004be:	0006      	movs	r6, r0
 80004c0:	0020      	movs	r0, r4
 80004c2:	f000 f8a9 	bl	8000618 <__clzdi2>
 80004c6:	1a33      	subs	r3, r6, r0
 80004c8:	4698      	mov	r8, r3
 80004ca:	3b20      	subs	r3, #32
 80004cc:	469b      	mov	fp, r3
 80004ce:	d500      	bpl.n	80004d2 <__udivmoddi4+0x3a>
 80004d0:	e074      	b.n	80005bc <__udivmoddi4+0x124>
 80004d2:	4653      	mov	r3, sl
 80004d4:	465a      	mov	r2, fp
 80004d6:	4093      	lsls	r3, r2
 80004d8:	001f      	movs	r7, r3
 80004da:	4653      	mov	r3, sl
 80004dc:	4642      	mov	r2, r8
 80004de:	4093      	lsls	r3, r2
 80004e0:	001e      	movs	r6, r3
 80004e2:	42af      	cmp	r7, r5
 80004e4:	d829      	bhi.n	800053a <__udivmoddi4+0xa2>
 80004e6:	d026      	beq.n	8000536 <__udivmoddi4+0x9e>
 80004e8:	465b      	mov	r3, fp
 80004ea:	1ba4      	subs	r4, r4, r6
 80004ec:	41bd      	sbcs	r5, r7
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	da00      	bge.n	80004f4 <__udivmoddi4+0x5c>
 80004f2:	e079      	b.n	80005e8 <__udivmoddi4+0x150>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	2301      	movs	r3, #1
 80004fe:	465a      	mov	r2, fp
 8000500:	4093      	lsls	r3, r2
 8000502:	9301      	str	r3, [sp, #4]
 8000504:	2301      	movs	r3, #1
 8000506:	4642      	mov	r2, r8
 8000508:	4093      	lsls	r3, r2
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	e019      	b.n	8000542 <__udivmoddi4+0xaa>
 800050e:	4282      	cmp	r2, r0
 8000510:	d9d0      	bls.n	80004b4 <__udivmoddi4+0x1c>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <__udivmoddi4+0x8c>
 8000520:	601c      	str	r4, [r3, #0]
 8000522:	605d      	str	r5, [r3, #4]
 8000524:	9800      	ldr	r0, [sp, #0]
 8000526:	9901      	ldr	r1, [sp, #4]
 8000528:	b003      	add	sp, #12
 800052a:	bc3c      	pop	{r2, r3, r4, r5}
 800052c:	4690      	mov	r8, r2
 800052e:	4699      	mov	r9, r3
 8000530:	46a2      	mov	sl, r4
 8000532:	46ab      	mov	fp, r5
 8000534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000536:	42a3      	cmp	r3, r4
 8000538:	d9d6      	bls.n	80004e8 <__udivmoddi4+0x50>
 800053a:	2200      	movs	r2, #0
 800053c:	2300      	movs	r3, #0
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	4643      	mov	r3, r8
 8000544:	2b00      	cmp	r3, #0
 8000546:	d0e8      	beq.n	800051a <__udivmoddi4+0x82>
 8000548:	07fb      	lsls	r3, r7, #31
 800054a:	0872      	lsrs	r2, r6, #1
 800054c:	431a      	orrs	r2, r3
 800054e:	4646      	mov	r6, r8
 8000550:	087b      	lsrs	r3, r7, #1
 8000552:	e00e      	b.n	8000572 <__udivmoddi4+0xda>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d101      	bne.n	800055c <__udivmoddi4+0xc4>
 8000558:	42a2      	cmp	r2, r4
 800055a:	d80c      	bhi.n	8000576 <__udivmoddi4+0xde>
 800055c:	1aa4      	subs	r4, r4, r2
 800055e:	419d      	sbcs	r5, r3
 8000560:	2001      	movs	r0, #1
 8000562:	1924      	adds	r4, r4, r4
 8000564:	416d      	adcs	r5, r5
 8000566:	2100      	movs	r1, #0
 8000568:	3e01      	subs	r6, #1
 800056a:	1824      	adds	r4, r4, r0
 800056c:	414d      	adcs	r5, r1
 800056e:	2e00      	cmp	r6, #0
 8000570:	d006      	beq.n	8000580 <__udivmoddi4+0xe8>
 8000572:	42ab      	cmp	r3, r5
 8000574:	d9ee      	bls.n	8000554 <__udivmoddi4+0xbc>
 8000576:	3e01      	subs	r6, #1
 8000578:	1924      	adds	r4, r4, r4
 800057a:	416d      	adcs	r5, r5
 800057c:	2e00      	cmp	r6, #0
 800057e:	d1f8      	bne.n	8000572 <__udivmoddi4+0xda>
 8000580:	465b      	mov	r3, fp
 8000582:	9800      	ldr	r0, [sp, #0]
 8000584:	9901      	ldr	r1, [sp, #4]
 8000586:	1900      	adds	r0, r0, r4
 8000588:	4169      	adcs	r1, r5
 800058a:	2b00      	cmp	r3, #0
 800058c:	db22      	blt.n	80005d4 <__udivmoddi4+0x13c>
 800058e:	002b      	movs	r3, r5
 8000590:	465a      	mov	r2, fp
 8000592:	40d3      	lsrs	r3, r2
 8000594:	002a      	movs	r2, r5
 8000596:	4644      	mov	r4, r8
 8000598:	40e2      	lsrs	r2, r4
 800059a:	001c      	movs	r4, r3
 800059c:	465b      	mov	r3, fp
 800059e:	0015      	movs	r5, r2
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	db2c      	blt.n	80005fe <__udivmoddi4+0x166>
 80005a4:	0026      	movs	r6, r4
 80005a6:	409e      	lsls	r6, r3
 80005a8:	0033      	movs	r3, r6
 80005aa:	0026      	movs	r6, r4
 80005ac:	4647      	mov	r7, r8
 80005ae:	40be      	lsls	r6, r7
 80005b0:	0032      	movs	r2, r6
 80005b2:	1a80      	subs	r0, r0, r2
 80005b4:	4199      	sbcs	r1, r3
 80005b6:	9000      	str	r0, [sp, #0]
 80005b8:	9101      	str	r1, [sp, #4]
 80005ba:	e7ae      	b.n	800051a <__udivmoddi4+0x82>
 80005bc:	4642      	mov	r2, r8
 80005be:	2320      	movs	r3, #32
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	4652      	mov	r2, sl
 80005c4:	40da      	lsrs	r2, r3
 80005c6:	4641      	mov	r1, r8
 80005c8:	0013      	movs	r3, r2
 80005ca:	464a      	mov	r2, r9
 80005cc:	408a      	lsls	r2, r1
 80005ce:	0017      	movs	r7, r2
 80005d0:	431f      	orrs	r7, r3
 80005d2:	e782      	b.n	80004da <__udivmoddi4+0x42>
 80005d4:	4642      	mov	r2, r8
 80005d6:	2320      	movs	r3, #32
 80005d8:	1a9b      	subs	r3, r3, r2
 80005da:	002a      	movs	r2, r5
 80005dc:	4646      	mov	r6, r8
 80005de:	409a      	lsls	r2, r3
 80005e0:	0023      	movs	r3, r4
 80005e2:	40f3      	lsrs	r3, r6
 80005e4:	4313      	orrs	r3, r2
 80005e6:	e7d5      	b.n	8000594 <__udivmoddi4+0xfc>
 80005e8:	4642      	mov	r2, r8
 80005ea:	2320      	movs	r3, #32
 80005ec:	2100      	movs	r1, #0
 80005ee:	1a9b      	subs	r3, r3, r2
 80005f0:	2200      	movs	r2, #0
 80005f2:	9100      	str	r1, [sp, #0]
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	2201      	movs	r2, #1
 80005f8:	40da      	lsrs	r2, r3
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	e782      	b.n	8000504 <__udivmoddi4+0x6c>
 80005fe:	4642      	mov	r2, r8
 8000600:	2320      	movs	r3, #32
 8000602:	0026      	movs	r6, r4
 8000604:	1a9b      	subs	r3, r3, r2
 8000606:	40de      	lsrs	r6, r3
 8000608:	002f      	movs	r7, r5
 800060a:	46b4      	mov	ip, r6
 800060c:	4097      	lsls	r7, r2
 800060e:	4666      	mov	r6, ip
 8000610:	003b      	movs	r3, r7
 8000612:	4333      	orrs	r3, r6
 8000614:	e7c9      	b.n	80005aa <__udivmoddi4+0x112>
 8000616:	46c0      	nop			; (mov r8, r8)

08000618 <__clzdi2>:
 8000618:	b510      	push	{r4, lr}
 800061a:	2900      	cmp	r1, #0
 800061c:	d103      	bne.n	8000626 <__clzdi2+0xe>
 800061e:	f000 f807 	bl	8000630 <__clzsi2>
 8000622:	3020      	adds	r0, #32
 8000624:	e002      	b.n	800062c <__clzdi2+0x14>
 8000626:	1c08      	adds	r0, r1, #0
 8000628:	f000 f802 	bl	8000630 <__clzsi2>
 800062c:	bd10      	pop	{r4, pc}
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__clzsi2>:
 8000630:	211c      	movs	r1, #28
 8000632:	2301      	movs	r3, #1
 8000634:	041b      	lsls	r3, r3, #16
 8000636:	4298      	cmp	r0, r3
 8000638:	d301      	bcc.n	800063e <__clzsi2+0xe>
 800063a:	0c00      	lsrs	r0, r0, #16
 800063c:	3910      	subs	r1, #16
 800063e:	0a1b      	lsrs	r3, r3, #8
 8000640:	4298      	cmp	r0, r3
 8000642:	d301      	bcc.n	8000648 <__clzsi2+0x18>
 8000644:	0a00      	lsrs	r0, r0, #8
 8000646:	3908      	subs	r1, #8
 8000648:	091b      	lsrs	r3, r3, #4
 800064a:	4298      	cmp	r0, r3
 800064c:	d301      	bcc.n	8000652 <__clzsi2+0x22>
 800064e:	0900      	lsrs	r0, r0, #4
 8000650:	3904      	subs	r1, #4
 8000652:	a202      	add	r2, pc, #8	; (adr r2, 800065c <__clzsi2+0x2c>)
 8000654:	5c10      	ldrb	r0, [r2, r0]
 8000656:	1840      	adds	r0, r0, r1
 8000658:	4770      	bx	lr
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	02020304 	.word	0x02020304
 8000660:	01010101 	.word	0x01010101
	...

0800066c <ethAddrFromPubkey>:

static sha3_context g_sha3c = {0};

// Address length = 40, plus '0x' plus NULL termination
int ethAddrFromPubkey(const uint8_t pub_bytes[64], uint8_t addr_str[43])
{
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	0006      	movs	r6, r0
 8000670:	000c      	movs	r4, r1
	addr_str[0] = '0';
 8000672:	2330      	movs	r3, #48	; 0x30
 8000674:	700b      	strb	r3, [r1, #0]
	addr_str[1] = 'x';
 8000676:	3348      	adds	r3, #72	; 0x48
 8000678:	704b      	strb	r3, [r1, #1]
	addr_str[42] = '\0';
 800067a:	2200      	movs	r2, #0
 800067c:	3b4e      	subs	r3, #78	; 0x4e
 800067e:	54ca      	strb	r2, [r1, r3]

	// Create ETH address from key
	sha3_Init256(&g_sha3c);
 8000680:	4d09      	ldr	r5, [pc, #36]	; (80006a8 <ethAddrFromPubkey+0x3c>)
 8000682:	0028      	movs	r0, r5
 8000684:	f000 fdda 	bl	800123c <sha3_Init256>
	sha3_Update(&g_sha3c, pub_bytes, 64);
 8000688:	2240      	movs	r2, #64	; 0x40
 800068a:	0031      	movs	r1, r6
 800068c:	0028      	movs	r0, r5
 800068e:	f000 fddf 	bl	8001250 <sha3_Update>
	uint8_t* pub_hash = (uint8_t*)sha3_Finalize(&g_sha3c);
 8000692:	0028      	movs	r0, r5
 8000694:	f000 fed9 	bl	800144a <sha3_Finalize>
	bin2hex(pub_hash+12, addr_str+2, 20);
 8000698:	1ca1      	adds	r1, r4, #2
 800069a:	300c      	adds	r0, #12
 800069c:	2214      	movs	r2, #20
 800069e:	f000 f805 	bl	80006ac <bin2hex>
	return 1;
}
 80006a2:	2001      	movs	r0, #1
 80006a4:	bd70      	pop	{r4, r5, r6, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	20000030 	.word	0x20000030

080006ac <bin2hex>:
			(((c>=_T('a') && c<=_T('f'))) ||
					((c>=_T('A') && c<=_T('F')))));
}

unsigned char *bin2hex(unsigned char *bin, unsigned char *hex, int len)
{
 80006ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ae:	468c      	mov	ip, r1
	int i;
	for(i = 0; i < len; i++)
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	dd1c      	ble.n	80006ee <bin2hex+0x42>
 80006b4:	000c      	movs	r4, r1
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	4494      	add	ip, r2
 80006ba:	4661      	mov	r1, ip
	{
		unsigned char byte = *bin++;
		unsigned char hbyte = (byte & 0xF0) >> 4;
		unsigned char lbyte = byte & 0xF;
 80006bc:	270f      	movs	r7, #15
 80006be:	e004      	b.n	80006ca <bin2hex+0x1e>
		*hex++ = byte2hex(hbyte);
		*hex++ = byte2hex(lbyte);
 80006c0:	7072      	strb	r2, [r6, #1]
 80006c2:	3001      	adds	r0, #1
 80006c4:	3402      	adds	r4, #2
	for(i = 0; i < len; i++)
 80006c6:	428c      	cmp	r4, r1
 80006c8:	d011      	beq.n	80006ee <bin2hex+0x42>
		unsigned char byte = *bin++;
 80006ca:	7803      	ldrb	r3, [r0, #0]
		unsigned char hbyte = (byte & 0xF0) >> 4;
 80006cc:	091a      	lsrs	r2, r3, #4
		unsigned char lbyte = byte & 0xF;
 80006ce:	403b      	ands	r3, r7
	return ((c<10) ? (c)+_T('0') : (c)-10+_T('a'));
 80006d0:	0015      	movs	r5, r2
 80006d2:	3557      	adds	r5, #87	; 0x57
 80006d4:	2a09      	cmp	r2, #9
 80006d6:	d801      	bhi.n	80006dc <bin2hex+0x30>
 80006d8:	3230      	adds	r2, #48	; 0x30
 80006da:	0015      	movs	r5, r2
 80006dc:	0026      	movs	r6, r4
		*hex++ = byte2hex(hbyte);
 80006de:	7025      	strb	r5, [r4, #0]
	return ((c<10) ? (c)+_T('0') : (c)-10+_T('a'));
 80006e0:	001a      	movs	r2, r3
 80006e2:	3257      	adds	r2, #87	; 0x57
 80006e4:	2b09      	cmp	r3, #9
 80006e6:	d8eb      	bhi.n	80006c0 <bin2hex+0x14>
 80006e8:	3330      	adds	r3, #48	; 0x30
 80006ea:	001a      	movs	r2, r3
 80006ec:	e7e8      	b.n	80006c0 <bin2hex+0x14>
	}
	*hex++ = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	4662      	mov	r2, ip
 80006f2:	7013      	strb	r3, [r2, #0]
 80006f4:	1c50      	adds	r0, r2, #1
	return hex;
}
 80006f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006f8 <hex2bin>:

unsigned char* hex2bin(char *hex, unsigned char *bin, int iLen, int *oLen)
{
 80006f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fa:	46de      	mov	lr, fp
 80006fc:	4657      	mov	r7, sl
 80006fe:	464e      	mov	r6, r9
 8000700:	4645      	mov	r5, r8
 8000702:	b5e0      	push	{r5, r6, r7, lr}
 8000704:	b083      	sub	sp, #12
 8000706:	0007      	movs	r7, r0
 8000708:	9101      	str	r1, [sp, #4]
 800070a:	1e15      	subs	r5, r2, #0
 800070c:	4698      	mov	r8, r3
	int bLen;
	int i;

	iLen = (iLen <= 0) ? strlen(hex) : iLen;
 800070e:	dd1f      	ble.n	8000750 <hex2bin+0x58>
	if(strncmp(hex, "0x", 2) == 0)
 8000710:	2202      	movs	r2, #2
 8000712:	4948      	ldr	r1, [pc, #288]	; (8000834 <hex2bin+0x13c>)
 8000714:	0038      	movs	r0, r7
 8000716:	f004 fa70 	bl	8004bfa <strncmp>
 800071a:	2800      	cmp	r0, #0
 800071c:	d101      	bne.n	8000722 <hex2bin+0x2a>
	{
		/* hex string has 0x prefix */
		hex = hex + 2;
 800071e:	3702      	adds	r7, #2
		iLen -= 2;
 8000720:	3d02      	subs	r5, #2
	}

	if(iLen%2 != 0)
 8000722:	07eb      	lsls	r3, r5, #31
 8000724:	d450      	bmi.n	80007c8 <hex2bin+0xd0>
	{
		/* hex string is not a multiple of 2 in length */
		return NULL;
	}

	bLen = iLen / 2;
 8000726:	0fe8      	lsrs	r0, r5, #31
 8000728:	1945      	adds	r5, r0, r5
 800072a:	106d      	asrs	r5, r5, #1
	memset(bin,0,bLen);
 800072c:	002a      	movs	r2, r5
 800072e:	2100      	movs	r1, #0
 8000730:	9c01      	ldr	r4, [sp, #4]
 8000732:	0020      	movs	r0, r4
 8000734:	f004 fa59 	bl	8004bea <memset>

	for(i = 0; i < bLen; i++)
 8000738:	2d00      	cmp	r5, #0
 800073a:	dd3c      	ble.n	80007b6 <hex2bin+0xbe>
 800073c:	0039      	movs	r1, r7
 800073e:	46ac      	mov	ip, r5
 8000740:	46a1      	mov	r9, r4
 8000742:	44cc      	add	ip, r9
 8000744:	0020      	movs	r0, r4
 8000746:	2300      	movs	r3, #0
 8000748:	9300      	str	r3, [sp, #0]
	{
		char hbyte = *hex++;
		char lbyte = *hex++;

		if(!is_hex(hbyte) || !is_hex(lbyte)) {
 800074a:	3320      	adds	r3, #32
 800074c:	4699      	mov	r9, r3
 800074e:	e055      	b.n	80007fc <hex2bin+0x104>
	iLen = (iLen <= 0) ? strlen(hex) : iLen;
 8000750:	f7ff fcda 	bl	8000108 <strlen>
 8000754:	0005      	movs	r5, r0
 8000756:	e7db      	b.n	8000710 <hex2bin+0x18>
		if(!is_hex(hbyte) || !is_hex(lbyte)) {
 8000758:	003c      	movs	r4, r7
 800075a:	464a      	mov	r2, r9
 800075c:	4394      	bics	r4, r2
 800075e:	46a3      	mov	fp, r4
 8000760:	2241      	movs	r2, #65	; 0x41
 8000762:	4252      	negs	r2, r2
 8000764:	4692      	mov	sl, r2
 8000766:	44d3      	add	fp, sl
 8000768:	465a      	mov	r2, fp
 800076a:	2a05      	cmp	r2, #5
 800076c:	d901      	bls.n	8000772 <hex2bin+0x7a>
			/* invalid character */
			return NULL;
 800076e:	2000      	movs	r0, #0
 8000770:	e052      	b.n	8000818 <hex2bin+0x120>
		}
		*bin++ = (unsigned char) (hex2byte(hbyte)<<4 | hex2byte(lbyte));
 8000772:	3001      	adds	r0, #1
	return (c>=_T('0') && c<=_T('9')) ? (c)-_T('0') :
 8000774:	2b09      	cmp	r3, #9
 8000776:	d92f      	bls.n	80007d8 <hex2bin+0xe0>
 8000778:	0033      	movs	r3, r6
 800077a:	3b41      	subs	r3, #65	; 0x41
 800077c:	2b05      	cmp	r3, #5
 800077e:	d801      	bhi.n	8000784 <hex2bin+0x8c>
			(c>=_T('A') && c<=_T('F')) ? (c)-_T('A')+10 :
 8000780:	330a      	adds	r3, #10
 8000782:	e02b      	b.n	80007dc <hex2bin+0xe4>
	return (c>=_T('0') && c<=_T('9')) ? (c)-_T('0') :
 8000784:	2300      	movs	r3, #0
 8000786:	2261      	movs	r2, #97	; 0x61
 8000788:	4252      	negs	r2, r2
 800078a:	4693      	mov	fp, r2
 800078c:	44b3      	add	fp, r6
 800078e:	465a      	mov	r2, fp
 8000790:	2a05      	cmp	r2, #5
 8000792:	d823      	bhi.n	80007dc <hex2bin+0xe4>
					(c>=_T('a') && c<=_T('f')) ? (c)-_T('a')+10 : 0;
 8000794:	0033      	movs	r3, r6
 8000796:	3b57      	subs	r3, #87	; 0x57
 8000798:	e020      	b.n	80007dc <hex2bin+0xe4>
	return (c>=_T('0') && c<=_T('9')) ? (c)-_T('0') :
 800079a:	003d      	movs	r5, r7
 800079c:	3d41      	subs	r5, #65	; 0x41
 800079e:	2d05      	cmp	r5, #5
 80007a0:	d801      	bhi.n	80007a6 <hex2bin+0xae>
			(c>=_T('A') && c<=_T('F')) ? (c)-_T('A')+10 :
 80007a2:	350a      	adds	r5, #10
 80007a4:	e020      	b.n	80007e8 <hex2bin+0xf0>
	return (c>=_T('0') && c<=_T('9')) ? (c)-_T('0') :
 80007a6:	2500      	movs	r5, #0
 80007a8:	003e      	movs	r6, r7
 80007aa:	3e61      	subs	r6, #97	; 0x61
 80007ac:	2e05      	cmp	r6, #5
 80007ae:	d81b      	bhi.n	80007e8 <hex2bin+0xf0>
					(c>=_T('a') && c<=_T('f')) ? (c)-_T('a')+10 : 0;
 80007b0:	003d      	movs	r5, r7
 80007b2:	3d57      	subs	r5, #87	; 0x57
 80007b4:	e018      	b.n	80007e8 <hex2bin+0xf0>
	for(i = 0; i < bLen; i++)
 80007b6:	9801      	ldr	r0, [sp, #4]
 80007b8:	2300      	movs	r3, #0
 80007ba:	9300      	str	r3, [sp, #0]
	}

	if(oLen != NULL)
 80007bc:	4643      	mov	r3, r8
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d02a      	beq.n	8000818 <hex2bin+0x120>
	{
		*oLen = i;
 80007c2:	9a00      	ldr	r2, [sp, #0]
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	e027      	b.n	8000818 <hex2bin+0x120>
		return NULL;
 80007c8:	2000      	movs	r0, #0
 80007ca:	e025      	b.n	8000818 <hex2bin+0x120>
	return ((c>=_T('0') && c<=_T('9')) ||
 80007cc:	003d      	movs	r5, r7
 80007ce:	3d30      	subs	r5, #48	; 0x30
 80007d0:	b2ed      	uxtb	r5, r5
 80007d2:	2d09      	cmp	r5, #9
 80007d4:	d8c0      	bhi.n	8000758 <hex2bin+0x60>
		*bin++ = (unsigned char) (hex2byte(hbyte)<<4 | hex2byte(lbyte));
 80007d6:	3001      	adds	r0, #1
	return (c>=_T('0') && c<=_T('9')) ? (c)-_T('0') :
 80007d8:	0033      	movs	r3, r6
 80007da:	3b30      	subs	r3, #48	; 0x30
		*bin++ = (unsigned char) (hex2byte(hbyte)<<4 | hex2byte(lbyte));
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	b25b      	sxtb	r3, r3
	return (c>=_T('0') && c<=_T('9')) ? (c)-_T('0') :
 80007e0:	2d09      	cmp	r5, #9
 80007e2:	d8da      	bhi.n	800079a <hex2bin+0xa2>
 80007e4:	003d      	movs	r5, r7
 80007e6:	3d30      	subs	r5, #48	; 0x30
		*bin++ = (unsigned char) (hex2byte(hbyte)<<4 | hex2byte(lbyte));
 80007e8:	432b      	orrs	r3, r5
 80007ea:	9c01      	ldr	r4, [sp, #4]
 80007ec:	9a00      	ldr	r2, [sp, #0]
 80007ee:	54a3      	strb	r3, [r4, r2]
	for(i = 0; i < bLen; i++)
 80007f0:	0013      	movs	r3, r2
 80007f2:	3301      	adds	r3, #1
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	3102      	adds	r1, #2
 80007f8:	4584      	cmp	ip, r0
 80007fa:	d0df      	beq.n	80007bc <hex2bin+0xc4>
		char hbyte = *hex++;
 80007fc:	780e      	ldrb	r6, [r1, #0]
		char lbyte = *hex++;
 80007fe:	784f      	ldrb	r7, [r1, #1]
	return ((c>=_T('0') && c<=_T('9')) ||
 8000800:	0033      	movs	r3, r6
 8000802:	3b30      	subs	r3, #48	; 0x30
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b09      	cmp	r3, #9
 8000808:	d9e0      	bls.n	80007cc <hex2bin+0xd4>
		if(!is_hex(hbyte) || !is_hex(lbyte)) {
 800080a:	0035      	movs	r5, r6
 800080c:	464c      	mov	r4, r9
 800080e:	43a5      	bics	r5, r4
 8000810:	3d41      	subs	r5, #65	; 0x41
 8000812:	2d05      	cmp	r5, #5
 8000814:	d907      	bls.n	8000826 <hex2bin+0x12e>
			return NULL;
 8000816:	2000      	movs	r0, #0
	}
	return bin;
}
 8000818:	b003      	add	sp, #12
 800081a:	bc3c      	pop	{r2, r3, r4, r5}
 800081c:	4690      	mov	r8, r2
 800081e:	4699      	mov	r9, r3
 8000820:	46a2      	mov	sl, r4
 8000822:	46ab      	mov	fp, r5
 8000824:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((c>=_T('0') && c<=_T('9')) ||
 8000826:	003d      	movs	r5, r7
 8000828:	3d30      	subs	r5, #48	; 0x30
 800082a:	b2ed      	uxtb	r5, r5
 800082c:	2d09      	cmp	r5, #9
 800082e:	d893      	bhi.n	8000758 <hex2bin+0x60>
		*bin++ = (unsigned char) (hex2byte(hbyte)<<4 | hex2byte(lbyte));
 8000830:	3001      	adds	r0, #1
 8000832:	e7a1      	b.n	8000778 <hex2bin+0x80>
 8000834:	08004c7c 	.word	0x08004c7c

08000838 <default_CSPRNG>:
	}
	/* USER CODE END 5 */
}

int default_CSPRNG(uint8_t *dest, unsigned int size)
{
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	b083      	sub	sp, #12
 800083c:	0005      	movs	r5, r0
	uint32_t num = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	9301      	str	r3, [sp, #4]
	uint32_t remaining_bytes = size;
	uint32_t idx = 0;

	while(remaining_bytes > 0)
 8000842:	2900      	cmp	r1, #0
 8000844:	d017      	beq.n	8000876 <default_CSPRNG+0x3e>
 8000846:	000c      	movs	r4, r1
 8000848:	2600      	movs	r6, #0
	{
		HAL_RNG_GenerateRandomNumber(&hrng, &num);
 800084a:	4f0c      	ldr	r7, [pc, #48]	; (800087c <default_CSPRNG+0x44>)
 800084c:	a901      	add	r1, sp, #4
 800084e:	0038      	movs	r0, r7
 8000850:	f001 fe6f 	bl	8002532 <HAL_RNG_GenerateRandomNumber>

		if(remaining_bytes >= 4)
 8000854:	2c03      	cmp	r4, #3
 8000856:	d909      	bls.n	800086c <default_CSPRNG+0x34>
		{
			memcpy(dest+idx, &num, 4);
 8000858:	19a8      	adds	r0, r5, r6
 800085a:	2204      	movs	r2, #4
 800085c:	a901      	add	r1, sp, #4
 800085e:	f004 f9bb 	bl	8004bd8 <memcpy>
			remaining_bytes -= 4;
 8000862:	3c04      	subs	r4, #4
			idx +=4;
 8000864:	3604      	adds	r6, #4
	while(remaining_bytes > 0)
 8000866:	2c00      	cmp	r4, #0
 8000868:	d1f0      	bne.n	800084c <default_CSPRNG+0x14>
 800086a:	e004      	b.n	8000876 <default_CSPRNG+0x3e>
		}
		else
		{
			memcpy(dest+idx, &num, remaining_bytes);
 800086c:	19a8      	adds	r0, r5, r6
 800086e:	0022      	movs	r2, r4
 8000870:	a901      	add	r1, sp, #4
 8000872:	f004 f9b1 	bl	8004bd8 <memcpy>
			remaining_bytes = 0;
			idx += remaining_bytes;
		}
	}
	return 1;
}
 8000876:	2001      	movs	r0, #1
 8000878:	b003      	add	sp, #12
 800087a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087c:	20000f84 	.word	0x20000f84

08000880 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000880:	b570      	push	{r4, r5, r6, lr}
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2110      	movs	r1, #16
 8000886:	4811      	ldr	r0, [pc, #68]	; (80008cc <Error_Handler+0x4c>)
 8000888:	f000 ff98 	bl	80017bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2120      	movs	r1, #32
 8000890:	20a0      	movs	r0, #160	; 0xa0
 8000892:	05c0      	lsls	r0, r0, #23
 8000894:	f000 ff92 	bl	80017bc <HAL_GPIO_WritePin>
	while(1)
	{
		const GPIO_PinState state = HAL_GPIO_ReadPin(LD_R_GPIO_Port, LD_R_Pin);
 8000898:	24a0      	movs	r4, #160	; 0xa0
 800089a:	05e4      	lsls	r4, r4, #23
			HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_SET);
		}else
		{
			HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
		}
		vTaskDelay(pdMS_TO_TICKS(1000));
 800089c:	25fa      	movs	r5, #250	; 0xfa
 800089e:	00ad      	lsls	r5, r5, #2
 80008a0:	e007      	b.n	80008b2 <Error_Handler+0x32>
			HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2120      	movs	r1, #32
 80008a6:	0020      	movs	r0, r4
 80008a8:	f000 ff88 	bl	80017bc <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80008ac:	0028      	movs	r0, r5
 80008ae:	f004 f8cf 	bl	8004a50 <vTaskDelay>
		const GPIO_PinState state = HAL_GPIO_ReadPin(LD_R_GPIO_Port, LD_R_Pin);
 80008b2:	2120      	movs	r1, #32
 80008b4:	0020      	movs	r0, r4
 80008b6:	f000 ff7b 	bl	80017b0 <HAL_GPIO_ReadPin>
		if(state == GPIO_PIN_RESET)
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d1f1      	bne.n	80008a2 <Error_Handler+0x22>
			HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2120      	movs	r1, #32
 80008c2:	0020      	movs	r0, r4
 80008c4:	f000 ff7a 	bl	80017bc <HAL_GPIO_WritePin>
 80008c8:	e7f0      	b.n	80008ac <Error_Handler+0x2c>
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	50000400 	.word	0x50000400

080008d0 <StartDefaultTask>:
{
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	b0be      	sub	sp, #248	; 0xf8
	uECC_set_rng(&default_CSPRNG);
 80008d4:	4827      	ldr	r0, [pc, #156]	; (8000974 <StartDefaultTask+0xa4>)
 80008d6:	f002 fb05 	bl	8002ee4 <uECC_set_rng>
	g_curve = uECC_secp256k1();
 80008da:	f002 feb3 	bl	8003644 <uECC_secp256k1>
 80008de:	4c26      	ldr	r4, [pc, #152]	; (8000978 <StartDefaultTask+0xa8>)
 80008e0:	6020      	str	r0, [r4, #0]
	hex2bin(PRV_KEY, prv_bytes, 2*NUM_ECC_BYTES, NULL);
 80008e2:	2300      	movs	r3, #0
 80008e4:	2240      	movs	r2, #64	; 0x40
 80008e6:	a926      	add	r1, sp, #152	; 0x98
 80008e8:	4824      	ldr	r0, [pc, #144]	; (800097c <StartDefaultTask+0xac>)
 80008ea:	f7ff ff05 	bl	80006f8 <hex2bin>
	if(!uECC_compute_public_key(prv_bytes, pub_bytes, g_curve))
 80008ee:	6822      	ldr	r2, [r4, #0]
 80008f0:	a92e      	add	r1, sp, #184	; 0xb8
 80008f2:	a826      	add	r0, sp, #152	; 0x98
 80008f4:	f003 f920 	bl	8003b38 <uECC_compute_public_key>
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d101      	bne.n	8000900 <StartDefaultTask+0x30>
		Error_Handler();
 80008fc:	f7ff ffc0 	bl	8000880 <Error_Handler>
	ethAddrFromPubkey(pub_bytes, addr_str);
 8000900:	a91b      	add	r1, sp, #108	; 0x6c
 8000902:	a82e      	add	r0, sp, #184	; 0xb8
 8000904:	f7ff feb2 	bl	800066c <ethAddrFromPubkey>
		HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 8000908:	4c1d      	ldr	r4, [pc, #116]	; (8000980 <StartDefaultTask+0xb0>)
		if(!uECC_sign(prv_bytes, hash, sizeof(hash), sig, g_curve ))
 800090a:	4d1b      	ldr	r5, [pc, #108]	; (8000978 <StartDefaultTask+0xa8>)
		if(!uECC_verify(pub_bytes, hash, sizeof(hash), sig, g_curve))
 800090c:	002e      	movs	r6, r5
		HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2110      	movs	r1, #16
 8000912:	0020      	movs	r0, r4
 8000914:	f000 ff52 	bl	80017bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2120      	movs	r1, #32
 800091c:	20a0      	movs	r0, #160	; 0xa0
 800091e:	05c0      	lsls	r0, r0, #23
 8000920:	f000 ff4c 	bl	80017bc <HAL_GPIO_WritePin>
		if(!uECC_sign(prv_bytes, hash, sizeof(hash), sig, g_curve ))
 8000924:	682b      	ldr	r3, [r5, #0]
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	ab03      	add	r3, sp, #12
 800092a:	2220      	movs	r2, #32
 800092c:	a913      	add	r1, sp, #76	; 0x4c
 800092e:	a826      	add	r0, sp, #152	; 0x98
 8000930:	f003 fa4d 	bl	8003dce <uECC_sign>
 8000934:	2800      	cmp	r0, #0
 8000936:	d019      	beq.n	800096c <StartDefaultTask+0x9c>
		HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2120      	movs	r1, #32
 800093c:	20a0      	movs	r0, #160	; 0xa0
 800093e:	05c0      	lsls	r0, r0, #23
 8000940:	f000 ff3c 	bl	80017bc <HAL_GPIO_WritePin>
		if(!uECC_verify(pub_bytes, hash, sizeof(hash), sig, g_curve))
 8000944:	6833      	ldr	r3, [r6, #0]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	ab03      	add	r3, sp, #12
 800094a:	2220      	movs	r2, #32
 800094c:	a913      	add	r1, sp, #76	; 0x4c
 800094e:	a82e      	add	r0, sp, #184	; 0xb8
 8000950:	f003 fa74 	bl	8003e3c <uECC_verify>
 8000954:	2800      	cmp	r0, #0
 8000956:	d00b      	beq.n	8000970 <StartDefaultTask+0xa0>
		HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2110      	movs	r1, #16
 800095c:	0020      	movs	r0, r4
 800095e:	f000 ff2d 	bl	80017bc <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000962:	20fa      	movs	r0, #250	; 0xfa
 8000964:	0040      	lsls	r0, r0, #1
 8000966:	f004 f873 	bl	8004a50 <vTaskDelay>
		HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 800096a:	e7d0      	b.n	800090e <StartDefaultTask+0x3e>
			Error_Handler();
 800096c:	f7ff ff88 	bl	8000880 <Error_Handler>
			Error_Handler();
 8000970:	f7ff ff86 	bl	8000880 <Error_Handler>
 8000974:	08000839 	.word	0x08000839
 8000978:	20000efc 	.word	0x20000efc
 800097c:	08004c38 	.word	0x08004c38
 8000980:	50000400 	.word	0x50000400

08000984 <SystemClock_Config>:
{
 8000984:	b500      	push	{lr}
 8000986:	b09d      	sub	sp, #116	; 0x74
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000988:	2238      	movs	r2, #56	; 0x38
 800098a:	2100      	movs	r1, #0
 800098c:	a80e      	add	r0, sp, #56	; 0x38
 800098e:	f004 f92c 	bl	8004bea <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000992:	2214      	movs	r2, #20
 8000994:	2100      	movs	r1, #0
 8000996:	a809      	add	r0, sp, #36	; 0x24
 8000998:	f004 f927 	bl	8004bea <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800099c:	2224      	movs	r2, #36	; 0x24
 800099e:	2100      	movs	r1, #0
 80009a0:	4668      	mov	r0, sp
 80009a2:	f004 f922 	bl	8004bea <memset>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a6:	4921      	ldr	r1, [pc, #132]	; (8000a2c <SystemClock_Config+0xa8>)
 80009a8:	680b      	ldr	r3, [r1, #0]
 80009aa:	4a21      	ldr	r2, [pc, #132]	; (8000a30 <SystemClock_Config+0xac>)
 80009ac:	401a      	ands	r2, r3
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	4313      	orrs	r3, r2
 80009b4:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 80009b6:	2321      	movs	r3, #33	; 0x21
 80009b8:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009ba:	23a0      	movs	r3, #160	; 0xa0
 80009bc:	02db      	lsls	r3, r3, #11
 80009be:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009c0:	2301      	movs	r3, #1
 80009c2:	9314      	str	r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	3301      	adds	r3, #1
 80009c6:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	025b      	lsls	r3, r3, #9
 80009cc:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_12;
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	035b      	lsls	r3, r3, #13
 80009d2:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	041b      	lsls	r3, r3, #16
 80009d8:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009da:	a80e      	add	r0, sp, #56	; 0x38
 80009dc:	f001 f892 	bl	8001b04 <HAL_RCC_OscConfig>
 80009e0:	2800      	cmp	r0, #0
 80009e2:	d11c      	bne.n	8000a1e <SystemClock_Config+0x9a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e4:	230f      	movs	r3, #15
 80009e6:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e8:	3b0c      	subs	r3, #12
 80009ea:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f0:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f2:	930d      	str	r3, [sp, #52]	; 0x34
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009f4:	2101      	movs	r1, #1
 80009f6:	a809      	add	r0, sp, #36	; 0x24
 80009f8:	f001 fb6c 	bl	80020d4 <HAL_RCC_ClockConfig>
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d110      	bne.n	8000a22 <SystemClock_Config+0x9e>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000a00:	2349      	movs	r3, #73	; 0x49
 8000a02:	9300      	str	r3, [sp, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a04:	2300      	movs	r3, #0
 8000a06:	9303      	str	r3, [sp, #12]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a08:	9306      	str	r3, [sp, #24]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	04db      	lsls	r3, r3, #19
 8000a0e:	9308      	str	r3, [sp, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	4668      	mov	r0, sp
 8000a12:	f001 fc61 	bl	80022d8 <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	d105      	bne.n	8000a26 <SystemClock_Config+0xa2>
}
 8000a1a:	b01d      	add	sp, #116	; 0x74
 8000a1c:	bd00      	pop	{pc}
		Error_Handler();
 8000a1e:	f7ff ff2f 	bl	8000880 <Error_Handler>
		Error_Handler();
 8000a22:	f7ff ff2d 	bl	8000880 <Error_Handler>
		Error_Handler();
 8000a26:	f7ff ff2b 	bl	8000880 <Error_Handler>
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	40007000 	.word	0x40007000
 8000a30:	ffffe7ff 	.word	0xffffe7ff

08000a34 <main>:
{
 8000a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a36:	b08d      	sub	sp, #52	; 0x34
	HAL_Init();
 8000a38:	f000 fd68 	bl	800150c <HAL_Init>
	SystemClock_Config();
 8000a3c:	f7ff ffa2 	bl	8000984 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	2214      	movs	r2, #20
 8000a42:	2100      	movs	r1, #0
 8000a44:	a807      	add	r0, sp, #28
 8000a46:	f004 f8d0 	bl	8004bea <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b8f      	ldr	r3, [pc, #572]	; (8000c88 <main+0x254>)
 8000a4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a4e:	2204      	movs	r2, #4
 8000a50:	4311      	orrs	r1, r2
 8000a52:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a56:	400a      	ands	r2, r1
 8000a58:	9203      	str	r2, [sp, #12]
 8000a5a:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	4311      	orrs	r1, r2
 8000a62:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a66:	400a      	ands	r2, r1
 8000a68:	9204      	str	r2, [sp, #16]
 8000a6a:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a6e:	2501      	movs	r5, #1
 8000a70:	432a      	orrs	r2, r5
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a76:	402a      	ands	r2, r5
 8000a78:	9205      	str	r2, [sp, #20]
 8000a7a:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a7e:	2202      	movs	r2, #2
 8000a80:	4311      	orrs	r1, r2
 8000a82:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a86:	401a      	ands	r2, r3
 8000a88:	9206      	str	r2, [sp, #24]
 8000a8a:	9b06      	ldr	r3, [sp, #24]
	HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000a8c:	26a0      	movs	r6, #160	; 0xa0
 8000a8e:	05f6      	lsls	r6, r6, #23
 8000a90:	2200      	movs	r2, #0
 8000a92:	2120      	movs	r1, #32
 8000a94:	0030      	movs	r0, r6
 8000a96:	f000 fe91 	bl	80017bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin, GPIO_PIN_RESET);
 8000a9a:	4f7c      	ldr	r7, [pc, #496]	; (8000c8c <main+0x258>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	0039      	movs	r1, r7
 8000aa0:	487b      	ldr	r0, [pc, #492]	; (8000c90 <main+0x25c>)
 8000aa2:	f000 fe8b 	bl	80017bc <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	019b      	lsls	r3, r3, #6
 8000aaa:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aac:	4b79      	ldr	r3, [pc, #484]	; (8000c94 <main+0x260>)
 8000aae:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	a907      	add	r1, sp, #28
 8000ab6:	4878      	ldr	r0, [pc, #480]	; (8000c98 <main+0x264>)
 8000ab8:	f000 fd9a 	bl	80015f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = B1_Pin;
 8000abc:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000abe:	4b77      	ldr	r3, [pc, #476]	; (8000c9c <main+0x268>)
 8000ac0:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	a907      	add	r1, sp, #28
 8000ac6:	0030      	movs	r0, r6
 8000ac8:	f000 fd92 	bl	80015f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|ePD1_BUSY_Pin;
 8000acc:	2381      	movs	r3, #129	; 0x81
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad2:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	a907      	add	r1, sp, #28
 8000ad8:	0030      	movs	r0, r6
 8000ada:	f000 fd89 	bl	80015f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD_R_Pin;
 8000ade:	2320      	movs	r3, #32
 8000ae0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	940a      	str	r4, [sp, #40]	; 0x28
	HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	a907      	add	r1, sp, #28
 8000aea:	0030      	movs	r0, r6
 8000aec:	f000 fd80 	bl	80015f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin;
 8000af0:	9707      	str	r7, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	940a      	str	r4, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	a907      	add	r1, sp, #28
 8000afa:	4865      	ldr	r0, [pc, #404]	; (8000c90 <main+0x25c>)
 8000afc:	f000 fd78 	bl	80015f0 <HAL_GPIO_Init>
	hi2c1.Instance = I2C1;
 8000b00:	4867      	ldr	r0, [pc, #412]	; (8000ca0 <main+0x26c>)
 8000b02:	4b68      	ldr	r3, [pc, #416]	; (8000ca4 <main+0x270>)
 8000b04:	6003      	str	r3, [r0, #0]
	hi2c1.Init.Timing = 0x00000708;
 8000b06:	23e1      	movs	r3, #225	; 0xe1
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	6043      	str	r3, [r0, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000b0c:	6084      	str	r4, [r0, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b0e:	60c5      	str	r5, [r0, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	6104      	str	r4, [r0, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000b12:	6144      	str	r4, [r0, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b14:	6184      	str	r4, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b16:	61c4      	str	r4, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b18:	6204      	str	r4, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b1a:	f000 fe55 	bl	80017c8 <HAL_I2C_Init>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d000      	beq.n	8000b24 <main+0xf0>
 8000b22:	e09c      	b.n	8000c5e <main+0x22a>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	485e      	ldr	r0, [pc, #376]	; (8000ca0 <main+0x26c>)
 8000b28:	f000 feb4 	bl	8001894 <HAL_I2CEx_ConfigAnalogFilter>
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d000      	beq.n	8000b32 <main+0xfe>
 8000b30:	e097      	b.n	8000c62 <main+0x22e>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	485a      	ldr	r0, [pc, #360]	; (8000ca0 <main+0x26c>)
 8000b36:	f000 fed9 	bl	80018ec <HAL_I2CEx_ConfigDigitalFilter>
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d000      	beq.n	8000b40 <main+0x10c>
 8000b3e:	e092      	b.n	8000c66 <main+0x232>
	hspi1.Instance = SPI1;
 8000b40:	4859      	ldr	r0, [pc, #356]	; (8000ca8 <main+0x274>)
 8000b42:	4b5a      	ldr	r3, [pc, #360]	; (8000cac <main+0x278>)
 8000b44:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b46:	2382      	movs	r3, #130	; 0x82
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	6043      	str	r3, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	021b      	lsls	r3, r3, #8
 8000b50:	6083      	str	r3, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60c3      	str	r3, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b56:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b58:	6143      	str	r3, [r0, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000b5a:	6183      	str	r3, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5c:	61c3      	str	r3, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b5e:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b60:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b62:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000b64:	3307      	adds	r3, #7
 8000b66:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b68:	f001 fd14 	bl	8002594 <HAL_SPI_Init>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d000      	beq.n	8000b72 <main+0x13e>
 8000b70:	e07b      	b.n	8000c6a <main+0x236>
	hspi2.Instance = SPI2;
 8000b72:	484f      	ldr	r0, [pc, #316]	; (8000cb0 <main+0x27c>)
 8000b74:	4b4f      	ldr	r3, [pc, #316]	; (8000cb4 <main+0x280>)
 8000b76:	6003      	str	r3, [r0, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b78:	2382      	movs	r3, #130	; 0x82
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	6043      	str	r3, [r0, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	6083      	str	r3, [r0, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b82:	60c3      	str	r3, [r0, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b84:	6103      	str	r3, [r0, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b86:	6143      	str	r3, [r0, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000b88:	6183      	str	r3, [r0, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b8a:	61c3      	str	r3, [r0, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8c:	6203      	str	r3, [r0, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8e:	6243      	str	r3, [r0, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b90:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000b92:	3307      	adds	r3, #7
 8000b94:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b96:	f001 fcfd 	bl	8002594 <HAL_SPI_Init>
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	d167      	bne.n	8000c6e <main+0x23a>
	htsc.Instance = TSC;
 8000b9e:	4846      	ldr	r0, [pc, #280]	; (8000cb8 <main+0x284>)
 8000ba0:	4b46      	ldr	r3, [pc, #280]	; (8000cbc <main+0x288>)
 8000ba2:	6003      	str	r3, [r0, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	055b      	lsls	r3, r3, #21
 8000ba8:	6043      	str	r3, [r0, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	045b      	lsls	r3, r3, #17
 8000bae:	6083      	str	r3, [r0, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60c3      	str	r3, [r0, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	6102      	str	r2, [r0, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000bb8:	6143      	str	r3, [r0, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	0192      	lsls	r2, r2, #6
 8000bbe:	6182      	str	r2, [r0, #24]
	htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000bc0:	22a0      	movs	r2, #160	; 0xa0
 8000bc2:	61c2      	str	r2, [r0, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000bc4:	6203      	str	r3, [r0, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000bc6:	6243      	str	r3, [r0, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000bc8:	6283      	str	r3, [r0, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 8000bca:	62c3      	str	r3, [r0, #44]	; 0x2c
	htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8000bcc:	32a5      	adds	r2, #165	; 0xa5
 8000bce:	32ff      	adds	r2, #255	; 0xff
 8000bd0:	6302      	str	r2, [r0, #48]	; 0x30
	htsc.Init.ShieldIOs = 0;
 8000bd2:	6343      	str	r3, [r0, #52]	; 0x34
	htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 8000bd4:	2391      	movs	r3, #145	; 0x91
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	6383      	str	r3, [r0, #56]	; 0x38
	if (HAL_TSC_Init(&htsc) != HAL_OK)
 8000bda:	f001 fd33 	bl	8002644 <HAL_TSC_Init>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d147      	bne.n	8000c72 <main+0x23e>
	huart1.Instance = USART1;
 8000be2:	4837      	ldr	r0, [pc, #220]	; (8000cc0 <main+0x28c>)
 8000be4:	4b37      	ldr	r3, [pc, #220]	; (8000cc4 <main+0x290>)
 8000be6:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 8000be8:	23e1      	movs	r3, #225	; 0xe1
 8000bea:	025b      	lsls	r3, r3, #9
 8000bec:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf2:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000bf4:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfe:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c00:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c02:	f001 fff9 	bl	8002bf8 <HAL_UART_Init>
 8000c06:	2800      	cmp	r0, #0
 8000c08:	d135      	bne.n	8000c76 <main+0x242>
	hpcd_USB_FS.Instance = USB;
 8000c0a:	482f      	ldr	r0, [pc, #188]	; (8000cc8 <main+0x294>)
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <main+0x298>)
 8000c0e:	6003      	str	r3, [r0, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c10:	2308      	movs	r3, #8
 8000c12:	6043      	str	r3, [r0, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c14:	2202      	movs	r2, #2
 8000c16:	6082      	str	r2, [r0, #8]
	hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60c3      	str	r3, [r0, #12]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c1c:	6102      	str	r2, [r0, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c1e:	6183      	str	r3, [r0, #24]
	hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000c20:	61c3      	str	r3, [r0, #28]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c22:	6203      	str	r3, [r0, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c24:	f000 fe8c 	bl	8001940 <HAL_PCD_Init>
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	d126      	bne.n	8000c7a <main+0x246>
	hrng.Instance = RNG;
 8000c2c:	4828      	ldr	r0, [pc, #160]	; (8000cd0 <main+0x29c>)
 8000c2e:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <main+0x2a0>)
 8000c30:	6003      	str	r3, [r0, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000c32:	f001 fc65 	bl	8002500 <HAL_RNG_Init>
 8000c36:	2800      	cmp	r0, #0
 8000c38:	d121      	bne.n	8000c7e <main+0x24a>
	BaseType_t result =  xTaskCreate(StartDefaultTask, "start task", 512, NULL, 5, &g_taskHandle);
 8000c3a:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <main+0x2a4>)
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	2305      	movs	r3, #5
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2300      	movs	r3, #0
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	0092      	lsls	r2, r2, #2
 8000c48:	4924      	ldr	r1, [pc, #144]	; (8000cdc <main+0x2a8>)
 8000c4a:	4825      	ldr	r0, [pc, #148]	; (8000ce0 <main+0x2ac>)
 8000c4c:	f003 fcfa 	bl	8004644 <xTaskCreate>
	if(result != pdPASS)
 8000c50:	2801      	cmp	r0, #1
 8000c52:	d116      	bne.n	8000c82 <main+0x24e>
	vTaskStartScheduler();
 8000c54:	f003 fdca 	bl	80047ec <vTaskStartScheduler>
}
 8000c58:	2000      	movs	r0, #0
 8000c5a:	b00d      	add	sp, #52	; 0x34
 8000c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Error_Handler();
 8000c5e:	f7ff fe0f 	bl	8000880 <Error_Handler>
		Error_Handler();
 8000c62:	f7ff fe0d 	bl	8000880 <Error_Handler>
		Error_Handler();
 8000c66:	f7ff fe0b 	bl	8000880 <Error_Handler>
		Error_Handler();
 8000c6a:	f7ff fe09 	bl	8000880 <Error_Handler>
		Error_Handler();
 8000c6e:	f7ff fe07 	bl	8000880 <Error_Handler>
		Error_Handler();
 8000c72:	f7ff fe05 	bl	8000880 <Error_Handler>
		Error_Handler();
 8000c76:	f7ff fe03 	bl	8000880 <Error_Handler>
		Error_Handler();
 8000c7a:	f7ff fe01 	bl	8000880 <Error_Handler>
		Error_Handler();
 8000c7e:	f7ff fdff 	bl	8000880 <Error_Handler>
		Error_Handler();
 8000c82:	f7ff fdfd 	bl	8000880 <Error_Handler>
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	00000c14 	.word	0x00000c14
 8000c90:	50000400 	.word	0x50000400
 8000c94:	10110000 	.word	0x10110000
 8000c98:	50000800 	.word	0x50000800
 8000c9c:	10120000 	.word	0x10120000
 8000ca0:	20000eb0 	.word	0x20000eb0
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	20000f94 	.word	0x20000f94
 8000cac:	40013000 	.word	0x40013000
 8000cb0:	20000e58 	.word	0x20000e58
 8000cb4:	40003800 	.word	0x40003800
 8000cb8:	20001260 	.word	0x20001260
 8000cbc:	40024000 	.word	0x40024000
 8000cc0:	20000f04 	.word	0x20000f04
 8000cc4:	40013800 	.word	0x40013800
 8000cc8:	20000fec 	.word	0x20000fec
 8000ccc:	40005c00 	.word	0x40005c00
 8000cd0:	20000f84 	.word	0x20000f84
 8000cd4:	40025000 	.word	0x40025000
 8000cd8:	20000f00 	.word	0x20000f00
 8000cdc:	08004c80 	.word	0x08004c80
 8000ce0:	080008d1 	.word	0x080008d1

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_MspInit+0x24>)
 8000ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cea:	2101      	movs	r1, #1
 8000cec:	430a      	orrs	r2, r1
 8000cee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	0552      	lsls	r2, r2, #21
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2103      	movs	r1, #3
 8000cfe:	2002      	movs	r0, #2
 8000d00:	4240      	negs	r0, r0
 8000d02:	f000 fc25 	bl	8001550 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bd10      	pop	{r4, pc}
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d0c:	b510      	push	{r4, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	2214      	movs	r2, #20
 8000d14:	2100      	movs	r1, #0
 8000d16:	a801      	add	r0, sp, #4
 8000d18:	f003 ff67 	bl	8004bea <memset>
  if(hi2c->Instance==I2C1)
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_I2C_MspInit+0x58>)
 8000d1e:	6822      	ldr	r2, [r4, #0]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d001      	beq.n	8000d28 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d24:	b006      	add	sp, #24
 8000d26:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4c0f      	ldr	r4, [pc, #60]	; (8000d68 <HAL_I2C_MspInit+0x5c>)
 8000d2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	62e2      	str	r2, [r4, #44]	; 0x2c
 8000d32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d34:	4013      	ands	r3, r2
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 8000d3a:	23c0      	movs	r3, #192	; 0xc0
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d40:	2312      	movs	r3, #18
 8000d42:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d44:	3b11      	subs	r3, #17
 8000d46:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	3302      	adds	r3, #2
 8000d4a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	a901      	add	r1, sp, #4
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <HAL_I2C_MspInit+0x60>)
 8000d54:	f000 fc4c 	bl	80015f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	039b      	lsls	r3, r3, #14
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000d62:	e7df      	b.n	8000d24 <HAL_I2C_MspInit+0x18>
 8000d64:	40005400 	.word	0x40005400
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	50000400 	.word	0x50000400

08000d70 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000d70:	b082      	sub	sp, #8

  if(hrng->Instance==RNG)
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_RNG_MspInit+0x24>)
 8000d74:	6802      	ldr	r2, [r0, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d001      	beq.n	8000d7e <HAL_RNG_MspInit+0xe>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000d7a:	b002      	add	sp, #8
 8000d7c:	4770      	bx	lr
    __HAL_RCC_RNG_CLK_ENABLE();
 8000d7e:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_RNG_MspInit+0x28>)
 8000d80:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000d82:	2080      	movs	r0, #128	; 0x80
 8000d84:	0340      	lsls	r0, r0, #13
 8000d86:	4301      	orrs	r1, r0
 8000d88:	6311      	str	r1, [r2, #48]	; 0x30
 8000d8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d8c:	4003      	ands	r3, r0
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	9b01      	ldr	r3, [sp, #4]
}
 8000d92:	e7f2      	b.n	8000d7a <HAL_RNG_MspInit+0xa>
 8000d94:	40025000 	.word	0x40025000
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	2214      	movs	r2, #20
 8000da4:	2100      	movs	r1, #0
 8000da6:	a803      	add	r0, sp, #12
 8000da8:	f003 ff1f 	bl	8004bea <memset>
  if(hspi->Instance==SPI1)
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	4a26      	ldr	r2, [pc, #152]	; (8000e48 <HAL_SPI_MspInit+0xac>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d004      	beq.n	8000dbe <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8000db4:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <HAL_SPI_MspInit+0xb0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d02c      	beq.n	8000e14 <HAL_SPI_MspInit+0x78>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dba:	b008      	add	sp, #32
 8000dbc:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dbe:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <HAL_SPI_MspInit+0xb4>)
 8000dc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	0152      	lsls	r2, r2, #5
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4311      	orrs	r1, r2
 8000dd0:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000dd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dd4:	400a      	ands	r2, r1
 8000dd6:	9200      	str	r2, [sp, #0]
 8000dd8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ddc:	2402      	movs	r4, #2
 8000dde:	4322      	orrs	r2, r4
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de4:	4023      	ands	r3, r4
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8000df2:	a903      	add	r1, sp, #12
 8000df4:	20a0      	movs	r0, #160	; 0xa0
 8000df6:	05c0      	lsls	r0, r0, #23
 8000df8:	f000 fbfa 	bl	80015f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 8000dfc:	2328      	movs	r3, #40	; 0x28
 8000dfe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000e08:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	a903      	add	r1, sp, #12
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <HAL_SPI_MspInit+0xb8>)
 8000e0e:	f000 fbef 	bl	80015f0 <HAL_GPIO_Init>
 8000e12:	e7d2      	b.n	8000dba <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_SPI_MspInit+0xb4>)
 8000e16:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000e18:	2280      	movs	r2, #128	; 0x80
 8000e1a:	01d2      	lsls	r2, r2, #7
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e22:	2202      	movs	r2, #2
 8000e24:	4311      	orrs	r1, r2
 8000e26:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	9302      	str	r3, [sp, #8]
 8000e2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 8000e30:	23f0      	movs	r3, #240	; 0xf0
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	a903      	add	r1, sp, #12
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_SPI_MspInit+0xb8>)
 8000e40:	f000 fbd6 	bl	80015f0 <HAL_GPIO_Init>
}
 8000e44:	e7b9      	b.n	8000dba <HAL_SPI_MspInit+0x1e>
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	40013000 	.word	0x40013000
 8000e4c:	40003800 	.word	0x40003800
 8000e50:	40021000 	.word	0x40021000
 8000e54:	50000400 	.word	0x50000400

08000e58 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5a:	46ce      	mov	lr, r9
 8000e5c:	b500      	push	{lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	2214      	movs	r2, #20
 8000e64:	2100      	movs	r1, #0
 8000e66:	a803      	add	r0, sp, #12
 8000e68:	f003 febf 	bl	8004bea <memset>
  if(htsc->Instance==TSC)
 8000e6c:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <HAL_TSC_MspInit+0xb4>)
 8000e6e:	6822      	ldr	r2, [r4, #0]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d003      	beq.n	8000e7c <HAL_TSC_MspInit+0x24>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000e74:	b008      	add	sp, #32
 8000e76:	bc04      	pop	{r2}
 8000e78:	4691      	mov	r9, r2
 8000e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TSC_CLK_ENABLE();
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <HAL_TSC_MspInit+0xb8>)
 8000e7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e80:	2080      	movs	r0, #128	; 0x80
 8000e82:	0240      	lsls	r0, r0, #9
 8000e84:	4301      	orrs	r1, r0
 8000e86:	6319      	str	r1, [r3, #48]	; 0x30
 8000e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e8a:	4002      	ands	r2, r0
 8000e8c:	9200      	str	r2, [sp, #0]
 8000e8e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e92:	2701      	movs	r7, #1
 8000e94:	433a      	orrs	r2, r7
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e9a:	403a      	ands	r2, r7
 8000e9c:	9201      	str	r2, [sp, #4]
 8000e9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ea2:	2502      	movs	r5, #2
 8000ea4:	432a      	orrs	r2, r5
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eaa:	402b      	ands	r3, r5
 8000eac:	9302      	str	r3, [sp, #8]
 8000eae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000eb0:	2344      	movs	r3, #68	; 0x44
 8000eb2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000eb6:	2603      	movs	r6, #3
 8000eb8:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	a903      	add	r1, sp, #12
 8000ebc:	20a0      	movs	r0, #160	; 0xa0
 8000ebe:	05c0      	lsls	r0, r0, #23
 8000ec0:	f000 fb96 	bl	80015f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000ec4:	2388      	movs	r3, #136	; 0x88
 8000ec6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec8:	3b76      	subs	r3, #118	; 0x76
 8000eca:	4699      	mov	r9, r3
 8000ecc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2400      	movs	r4, #0
 8000ed0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000ed4:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	a903      	add	r1, sp, #12
 8000ed8:	20a0      	movs	r0, #160	; 0xa0
 8000eda:	05c0      	lsls	r0, r0, #23
 8000edc:	f000 fb88 	bl	80015f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee0:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000ee8:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	4f0a      	ldr	r7, [pc, #40]	; (8000f14 <HAL_TSC_MspInit+0xbc>)
 8000eec:	a903      	add	r1, sp, #12
 8000eee:	0038      	movs	r0, r7
 8000ef0:	f000 fb7e 	bl	80015f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ef4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000efe:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	a903      	add	r1, sp, #12
 8000f02:	0038      	movs	r0, r7
 8000f04:	f000 fb74 	bl	80015f0 <HAL_GPIO_Init>
}
 8000f08:	e7b4      	b.n	8000e74 <HAL_TSC_MspInit+0x1c>
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	40024000 	.word	0x40024000
 8000f10:	40021000 	.word	0x40021000
 8000f14:	50000400 	.word	0x50000400

08000f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f18:	b510      	push	{r4, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	2214      	movs	r2, #20
 8000f20:	2100      	movs	r1, #0
 8000f22:	a801      	add	r0, sp, #4
 8000f24:	f003 fe61 	bl	8004bea <memset>
  if(huart->Instance==USART1)
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_UART_MspInit+0x58>)
 8000f2a:	6822      	ldr	r2, [r4, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d001      	beq.n	8000f34 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f30:	b006      	add	sp, #24
 8000f32:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_UART_MspInit+0x5c>)
 8000f36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	01d2      	lsls	r2, r2, #7
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f42:	2201      	movs	r2, #1
 8000f44:	4311      	orrs	r1, r2
 8000f46:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	9200      	str	r2, [sp, #0]
 8000f4e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f50:	23c0      	movs	r3, #192	; 0xc0
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f5e:	3301      	adds	r3, #1
 8000f60:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	a901      	add	r1, sp, #4
 8000f64:	20a0      	movs	r0, #160	; 0xa0
 8000f66:	05c0      	lsls	r0, r0, #23
 8000f68:	f000 fb42 	bl	80015f0 <HAL_GPIO_Init>
}
 8000f6c:	e7e0      	b.n	8000f30 <HAL_UART_MspInit+0x18>
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	40013800 	.word	0x40013800
 8000f74:	40021000 	.word	0x40021000

08000f78 <HAL_PCD_MspInit>:
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{

  if(hpcd->Instance==USB)
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_PCD_MspInit+0x18>)
 8000f7a:	6802      	ldr	r2, [r0, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d000      	beq.n	8000f82 <HAL_PCD_MspInit+0xa>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000f80:	4770      	bx	lr
    __HAL_RCC_USB_CLK_ENABLE();
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_PCD_MspInit+0x1c>)
 8000f84:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	430b      	orrs	r3, r1
 8000f8c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f8e:	e7f7      	b.n	8000f80 <HAL_PCD_MspInit+0x8>
 8000f90:	40005c00 	.word	0x40005c00
 8000f94:	40021000 	.word	0x40021000

08000f98 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f98:	4770      	bx	lr

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler>

08000f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9e:	f000 fac9 	bl	8001534 <HAL_IncTick>
  osSystickHandler();
 8000fa2:	f003 f8c3 	bl	800412c <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa6:	bd10      	pop	{r4, pc}

08000fa8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <SystemInit+0x44>)
 8000faa:	6819      	ldr	r1, [r3, #0]
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	0052      	lsls	r2, r2, #1
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <SystemInit+0x48>)
 8000fb8:	400a      	ands	r2, r1
 8000fba:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <SystemInit+0x4c>)
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	438a      	bics	r2, r1
 8000fca:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	490a      	ldr	r1, [pc, #40]	; (8000ff8 <SystemInit+0x50>)
 8000fd0:	400a      	ands	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	4909      	ldr	r1, [pc, #36]	; (8000ffc <SystemInit+0x54>)
 8000fd8:	400a      	ands	r2, r1
 8000fda:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	0512      	lsls	r2, r2, #20
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SystemInit+0x58>)
 8000fe6:	609a      	str	r2, [r3, #8]
#endif
}
 8000fe8:	4770      	bx	lr
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	88ff400c 	.word	0x88ff400c
 8000ff4:	fef6fff6 	.word	0xfef6fff6
 8000ff8:	fffbffff 	.word	0xfffbffff
 8000ffc:	ff02ffff 	.word	0xff02ffff
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <keccakf>:
/* generally called after SHA3_KECCAK_SPONGE_WORDS-ctx->capacityWords words 
 * are XORed into the state s 
 */
static void
keccakf(uint64_t s[25])
{
 8001004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001006:	46de      	mov	lr, fp
 8001008:	4657      	mov	r7, sl
 800100a:	464e      	mov	r6, r9
 800100c:	4645      	mov	r5, r8
 800100e:	b5e0      	push	{r5, r6, r7, lr}
 8001010:	b093      	sub	sp, #76	; 0x4c
 8001012:	4682      	mov	sl, r0
 8001014:	4b85      	ldr	r3, [pc, #532]	; (800122c <keccakf+0x228>)
 8001016:	9305      	str	r3, [sp, #20]
 8001018:	2328      	movs	r3, #40	; 0x28
 800101a:	4453      	add	r3, sl
 800101c:	9307      	str	r3, [sp, #28]
        }

        /* Rho Pi */
        t = s[1];
        for(i = 0; i < 24; i++) {
            j = keccakf_piln[i];
 800101e:	4b84      	ldr	r3, [pc, #528]	; (8001230 <keccakf+0x22c>)
 8001020:	469b      	mov	fp, r3
            bc[0] = s[j];
            s[j] = SHA3_ROTL64(t, keccakf_rotc[i]);
 8001022:	4f84      	ldr	r7, [pc, #528]	; (8001234 <keccakf+0x230>)
 8001024:	233f      	movs	r3, #63	; 0x3f
 8001026:	4698      	mov	r8, r3
 8001028:	9004      	str	r0, [sp, #16]
 800102a:	e0d3      	b.n	80011d4 <keccakf+0x1d0>
 800102c:	3608      	adds	r6, #8
        for(i = 0; i < 5; i++) {
 800102e:	2d05      	cmp	r5, #5
 8001030:	d02b      	beq.n	800108a <keccakf+0x86>
            t = bc[(i + 4) % 5] ^ SHA3_ROTL64(bc[(i + 1) % 5], 1);
 8001032:	1d28      	adds	r0, r5, #4
 8001034:	2105      	movs	r1, #5
 8001036:	f7ff f9df 	bl	80003f8 <__aeabi_idivmod>
 800103a:	00c9      	lsls	r1, r1, #3
 800103c:	ab08      	add	r3, sp, #32
 800103e:	469c      	mov	ip, r3
 8001040:	4461      	add	r1, ip
 8001042:	680b      	ldr	r3, [r1, #0]
 8001044:	469a      	mov	sl, r3
 8001046:	684c      	ldr	r4, [r1, #4]
 8001048:	3501      	adds	r5, #1
 800104a:	2105      	movs	r1, #5
 800104c:	0028      	movs	r0, r5
 800104e:	f7ff f9d3 	bl	80003f8 <__aeabi_idivmod>
 8001052:	00cb      	lsls	r3, r1, #3
 8001054:	aa08      	add	r2, sp, #32
 8001056:	4694      	mov	ip, r2
 8001058:	4463      	add	r3, ip
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	0fd0      	lsrs	r0, r2, #31
 800105e:	6859      	ldr	r1, [r3, #4]
 8001060:	004b      	lsls	r3, r1, #1
 8001062:	4318      	orrs	r0, r3
 8001064:	0fc9      	lsrs	r1, r1, #31
 8001066:	0052      	lsls	r2, r2, #1
 8001068:	4311      	orrs	r1, r2
 800106a:	4653      	mov	r3, sl
 800106c:	4059      	eors	r1, r3
 800106e:	4060      	eors	r0, r4
 8001070:	0034      	movs	r4, r6
 8001072:	34c8      	adds	r4, #200	; 0xc8
 8001074:	0033      	movs	r3, r6
                s[j + i] ^= t;
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	404a      	eors	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	4042      	eors	r2, r0
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	3328      	adds	r3, #40	; 0x28
            for(j = 0; j < 25; j += 5)
 8001084:	42a3      	cmp	r3, r4
 8001086:	d1f6      	bne.n	8001076 <keccakf+0x72>
 8001088:	e7d0      	b.n	800102c <keccakf+0x28>
 800108a:	464c      	mov	r4, r9
        t = s[1];
 800108c:	9b04      	ldr	r3, [sp, #16]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	68d9      	ldr	r1, [r3, #12]
 8001092:	2500      	movs	r5, #0
 8001094:	9406      	str	r4, [sp, #24]
 8001096:	4699      	mov	r9, r3
 8001098:	0010      	movs	r0, r2
 800109a:	e028      	b.n	80010ee <keccakf+0xea>
            s[j] = SHA3_ROTL64(t, keccakf_rotc[i]);
 800109c:	2220      	movs	r2, #32
 800109e:	59ec      	ldr	r4, [r5, r7]
 80010a0:	1b14      	subs	r4, r2, r4
 80010a2:	0002      	movs	r2, r0
 80010a4:	40e2      	lsrs	r2, r4
 80010a6:	000c      	movs	r4, r1
 80010a8:	59ee      	ldr	r6, [r5, r7]
 80010aa:	40b4      	lsls	r4, r6
 80010ac:	4314      	orrs	r4, r2
 80010ae:	e02d      	b.n	800110c <keccakf+0x108>
 80010b0:	59ea      	ldr	r2, [r5, r7]
 80010b2:	4252      	negs	r2, r2
 80010b4:	4646      	mov	r6, r8
 80010b6:	4032      	ands	r2, r6
 80010b8:	2620      	movs	r6, #32
 80010ba:	9203      	str	r2, [sp, #12]
 80010bc:	1ab6      	subs	r6, r6, r2
 80010be:	46b2      	mov	sl, r6
 80010c0:	000e      	movs	r6, r1
 80010c2:	4652      	mov	r2, sl
 80010c4:	4096      	lsls	r6, r2
 80010c6:	9a03      	ldr	r2, [sp, #12]
 80010c8:	40d0      	lsrs	r0, r2
 80010ca:	4330      	orrs	r0, r6
 80010cc:	6018      	str	r0, [r3, #0]
 80010ce:	59ea      	ldr	r2, [r5, r7]
 80010d0:	4252      	negs	r2, r2
 80010d2:	4640      	mov	r0, r8
 80010d4:	4002      	ands	r2, r0
 80010d6:	40d1      	lsrs	r1, r2
 80010d8:	4662      	mov	r2, ip
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	4302      	orrs	r2, r0
 80010de:	430c      	orrs	r4, r1
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605c      	str	r4, [r3, #4]
 80010e4:	3504      	adds	r5, #4
            t = bc[0];
 80010e6:	9801      	ldr	r0, [sp, #4]
 80010e8:	9902      	ldr	r1, [sp, #8]
        for(i = 0; i < 24; i++) {
 80010ea:	2d60      	cmp	r5, #96	; 0x60
 80010ec:	d01b      	beq.n	8001126 <keccakf+0x122>
            bc[0] = s[j];
 80010ee:	465b      	mov	r3, fp
 80010f0:	58eb      	ldr	r3, [r5, r3]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	444b      	add	r3, r9
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	9201      	str	r2, [sp, #4]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	9202      	str	r2, [sp, #8]
            s[j] = SHA3_ROTL64(t, keccakf_rotc[i]);
 80010fe:	59ea      	ldr	r2, [r5, r7]
 8001100:	2420      	movs	r4, #32
 8001102:	4264      	negs	r4, r4
 8001104:	1912      	adds	r2, r2, r4
 8001106:	d4c9      	bmi.n	800109c <keccakf+0x98>
 8001108:	0004      	movs	r4, r0
 800110a:	4094      	lsls	r4, r2
 800110c:	59ea      	ldr	r2, [r5, r7]
 800110e:	0006      	movs	r6, r0
 8001110:	4096      	lsls	r6, r2
 8001112:	46b4      	mov	ip, r6
 8001114:	4252      	negs	r2, r2
 8001116:	4646      	mov	r6, r8
 8001118:	4032      	ands	r2, r6
 800111a:	3a20      	subs	r2, #32
 800111c:	d4c8      	bmi.n	80010b0 <keccakf+0xac>
 800111e:	0008      	movs	r0, r1
 8001120:	40d0      	lsrs	r0, r2
 8001122:	6018      	str	r0, [r3, #0]
 8001124:	e7d3      	b.n	80010ce <keccakf+0xca>
 8001126:	9c06      	ldr	r4, [sp, #24]
 8001128:	9008      	str	r0, [sp, #32]
 800112a:	9109      	str	r1, [sp, #36]	; 0x24
 800112c:	9b04      	ldr	r3, [sp, #16]
 800112e:	33c8      	adds	r3, #200	; 0xc8
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	e003      	b.n	800113c <keccakf+0x138>
 8001134:	4654      	mov	r4, sl
        }

        /* Chi */
        for(j = 0; j < 25; j += 5) {
 8001136:	9b01      	ldr	r3, [sp, #4]
 8001138:	4553      	cmp	r3, sl
 800113a:	d033      	beq.n	80011a4 <keccakf+0x1a0>
 800113c:	2328      	movs	r3, #40	; 0x28
 800113e:	469a      	mov	sl, r3
 8001140:	44a2      	add	sl, r4
        t = s[1];
 8001142:	aa08      	add	r2, sp, #32
 8001144:	0023      	movs	r3, r4
 8001146:	4655      	mov	r5, sl
            for(i = 0; i < 5; i++)
                bc[i] = s[j + i];
 8001148:	cb03      	ldmia	r3!, {r0, r1}
 800114a:	c203      	stmia	r2!, {r0, r1}
            for(i = 0; i < 5; i++)
 800114c:	42ab      	cmp	r3, r5
 800114e:	d1fb      	bne.n	8001148 <keccakf+0x144>
 8001150:	46aa      	mov	sl, r5
 8001152:	2300      	movs	r3, #0
 8001154:	4699      	mov	r9, r3
            for(i = 0; i < 5; i++)
                s[j + i] ^= (~bc[(i + 1) % 5]) & bc[(i + 2) % 5];
 8001156:	2301      	movs	r3, #1
 8001158:	469c      	mov	ip, r3
 800115a:	44e1      	add	r9, ip
 800115c:	2105      	movs	r1, #5
 800115e:	4648      	mov	r0, r9
 8001160:	f7ff f94a 	bl	80003f8 <__aeabi_idivmod>
 8001164:	00c9      	lsls	r1, r1, #3
 8001166:	ab08      	add	r3, sp, #32
 8001168:	469c      	mov	ip, r3
 800116a:	4461      	add	r1, ip
 800116c:	680b      	ldr	r3, [r1, #0]
 800116e:	43de      	mvns	r6, r3
 8001170:	684d      	ldr	r5, [r1, #4]
 8001172:	43ed      	mvns	r5, r5
 8001174:	464b      	mov	r3, r9
 8001176:	1c58      	adds	r0, r3, #1
 8001178:	2105      	movs	r1, #5
 800117a:	f7ff f93d 	bl	80003f8 <__aeabi_idivmod>
 800117e:	00c9      	lsls	r1, r1, #3
 8001180:	ab08      	add	r3, sp, #32
 8001182:	469c      	mov	ip, r3
 8001184:	4461      	add	r1, ip
 8001186:	680b      	ldr	r3, [r1, #0]
 8001188:	401e      	ands	r6, r3
 800118a:	684b      	ldr	r3, [r1, #4]
 800118c:	401d      	ands	r5, r3
 800118e:	6823      	ldr	r3, [r4, #0]
 8001190:	405e      	eors	r6, r3
 8001192:	6026      	str	r6, [r4, #0]
 8001194:	6863      	ldr	r3, [r4, #4]
 8001196:	405d      	eors	r5, r3
 8001198:	6065      	str	r5, [r4, #4]
 800119a:	3408      	adds	r4, #8
            for(i = 0; i < 5; i++)
 800119c:	464b      	mov	r3, r9
 800119e:	2b05      	cmp	r3, #5
 80011a0:	d1d9      	bne.n	8001156 <keccakf+0x152>
 80011a2:	e7c7      	b.n	8001134 <keccakf+0x130>
        }

        /* Iota */
        s[0] ^= keccakf_rndc[round];
 80011a4:	9904      	ldr	r1, [sp, #16]
 80011a6:	680b      	ldr	r3, [r1, #0]
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	9a05      	ldr	r2, [sp, #20]
 80011ac:	6813      	ldr	r3, [r2, #0]
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	9b01      	ldr	r3, [sp, #4]
 80011b2:	9802      	ldr	r0, [sp, #8]
 80011b4:	4043      	eors	r3, r0
 80011b6:	600b      	str	r3, [r1, #0]
 80011b8:	684b      	ldr	r3, [r1, #4]
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	6853      	ldr	r3, [r2, #4]
 80011be:	9302      	str	r3, [sp, #8]
 80011c0:	9b01      	ldr	r3, [sp, #4]
 80011c2:	9802      	ldr	r0, [sp, #8]
 80011c4:	4043      	eors	r3, r0
 80011c6:	604b      	str	r3, [r1, #4]
 80011c8:	0013      	movs	r3, r2
 80011ca:	3308      	adds	r3, #8
 80011cc:	9305      	str	r3, [sp, #20]
    for(round = 0; round < KECCAK_ROUNDS; round++) {
 80011ce:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <keccakf+0x234>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d024      	beq.n	800121e <keccakf+0x21a>
 80011d4:	9a04      	ldr	r2, [sp, #16]
{
 80011d6:	a908      	add	r1, sp, #32
 80011d8:	4694      	mov	ip, r2
 80011da:	9d07      	ldr	r5, [sp, #28]
            bc[i] = s[i] ^ s[i + 5] ^ s[i + 10] ^ s[i + 15] ^ s[i + 20];
 80011dc:	6813      	ldr	r3, [r2, #0]
 80011de:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80011e0:	4043      	eors	r3, r0
 80011e2:	6850      	ldr	r0, [r2, #4]
 80011e4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80011e6:	4070      	eors	r0, r6
 80011e8:	6d16      	ldr	r6, [r2, #80]	; 0x50
 80011ea:	4073      	eors	r3, r6
 80011ec:	6d56      	ldr	r6, [r2, #84]	; 0x54
 80011ee:	4070      	eors	r0, r6
 80011f0:	6f96      	ldr	r6, [r2, #120]	; 0x78
 80011f2:	4073      	eors	r3, r6
 80011f4:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
 80011f6:	4070      	eors	r0, r6
 80011f8:	0016      	movs	r6, r2
 80011fa:	36a0      	adds	r6, #160	; 0xa0
 80011fc:	6834      	ldr	r4, [r6, #0]
 80011fe:	4063      	eors	r3, r4
 8001200:	600b      	str	r3, [r1, #0]
 8001202:	6873      	ldr	r3, [r6, #4]
 8001204:	4043      	eors	r3, r0
 8001206:	604b      	str	r3, [r1, #4]
 8001208:	3208      	adds	r2, #8
 800120a:	3108      	adds	r1, #8
        for(i = 0; i < 5; i++)
 800120c:	42aa      	cmp	r2, r5
 800120e:	d1e5      	bne.n	80011dc <keccakf+0x1d8>
 8001210:	9b04      	ldr	r3, [sp, #16]
 8001212:	469a      	mov	sl, r3
 8001214:	2300      	movs	r3, #0
 8001216:	001d      	movs	r5, r3
 8001218:	46e1      	mov	r9, ip
 800121a:	4656      	mov	r6, sl
 800121c:	e709      	b.n	8001032 <keccakf+0x2e>
    }
}
 800121e:	b013      	add	sp, #76	; 0x4c
 8001220:	bc3c      	pop	{r2, r3, r4, r5}
 8001222:	4690      	mov	r8, r2
 8001224:	4699      	mov	r9, r3
 8001226:	46a2      	mov	sl, r4
 8001228:	46ab      	mov	fp, r5
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	08004d10 	.word	0x08004d10
 8001230:	08004cb0 	.word	0x08004cb0
 8001234:	08004dd0 	.word	0x08004dd0
 8001238:	08004dd0 	.word	0x08004dd0

0800123c <sha3_Init256>:
/* *************************** Public Inteface ************************ */

/* For Init or Reset call these: */
void
sha3_Init256(void *priv)
{
 800123c:	b510      	push	{r4, lr}
 800123e:	0004      	movs	r4, r0
    sha3_context *ctx = (sha3_context *) priv;
    memset(ctx, 0, sizeof(*ctx));
 8001240:	22e0      	movs	r2, #224	; 0xe0
 8001242:	2100      	movs	r1, #0
 8001244:	f003 fcd1 	bl	8004bea <memset>
    ctx->capacityWords = 2 * 256 / (8 * sizeof(uint64_t));
 8001248:	2208      	movs	r2, #8
 800124a:	23d8      	movs	r3, #216	; 0xd8
 800124c:	50e2      	str	r2, [r4, r3]
}
 800124e:	bd10      	pop	{r4, pc}

08001250 <sha3_Update>:
    ctx->capacityWords = 2 * 512 / (8 * sizeof(uint64_t));
}

void
sha3_Update(void *priv, void const *bufIn, size_t len)
{
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	46de      	mov	lr, fp
 8001254:	4657      	mov	r7, sl
 8001256:	464e      	mov	r6, r9
 8001258:	4645      	mov	r5, r8
 800125a:	b5e0      	push	{r5, r6, r7, lr}
 800125c:	b083      	sub	sp, #12
 800125e:	0004      	movs	r4, r0
 8001260:	0016      	movs	r6, r2
    sha3_context *ctx = (sha3_context *) priv;

    /* 0...7 -- how much is needed to have a word */
    unsigned old_tail = (8 - ctx->byteIndex) & 7;
 8001262:	23d0      	movs	r3, #208	; 0xd0
 8001264:	58c3      	ldr	r3, [r0, r3]
 8001266:	425b      	negs	r3, r3
 8001268:	2507      	movs	r5, #7
 800126a:	401d      	ands	r5, r3
    SHA3_TRACE_BUF("called to update with:", buf, len);

    SHA3_ASSERT(ctx->byteIndex < 8);
    SHA3_ASSERT(ctx->wordIndex < sizeof(ctx->s) / sizeof(ctx->s[0]));

    if(len < old_tail) {        /* have no complete word or haven't started 
 800126c:	4295      	cmp	r5, r2
 800126e:	d925      	bls.n	80012bc <sha3_Update+0x6c>
                                 * the word yet */
        SHA3_TRACE("because %d<%d, store it and return", (unsigned)len,
                (unsigned)old_tail);
        /* endian-independent code follows: */
        while (len--)
 8001270:	2a00      	cmp	r2, #0
 8001272:	d100      	bne.n	8001276 <sha3_Update+0x26>
 8001274:	e0e2      	b.n	800143c <sha3_Update+0x1ec>
 8001276:	000a      	movs	r2, r1
 8001278:	198e      	adds	r6, r1, r6
            ctx->saved |= (uint64_t) (*(buf++)) << ((ctx->byteIndex++) * 8);
 800127a:	27d0      	movs	r7, #208	; 0xd0
 800127c:	2320      	movs	r3, #32
 800127e:	469c      	mov	ip, r3
 8001280:	e00f      	b.n	80012a2 <sha3_Update+0x52>
 8001282:	4660      	mov	r0, ip
 8001284:	1ac0      	subs	r0, r0, r3
 8001286:	000d      	movs	r5, r1
 8001288:	40c5      	lsrs	r5, r0
 800128a:	0028      	movs	r0, r5
 800128c:	4099      	lsls	r1, r3
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	4319      	orrs	r1, r3
 8001292:	6021      	str	r1, [r4, #0]
 8001294:	6863      	ldr	r3, [r4, #4]
 8001296:	4318      	orrs	r0, r3
 8001298:	6060      	str	r0, [r4, #4]
 800129a:	3201      	adds	r2, #1
        while (len--)
 800129c:	4296      	cmp	r6, r2
 800129e:	d100      	bne.n	80012a2 <sha3_Update+0x52>
 80012a0:	e0cc      	b.n	800143c <sha3_Update+0x1ec>
            ctx->saved |= (uint64_t) (*(buf++)) << ((ctx->byteIndex++) * 8);
 80012a2:	7811      	ldrb	r1, [r2, #0]
 80012a4:	59e3      	ldr	r3, [r4, r7]
 80012a6:	1c58      	adds	r0, r3, #1
 80012a8:	51e0      	str	r0, [r4, r7]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	2020      	movs	r0, #32
 80012ae:	4240      	negs	r0, r0
 80012b0:	1818      	adds	r0, r3, r0
 80012b2:	d4e6      	bmi.n	8001282 <sha3_Update+0x32>
 80012b4:	000d      	movs	r5, r1
 80012b6:	4085      	lsls	r5, r0
 80012b8:	0028      	movs	r0, r5
 80012ba:	e7e7      	b.n	800128c <sha3_Update+0x3c>
    const uint8_t *buf = bufIn;
 80012bc:	9100      	str	r1, [sp, #0]
        SHA3_ASSERT(ctx->byteIndex < 8);
        return;
    }

    if(old_tail) {              /* will have one word to process */
 80012be:	2d00      	cmp	r5, #0
 80012c0:	d041      	beq.n	8001346 <sha3_Update+0xf6>
        SHA3_TRACE("completing one word with %d bytes", (unsigned)old_tail);
        /* endian-independent code follows: */
        len -= old_tail;
 80012c2:	1b56      	subs	r6, r2, r5
 80012c4:	0008      	movs	r0, r1
 80012c6:	194b      	adds	r3, r1, r5
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	001f      	movs	r7, r3
        while (old_tail--)
            ctx->saved |= (uint64_t) (*(buf++)) << ((ctx->byteIndex++) * 8);
 80012cc:	21d0      	movs	r1, #208	; 0xd0
 80012ce:	2320      	movs	r3, #32
 80012d0:	469c      	mov	ip, r3
 80012d2:	46b0      	mov	r8, r6
 80012d4:	e00e      	b.n	80012f4 <sha3_Update+0xa4>
 80012d6:	4662      	mov	r2, ip
 80012d8:	1b52      	subs	r2, r2, r5
 80012da:	001e      	movs	r6, r3
 80012dc:	40d6      	lsrs	r6, r2
 80012de:	0032      	movs	r2, r6
 80012e0:	40ab      	lsls	r3, r5
 80012e2:	6825      	ldr	r5, [r4, #0]
 80012e4:	432b      	orrs	r3, r5
 80012e6:	6865      	ldr	r5, [r4, #4]
 80012e8:	432a      	orrs	r2, r5
 80012ea:	6023      	str	r3, [r4, #0]
 80012ec:	6062      	str	r2, [r4, #4]
 80012ee:	3001      	adds	r0, #1
        while (old_tail--)
 80012f0:	4287      	cmp	r7, r0
 80012f2:	d00c      	beq.n	800130e <sha3_Update+0xbe>
            ctx->saved |= (uint64_t) (*(buf++)) << ((ctx->byteIndex++) * 8);
 80012f4:	7803      	ldrb	r3, [r0, #0]
 80012f6:	5865      	ldr	r5, [r4, r1]
 80012f8:	1c6a      	adds	r2, r5, #1
 80012fa:	5062      	str	r2, [r4, r1]
 80012fc:	00ed      	lsls	r5, r5, #3
 80012fe:	2220      	movs	r2, #32
 8001300:	4252      	negs	r2, r2
 8001302:	18aa      	adds	r2, r5, r2
 8001304:	d4e7      	bmi.n	80012d6 <sha3_Update+0x86>
 8001306:	001e      	movs	r6, r3
 8001308:	4096      	lsls	r6, r2
 800130a:	0032      	movs	r2, r6
 800130c:	e7e8      	b.n	80012e0 <sha3_Update+0x90>
 800130e:	4646      	mov	r6, r8

        /* now ready to add saved to the sponge */
        ctx->s[ctx->wordIndex] ^= ctx->saved;
 8001310:	27d4      	movs	r7, #212	; 0xd4
 8001312:	59e0      	ldr	r0, [r4, r7]
 8001314:	00c1      	lsls	r1, r0, #3
 8001316:	1861      	adds	r1, r4, r1
 8001318:	688d      	ldr	r5, [r1, #8]
 800131a:	406b      	eors	r3, r5
 800131c:	608b      	str	r3, [r1, #8]
 800131e:	68cb      	ldr	r3, [r1, #12]
 8001320:	405a      	eors	r2, r3
 8001322:	60ca      	str	r2, [r1, #12]
        SHA3_ASSERT(ctx->byteIndex == 8);
        ctx->byteIndex = 0;
 8001324:	2200      	movs	r2, #0
 8001326:	23d0      	movs	r3, #208	; 0xd0
 8001328:	50e2      	str	r2, [r4, r3]
        ctx->saved = 0;
 800132a:	2200      	movs	r2, #0
 800132c:	2300      	movs	r3, #0
 800132e:	6022      	str	r2, [r4, #0]
 8001330:	6063      	str	r3, [r4, #4]
        if(++ctx->wordIndex ==
 8001332:	3001      	adds	r0, #1
 8001334:	51e0      	str	r0, [r4, r7]
                (SHA3_KECCAK_SPONGE_WORDS - ctx->capacityWords)) {
 8001336:	32d8      	adds	r2, #216	; 0xd8
 8001338:	58a1      	ldr	r1, [r4, r2]
 800133a:	3abf      	subs	r2, #191	; 0xbf
 800133c:	1a52      	subs	r2, r2, r1
            ctx->saved |= (uint64_t) (*(buf++)) << ((ctx->byteIndex++) * 8);
 800133e:	9b01      	ldr	r3, [sp, #4]
 8001340:	9300      	str	r3, [sp, #0]
        if(++ctx->wordIndex ==
 8001342:	4290      	cmp	r0, r2
 8001344:	d00d      	beq.n	8001362 <sha3_Update+0x112>

    /* now work in full words directly from input */

    SHA3_ASSERT(ctx->byteIndex == 0);

    words = len / sizeof(uint64_t);
 8001346:	08f3      	lsrs	r3, r6, #3
 8001348:	4699      	mov	r9, r3
 800134a:	2107      	movs	r1, #7
 800134c:	4031      	ands	r1, r6
 800134e:	4688      	mov	r8, r1
    tail = len - words * sizeof(uint64_t);

    SHA3_TRACE("have %d full words to process", (unsigned)words);

    for(i = 0; i < words; i++, buf += sizeof(uint64_t)) {
 8001350:	2b00      	cmp	r3, #0
 8001352:	d04c      	beq.n	80013ee <sha3_Update+0x19e>
 8001354:	9d00      	ldr	r5, [sp, #0]
 8001356:	2600      	movs	r6, #0
#if defined(__x86_64__ ) || defined(__i386__)
        SHA3_ASSERT(memcmp(&t, buf, 8) == 0);
#endif
        ctx->s[ctx->wordIndex] ^= t;
        if(++ctx->wordIndex ==
                (SHA3_KECCAK_SPONGE_WORDS - ctx->capacityWords)) {
 8001358:	23d8      	movs	r3, #216	; 0xd8
 800135a:	469b      	mov	fp, r3
 800135c:	3bbf      	subs	r3, #191	; 0xbf
 800135e:	469a      	mov	sl, r3
 8001360:	e00d      	b.n	800137e <sha3_Update+0x12e>
            keccakf(ctx->s);
 8001362:	0020      	movs	r0, r4
 8001364:	3008      	adds	r0, #8
 8001366:	f7ff fe4d 	bl	8001004 <keccakf>
            ctx->wordIndex = 0;
 800136a:	2200      	movs	r2, #0
 800136c:	23d4      	movs	r3, #212	; 0xd4
 800136e:	50e2      	str	r2, [r4, r3]
            ctx->saved |= (uint64_t) (*(buf++)) << ((ctx->byteIndex++) * 8);
 8001370:	9b01      	ldr	r3, [sp, #4]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	e7e7      	b.n	8001346 <sha3_Update+0xf6>
    for(i = 0; i < words; i++, buf += sizeof(uint64_t)) {
 8001376:	3601      	adds	r6, #1
 8001378:	3508      	adds	r5, #8
 800137a:	45b1      	cmp	r9, r6
 800137c:	d031      	beq.n	80013e2 <sha3_Update+0x192>
        ctx->s[ctx->wordIndex] ^= t;
 800137e:	23d4      	movs	r3, #212	; 0xd4
 8001380:	58e0      	ldr	r0, [r4, r3]
 8001382:	00c1      	lsls	r1, r0, #3
 8001384:	1861      	adds	r1, r4, r1
                ((uint64_t) (buf[1]) << 8 * 1) |
 8001386:	786b      	ldrb	r3, [r5, #1]
 8001388:	021a      	lsls	r2, r3, #8
                ((uint64_t) (buf[2]) << 8 * 2) |
 800138a:	78af      	ldrb	r7, [r5, #2]
 800138c:	0e1b      	lsrs	r3, r3, #24
 800138e:	043f      	lsls	r7, r7, #16
                ((uint64_t) (buf[1]) << 8 * 1) |
 8001390:	433a      	orrs	r2, r7
        const uint64_t t = (uint64_t) (buf[0]) |
 8001392:	782f      	ldrb	r7, [r5, #0]
                ((uint64_t) (buf[1]) << 8 * 1) |
 8001394:	433a      	orrs	r2, r7
                ((uint64_t) (buf[3]) << 8 * 3) |
 8001396:	78ef      	ldrb	r7, [r5, #3]
 8001398:	063f      	lsls	r7, r7, #24
                ((uint64_t) (buf[2]) << 8 * 2) |
 800139a:	433a      	orrs	r2, r7
 800139c:	425b      	negs	r3, r3
                ((uint64_t) (buf[4]) << 8 * 4) |
 800139e:	792f      	ldrb	r7, [r5, #4]
                ((uint64_t) (buf[3]) << 8 * 3) |
 80013a0:	433b      	orrs	r3, r7
                ((uint64_t) (buf[5]) << 8 * 5) |
 80013a2:	796f      	ldrb	r7, [r5, #5]
 80013a4:	023f      	lsls	r7, r7, #8
                ((uint64_t) (buf[4]) << 8 * 4) |
 80013a6:	433b      	orrs	r3, r7
                ((uint64_t) (buf[6]) << 8 * 6) |
 80013a8:	79af      	ldrb	r7, [r5, #6]
 80013aa:	043f      	lsls	r7, r7, #16
                ((uint64_t) (buf[5]) << 8 * 5) |
 80013ac:	433b      	orrs	r3, r7
                ((uint64_t) (buf[7]) << 8 * 7);
 80013ae:	79ef      	ldrb	r7, [r5, #7]
 80013b0:	063f      	lsls	r7, r7, #24
        const uint64_t t = (uint64_t) (buf[0]) |
 80013b2:	433b      	orrs	r3, r7
        ctx->s[ctx->wordIndex] ^= t;
 80013b4:	688f      	ldr	r7, [r1, #8]
 80013b6:	407a      	eors	r2, r7
 80013b8:	608a      	str	r2, [r1, #8]
 80013ba:	68ca      	ldr	r2, [r1, #12]
 80013bc:	4053      	eors	r3, r2
 80013be:	60cb      	str	r3, [r1, #12]
        if(++ctx->wordIndex ==
 80013c0:	3001      	adds	r0, #1
 80013c2:	23d4      	movs	r3, #212	; 0xd4
 80013c4:	50e0      	str	r0, [r4, r3]
                (SHA3_KECCAK_SPONGE_WORDS - ctx->capacityWords)) {
 80013c6:	465b      	mov	r3, fp
 80013c8:	4652      	mov	r2, sl
 80013ca:	58e3      	ldr	r3, [r4, r3]
 80013cc:	1ad2      	subs	r2, r2, r3
        if(++ctx->wordIndex ==
 80013ce:	4290      	cmp	r0, r2
 80013d0:	d1d1      	bne.n	8001376 <sha3_Update+0x126>
            keccakf(ctx->s);
 80013d2:	0020      	movs	r0, r4
 80013d4:	3008      	adds	r0, #8
 80013d6:	f7ff fe15 	bl	8001004 <keccakf>
            ctx->wordIndex = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	22d4      	movs	r2, #212	; 0xd4
 80013de:	50a3      	str	r3, [r4, r2]
 80013e0:	e7c9      	b.n	8001376 <sha3_Update+0x126>
 80013e2:	00f6      	lsls	r6, r6, #3
 80013e4:	9b00      	ldr	r3, [sp, #0]
 80013e6:	469c      	mov	ip, r3
 80013e8:	44b4      	add	ip, r6
 80013ea:	4663      	mov	r3, ip
 80013ec:	9300      	str	r3, [sp, #0]

    SHA3_TRACE("have %d bytes left to process, save them", (unsigned)tail);

    /* finally, save the partial word */
    SHA3_ASSERT(ctx->byteIndex == 0 && tail < 8);
    while (tail--) {
 80013ee:	4643      	mov	r3, r8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d023      	beq.n	800143c <sha3_Update+0x1ec>
 80013f4:	9b00      	ldr	r3, [sp, #0]
 80013f6:	001d      	movs	r5, r3
 80013f8:	4443      	add	r3, r8
 80013fa:	0019      	movs	r1, r3
        SHA3_TRACE("Store byte %02x '%c'", *buf, *buf);
        ctx->saved |= (uint64_t) (*(buf++)) << ((ctx->byteIndex++) * 8);
 80013fc:	26d0      	movs	r6, #208	; 0xd0
 80013fe:	2320      	movs	r3, #32
 8001400:	469c      	mov	ip, r3
 8001402:	e00e      	b.n	8001422 <sha3_Update+0x1d2>
 8001404:	4660      	mov	r0, ip
 8001406:	1ac0      	subs	r0, r0, r3
 8001408:	0017      	movs	r7, r2
 800140a:	40c7      	lsrs	r7, r0
 800140c:	0038      	movs	r0, r7
 800140e:	409a      	lsls	r2, r3
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	431a      	orrs	r2, r3
 8001414:	6022      	str	r2, [r4, #0]
 8001416:	6863      	ldr	r3, [r4, #4]
 8001418:	4318      	orrs	r0, r3
 800141a:	6060      	str	r0, [r4, #4]
 800141c:	3501      	adds	r5, #1
    while (tail--) {
 800141e:	428d      	cmp	r5, r1
 8001420:	d00c      	beq.n	800143c <sha3_Update+0x1ec>
        ctx->saved |= (uint64_t) (*(buf++)) << ((ctx->byteIndex++) * 8);
 8001422:	782a      	ldrb	r2, [r5, #0]
 8001424:	59a3      	ldr	r3, [r4, r6]
 8001426:	1c58      	adds	r0, r3, #1
 8001428:	51a0      	str	r0, [r4, r6]
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	2020      	movs	r0, #32
 800142e:	4240      	negs	r0, r0
 8001430:	1818      	adds	r0, r3, r0
 8001432:	d4e7      	bmi.n	8001404 <sha3_Update+0x1b4>
 8001434:	0017      	movs	r7, r2
 8001436:	4087      	lsls	r7, r0
 8001438:	0038      	movs	r0, r7
 800143a:	e7e8      	b.n	800140e <sha3_Update+0x1be>
    }
    SHA3_ASSERT(ctx->byteIndex < 8);
    SHA3_TRACE("Have saved=0x%016" PRIx64 " at the end", ctx->saved);
}
 800143c:	b003      	add	sp, #12
 800143e:	bc3c      	pop	{r2, r3, r4, r5}
 8001440:	4690      	mov	r8, r2
 8001442:	4699      	mov	r9, r3
 8001444:	46a2      	mov	sl, r4
 8001446:	46ab      	mov	fp, r5
 8001448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800144a <sha3_Finalize>:
 * The padding block is 0x01 || 0x00* || 0x80. First 0x01 and last 0x80 
 * bytes are always present, but they can be the same byte.
 */
void const *
sha3_Finalize(void *priv)
{
 800144a:	b570      	push	{r4, r5, r6, lr}
 800144c:	0005      	movs	r5, r0
    ctx->s[ctx->wordIndex] ^=
            (ctx->saved ^ ((uint64_t) ((uint64_t) (0x02 | (1 << 2)) <<
                            ((ctx->byteIndex) * 8))));
#else
    /* For testing the "pure" Keccak version */
    ctx->s[ctx->wordIndex] ^=
 800144e:	23d4      	movs	r3, #212	; 0xd4
 8001450:	58c3      	ldr	r3, [r0, r3]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	18c3      	adds	r3, r0, r3
 8001456:	689c      	ldr	r4, [r3, #8]
 8001458:	6802      	ldr	r2, [r0, #0]
 800145a:	4054      	eors	r4, r2
 800145c:	68d8      	ldr	r0, [r3, #12]
 800145e:	686a      	ldr	r2, [r5, #4]
 8001460:	4050      	eors	r0, r2
            (ctx->saved ^ ((uint64_t) ((uint64_t) 1 << (ctx->byteIndex *
 8001462:	22d0      	movs	r2, #208	; 0xd0
 8001464:	58aa      	ldr	r2, [r5, r2]
 8001466:	00d2      	lsls	r2, r2, #3
 8001468:	2120      	movs	r1, #32
 800146a:	4249      	negs	r1, r1
 800146c:	1851      	adds	r1, r2, r1
 800146e:	d430      	bmi.n	80014d2 <sha3_Finalize+0x88>
 8001470:	2601      	movs	r6, #1
 8001472:	408e      	lsls	r6, r1
 8001474:	2101      	movs	r1, #1
 8001476:	4091      	lsls	r1, r2
 8001478:	000a      	movs	r2, r1
    ctx->s[ctx->wordIndex] ^=
 800147a:	4062      	eors	r2, r4
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	4070      	eors	r0, r6
 8001480:	60d8      	str	r0, [r3, #12]
                                    8))));
#endif

    ctx->s[SHA3_KECCAK_SPONGE_WORDS - ctx->capacityWords - 1] ^=
 8001482:	23d8      	movs	r3, #216	; 0xd8
 8001484:	58ea      	ldr	r2, [r5, r3]
 8001486:	3bc0      	subs	r3, #192	; 0xc0
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	18eb      	adds	r3, r5, r3
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0609      	lsls	r1, r1, #24
 8001494:	468c      	mov	ip, r1
 8001496:	4462      	add	r2, ip
 8001498:	60da      	str	r2, [r3, #12]
            SHA3_CONST(0x8000000000000000UL);
    keccakf(ctx->s);
 800149a:	002c      	movs	r4, r5
 800149c:	3408      	adds	r4, #8
 800149e:	0020      	movs	r0, r4
 80014a0:	f7ff fdb0 	bl	8001004 <keccakf>
 80014a4:	0023      	movs	r3, r4
 80014a6:	35d0      	adds	r5, #208	; 0xd0
     *    ... the conversion below ...
     * #endif */
    {
        unsigned i;
        for(i = 0; i < SHA3_KECCAK_SPONGE_WORDS; i++) {
            const unsigned t1 = (uint32_t) ctx->s[i];
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
            const unsigned t2 = (uint32_t) ((ctx->s[i] >> 16) >> 16);
            ctx->sb[i * 8 + 0] = (uint8_t) (t1);
 80014ac:	7019      	strb	r1, [r3, #0]
            ctx->sb[i * 8 + 1] = (uint8_t) (t1 >> 8);
 80014ae:	0a08      	lsrs	r0, r1, #8
 80014b0:	7058      	strb	r0, [r3, #1]
            ctx->sb[i * 8 + 2] = (uint8_t) (t1 >> 16);
 80014b2:	0c08      	lsrs	r0, r1, #16
 80014b4:	7098      	strb	r0, [r3, #2]
            ctx->sb[i * 8 + 3] = (uint8_t) (t1 >> 24);
 80014b6:	0e09      	lsrs	r1, r1, #24
 80014b8:	70d9      	strb	r1, [r3, #3]
            ctx->sb[i * 8 + 4] = (uint8_t) (t2);
 80014ba:	711a      	strb	r2, [r3, #4]
            ctx->sb[i * 8 + 5] = (uint8_t) (t2 >> 8);
 80014bc:	0a11      	lsrs	r1, r2, #8
 80014be:	7159      	strb	r1, [r3, #5]
            ctx->sb[i * 8 + 6] = (uint8_t) (t2 >> 16);
 80014c0:	0c11      	lsrs	r1, r2, #16
 80014c2:	7199      	strb	r1, [r3, #6]
            ctx->sb[i * 8 + 7] = (uint8_t) (t2 >> 24);
 80014c4:	0e12      	lsrs	r2, r2, #24
 80014c6:	71da      	strb	r2, [r3, #7]
 80014c8:	3308      	adds	r3, #8
        for(i = 0; i < SHA3_KECCAK_SPONGE_WORDS; i++) {
 80014ca:	42ab      	cmp	r3, r5
 80014cc:	d1ec      	bne.n	80014a8 <sha3_Finalize+0x5e>
    }

    SHA3_TRACE_BUF("Hash: (first 32 bytes)", ctx->sb, 256 / 8);

    return (ctx->sb);
}
 80014ce:	0020      	movs	r0, r4
 80014d0:	bd70      	pop	{r4, r5, r6, pc}
            (ctx->saved ^ ((uint64_t) ((uint64_t) 1 << (ctx->byteIndex *
 80014d2:	2120      	movs	r1, #32
 80014d4:	1a89      	subs	r1, r1, r2
 80014d6:	2601      	movs	r6, #1
 80014d8:	40ce      	lsrs	r6, r1
 80014da:	e7cb      	b.n	8001474 <sha3_Finalize+0x2a>

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b510      	push	{r4, lr}
 80014de:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_InitTick+0x2c>)
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	21fa      	movs	r1, #250	; 0xfa
 80014e6:	0089      	lsls	r1, r1, #2
 80014e8:	f7fe fe16 	bl	8000118 <__udivsi3>
 80014ec:	f000 f864 	bl	80015b8 <HAL_SYSTICK_Config>
  {
    status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x1e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
  }

  /* Return function status */
  return status;
}
 80014f6:	0018      	movs	r0, r3
 80014f8:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	0021      	movs	r1, r4
 80014fe:	3801      	subs	r0, #1
 8001500:	f000 f826 	bl	8001550 <HAL_NVIC_SetPriority>
  HAL_StatusTypeDef  status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	e7f6      	b.n	80014f6 <HAL_InitTick+0x1a>
 8001508:	20000000 	.word	0x20000000

0800150c <HAL_Init>:
{
 800150c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_Init+0x24>)
 8001510:	6813      	ldr	r3, [r2, #0]
 8001512:	2140      	movs	r1, #64	; 0x40
 8001514:	430b      	orrs	r3, r1
 8001516:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001518:	2003      	movs	r0, #3
 800151a:	f7ff ffdf 	bl	80014dc <HAL_InitTick>
 800151e:	1e04      	subs	r4, r0, #0
 8001520:	d002      	beq.n	8001528 <HAL_Init+0x1c>
    status = HAL_ERROR;
 8001522:	2401      	movs	r4, #1
}
 8001524:	0020      	movs	r0, r4
 8001526:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8001528:	f7ff fbdc 	bl	8000ce4 <HAL_MspInit>
 800152c:	e7fa      	b.n	8001524 <HAL_Init+0x18>
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	40022000 	.word	0x40022000

08001534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001534:	4a02      	ldr	r2, [pc, #8]	; (8001540 <HAL_IncTick+0xc>)
 8001536:	6813      	ldr	r3, [r2, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	4770      	bx	lr
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	200012a4 	.word	0x200012a4

08001544 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001544:	4b01      	ldr	r3, [pc, #4]	; (800154c <HAL_GetTick+0x8>)
 8001546:	6818      	ldr	r0, [r3, #0]
}
 8001548:	4770      	bx	lr
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	200012a4 	.word	0x200012a4

08001550 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001550:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001552:	2800      	cmp	r0, #0
 8001554:	db14      	blt.n	8001580 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001556:	0883      	lsrs	r3, r0, #2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <HAL_NVIC_SetPriority+0x60>)
 800155c:	4694      	mov	ip, r2
 800155e:	4463      	add	r3, ip
 8001560:	26c0      	movs	r6, #192	; 0xc0
 8001562:	00b6      	lsls	r6, r6, #2
 8001564:	599d      	ldr	r5, [r3, r6]
 8001566:	2403      	movs	r4, #3
 8001568:	4020      	ands	r0, r4
 800156a:	00c0      	lsls	r0, r0, #3
 800156c:	22ff      	movs	r2, #255	; 0xff
 800156e:	0014      	movs	r4, r2
 8001570:	4084      	lsls	r4, r0
 8001572:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001574:	0189      	lsls	r1, r1, #6
 8001576:	400a      	ands	r2, r1
 8001578:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800157a:	432a      	orrs	r2, r5
 800157c:	519a      	str	r2, [r3, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800157e:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001580:	b2c0      	uxtb	r0, r0
 8001582:	230f      	movs	r3, #15
 8001584:	4003      	ands	r3, r0
 8001586:	3b08      	subs	r3, #8
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <HAL_NVIC_SetPriority+0x64>)
 800158e:	4694      	mov	ip, r2
 8001590:	4463      	add	r3, ip
 8001592:	69dd      	ldr	r5, [r3, #28]
 8001594:	2203      	movs	r2, #3
 8001596:	4010      	ands	r0, r2
 8001598:	00c0      	lsls	r0, r0, #3
 800159a:	24ff      	movs	r4, #255	; 0xff
 800159c:	0022      	movs	r2, r4
 800159e:	4082      	lsls	r2, r0
 80015a0:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015a2:	0189      	lsls	r1, r1, #6
 80015a4:	400c      	ands	r4, r1
 80015a6:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a8:	432c      	orrs	r4, r5
 80015aa:	61dc      	str	r4, [r3, #28]
 80015ac:	e7e7      	b.n	800157e <HAL_NVIC_SetPriority+0x2e>
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b8:	1e43      	subs	r3, r0, #1
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_SYSTICK_Config+0x2c>)
  {
    return (1UL);                                                   /* Reload value impossible */
 80015bc:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d80e      	bhi.n	80015e0 <HAL_SYSTICK_Config+0x28>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_SYSTICK_Config+0x30>)
 80015c4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c6:	4809      	ldr	r0, [pc, #36]	; (80015ec <HAL_SYSTICK_Config+0x34>)
 80015c8:	6a03      	ldr	r3, [r0, #32]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	21c0      	movs	r1, #192	; 0xc0
 80015d0:	0609      	lsls	r1, r1, #24
 80015d2:	430b      	orrs	r3, r1
 80015d4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d6:	2300      	movs	r3, #0
 80015d8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015da:	3307      	adds	r3, #7
 80015dc:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015de:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015e0:	4770      	bx	lr
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	00ffffff 	.word	0x00ffffff
 80015e8:	e000e010 	.word	0xe000e010
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f2:	46de      	mov	lr, fp
 80015f4:	4657      	mov	r7, sl
 80015f6:	464e      	mov	r6, r9
 80015f8:	4645      	mov	r5, r8
 80015fa:	b5e0      	push	{r5, r6, r7, lr}
 80015fc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80015fe:	680b      	ldr	r3, [r1, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d100      	bne.n	8001606 <HAL_GPIO_Init+0x16>
 8001604:	e0be      	b.n	8001784 <HAL_GPIO_Init+0x194>
 8001606:	2400      	movs	r4, #0
 8001608:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800160a:	2501      	movs	r5, #1
 800160c:	46a8      	mov	r8, r5
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800160e:	350f      	adds	r5, #15
 8001610:	46aa      	mov	sl, r5
        GPIOx->OTYPER = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001612:	3d0d      	subs	r5, #13
 8001614:	46a9      	mov	r9, r5
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001616:	4d5f      	ldr	r5, [pc, #380]	; (8001794 <HAL_GPIO_Init+0x1a4>)
 8001618:	1945      	adds	r5, r0, r5
 800161a:	1e6e      	subs	r6, r5, #1
 800161c:	41b5      	sbcs	r5, r6
 800161e:	3505      	adds	r5, #5
 8001620:	9503      	str	r5, [sp, #12]
 8001622:	e046      	b.n	80016b2 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->AFR[position >> 3U];
 8001624:	08d5      	lsrs	r5, r2, #3
 8001626:	00ad      	lsls	r5, r5, #2
 8001628:	1943      	adds	r3, r0, r5
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	469c      	mov	ip, r3
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001630:	2707      	movs	r7, #7
 8001632:	4017      	ands	r7, r2
 8001634:	00bf      	lsls	r7, r7, #2
 8001636:	230f      	movs	r3, #15
 8001638:	40bb      	lsls	r3, r7
 800163a:	469b      	mov	fp, r3
 800163c:	4663      	mov	r3, ip
 800163e:	465d      	mov	r5, fp
 8001640:	43ab      	bics	r3, r5
 8001642:	469c      	mov	ip, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001644:	690b      	ldr	r3, [r1, #16]
 8001646:	40bb      	lsls	r3, r7
 8001648:	001f      	movs	r7, r3
 800164a:	4663      	mov	r3, ip
 800164c:	431f      	orrs	r7, r3
        GPIOx->AFR[position >> 3U] = temp;
 800164e:	9b02      	ldr	r3, [sp, #8]
 8001650:	621f      	str	r7, [r3, #32]
 8001652:	e038      	b.n	80016c6 <HAL_GPIO_Init+0xd6>
        temp = GPIOx->OSPEEDR;
 8001654:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001656:	464f      	mov	r7, r9
 8001658:	40a7      	lsls	r7, r4
 800165a:	43bd      	bics	r5, r7
 800165c:	002f      	movs	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800165e:	68cd      	ldr	r5, [r1, #12]
 8001660:	40a5      	lsls	r5, r4
 8001662:	433d      	orrs	r5, r7
        GPIOx->OSPEEDR = temp;
 8001664:	6085      	str	r5, [r0, #8]
        temp= GPIOx->OTYPER;
 8001666:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001668:	43b5      	bics	r5, r6
 800166a:	002e      	movs	r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800166c:	684b      	ldr	r3, [r1, #4]
 800166e:	091d      	lsrs	r5, r3, #4
 8001670:	4643      	mov	r3, r8
 8001672:	401d      	ands	r5, r3
 8001674:	4095      	lsls	r5, r2
 8001676:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001678:	6045      	str	r5, [r0, #4]
 800167a:	e02a      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800167c:	2600      	movs	r6, #0
 800167e:	e05e      	b.n	800173e <HAL_GPIO_Init+0x14e>
 8001680:	4646      	mov	r6, r8
 8001682:	e05c      	b.n	800173e <HAL_GPIO_Init+0x14e>
 8001684:	2602      	movs	r6, #2
 8001686:	e05a      	b.n	800173e <HAL_GPIO_Init+0x14e>
 8001688:	464e      	mov	r6, r9
 800168a:	e058      	b.n	800173e <HAL_GPIO_Init+0x14e>
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800168c:	9b01      	ldr	r3, [sp, #4]
 800168e:	431d      	orrs	r5, r3
 8001690:	e061      	b.n	8001756 <HAL_GPIO_Init+0x166>

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001692:	9b01      	ldr	r3, [sp, #4]
 8001694:	431d      	orrs	r5, r3
 8001696:	e065      	b.n	8001764 <HAL_GPIO_Init+0x174>
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001698:	9b01      	ldr	r3, [sp, #4]
 800169a:	431d      	orrs	r5, r3
 800169c:	e069      	b.n	8001772 <HAL_GPIO_Init+0x182>

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800169e:	9b01      	ldr	r3, [sp, #4]
 80016a0:	432b      	orrs	r3, r5
        }
        EXTI->FTSR = temp;
 80016a2:	4d3d      	ldr	r5, [pc, #244]	; (8001798 <HAL_GPIO_Init+0x1a8>)
 80016a4:	60eb      	str	r3, [r5, #12]
      }
    }
    position++;
 80016a6:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80016a8:	680b      	ldr	r3, [r1, #0]
 80016aa:	3402      	adds	r4, #2
 80016ac:	001d      	movs	r5, r3
 80016ae:	40d5      	lsrs	r5, r2
 80016b0:	d068      	beq.n	8001784 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80016b2:	4646      	mov	r6, r8
 80016b4:	4096      	lsls	r6, r2
 80016b6:	4033      	ands	r3, r6
 80016b8:	9301      	str	r3, [sp, #4]
    if(iocurrent)
 80016ba:	d0f4      	beq.n	80016a6 <HAL_GPIO_Init+0xb6>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80016bc:	684d      	ldr	r5, [r1, #4]
 80016be:	4657      	mov	r7, sl
 80016c0:	43bd      	bics	r5, r7
 80016c2:	2d02      	cmp	r5, #2
 80016c4:	d0ae      	beq.n	8001624 <HAL_GPIO_Init+0x34>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016c6:	684d      	ldr	r5, [r1, #4]
 80016c8:	4657      	mov	r7, sl
 80016ca:	43bd      	bics	r5, r7
 80016cc:	3d01      	subs	r5, #1
 80016ce:	2d01      	cmp	r5, #1
 80016d0:	d9c0      	bls.n	8001654 <HAL_GPIO_Init+0x64>
      temp = GPIOx->MODER;
 80016d2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016d4:	464e      	mov	r6, r9
 80016d6:	40a6      	lsls	r6, r4
 80016d8:	43f6      	mvns	r6, r6
 80016da:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016dc:	684d      	ldr	r5, [r1, #4]
 80016de:	464b      	mov	r3, r9
 80016e0:	401d      	ands	r5, r3
 80016e2:	40a5      	lsls	r5, r4
 80016e4:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 80016e6:	6005      	str	r5, [r0, #0]
      temp = GPIOx->PUPDR;
 80016e8:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016ea:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80016ec:	688d      	ldr	r5, [r1, #8]
 80016ee:	40a5      	lsls	r5, r4
 80016f0:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80016f2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80016f4:	684b      	ldr	r3, [r1, #4]
 80016f6:	2580      	movs	r5, #128	; 0x80
 80016f8:	056d      	lsls	r5, r5, #21
 80016fa:	422b      	tst	r3, r5
 80016fc:	d0d3      	beq.n	80016a6 <HAL_GPIO_Init+0xb6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	4e27      	ldr	r6, [pc, #156]	; (800179c <HAL_GPIO_Init+0x1ac>)
 8001700:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8001702:	4643      	mov	r3, r8
 8001704:	431d      	orrs	r5, r3
 8001706:	6375      	str	r5, [r6, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8001708:	0895      	lsrs	r5, r2, #2
 800170a:	00ad      	lsls	r5, r5, #2
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_GPIO_Init+0x1b0>)
 800170e:	469c      	mov	ip, r3
 8001710:	4465      	add	r5, ip
 8001712:	68ab      	ldr	r3, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001714:	464f      	mov	r7, r9
 8001716:	4017      	ands	r7, r2
 8001718:	00bf      	lsls	r7, r7, #2
 800171a:	260f      	movs	r6, #15
 800171c:	40be      	lsls	r6, r7
 800171e:	43b3      	bics	r3, r6
 8001720:	469c      	mov	ip, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001722:	26a0      	movs	r6, #160	; 0xa0
 8001724:	05f6      	lsls	r6, r6, #23
 8001726:	42b0      	cmp	r0, r6
 8001728:	d0a8      	beq.n	800167c <HAL_GPIO_Init+0x8c>
 800172a:	4e1e      	ldr	r6, [pc, #120]	; (80017a4 <HAL_GPIO_Init+0x1b4>)
 800172c:	42b0      	cmp	r0, r6
 800172e:	d0a7      	beq.n	8001680 <HAL_GPIO_Init+0x90>
 8001730:	4e1d      	ldr	r6, [pc, #116]	; (80017a8 <HAL_GPIO_Init+0x1b8>)
 8001732:	42b0      	cmp	r0, r6
 8001734:	d0a6      	beq.n	8001684 <HAL_GPIO_Init+0x94>
 8001736:	4e1d      	ldr	r6, [pc, #116]	; (80017ac <HAL_GPIO_Init+0x1bc>)
 8001738:	42b0      	cmp	r0, r6
 800173a:	d0a5      	beq.n	8001688 <HAL_GPIO_Init+0x98>
 800173c:	9e03      	ldr	r6, [sp, #12]
 800173e:	40be      	lsls	r6, r7
 8001740:	4663      	mov	r3, ip
 8001742:	431e      	orrs	r6, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001744:	60ae      	str	r6, [r5, #8]
        temp = EXTI->IMR;
 8001746:	4d14      	ldr	r5, [pc, #80]	; (8001798 <HAL_GPIO_Init+0x1a8>)
 8001748:	682d      	ldr	r5, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
 800174a:	9b01      	ldr	r3, [sp, #4]
 800174c:	43de      	mvns	r6, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800174e:	684b      	ldr	r3, [r1, #4]
 8001750:	03db      	lsls	r3, r3, #15
 8001752:	d49b      	bmi.n	800168c <HAL_GPIO_Init+0x9c>
        temp &= ~((uint32_t)iocurrent);
 8001754:	4035      	ands	r5, r6
        EXTI->IMR = temp;
 8001756:	4f10      	ldr	r7, [pc, #64]	; (8001798 <HAL_GPIO_Init+0x1a8>)
 8001758:	603d      	str	r5, [r7, #0]
        temp = EXTI->EMR;
 800175a:	687d      	ldr	r5, [r7, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800175c:	684b      	ldr	r3, [r1, #4]
 800175e:	039b      	lsls	r3, r3, #14
 8001760:	d497      	bmi.n	8001692 <HAL_GPIO_Init+0xa2>
        temp &= ~((uint32_t)iocurrent);
 8001762:	4035      	ands	r5, r6
        EXTI->EMR = temp;
 8001764:	4f0c      	ldr	r7, [pc, #48]	; (8001798 <HAL_GPIO_Init+0x1a8>)
 8001766:	607d      	str	r5, [r7, #4]
        temp = EXTI->RTSR;
 8001768:	68bd      	ldr	r5, [r7, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800176a:	684b      	ldr	r3, [r1, #4]
 800176c:	02db      	lsls	r3, r3, #11
 800176e:	d493      	bmi.n	8001698 <HAL_GPIO_Init+0xa8>
        temp &= ~((uint32_t)iocurrent);
 8001770:	4035      	ands	r5, r6
        EXTI->RTSR = temp;
 8001772:	4f09      	ldr	r7, [pc, #36]	; (8001798 <HAL_GPIO_Init+0x1a8>)
 8001774:	60bd      	str	r5, [r7, #8]
        temp = EXTI->FTSR;
 8001776:	68fd      	ldr	r5, [r7, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001778:	684b      	ldr	r3, [r1, #4]
 800177a:	029b      	lsls	r3, r3, #10
 800177c:	d48f      	bmi.n	800169e <HAL_GPIO_Init+0xae>
        temp &= ~((uint32_t)iocurrent);
 800177e:	002b      	movs	r3, r5
 8001780:	4033      	ands	r3, r6
 8001782:	e78e      	b.n	80016a2 <HAL_GPIO_Init+0xb2>
  }
}
 8001784:	b005      	add	sp, #20
 8001786:	bc3c      	pop	{r2, r3, r4, r5}
 8001788:	4690      	mov	r8, r2
 800178a:	4699      	mov	r9, r3
 800178c:	46a2      	mov	sl, r4
 800178e:	46ab      	mov	fp, r5
 8001790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	afffe400 	.word	0xafffe400
 8001798:	40010400 	.word	0x40010400
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000
 80017a4:	50000400 	.word	0x50000400
 80017a8:	50000800 	.word	0x50000800
 80017ac:	50000c00 	.word	0x50000c00

080017b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017b0:	6900      	ldr	r0, [r0, #16]
 80017b2:	4008      	ands	r0, r1
 80017b4:	1e41      	subs	r1, r0, #1
 80017b6:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80017b8:	b2c0      	uxtb	r0, r0
}
 80017ba:	4770      	bx	lr

080017bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80017bc:	2a00      	cmp	r2, #0
 80017be:	d101      	bne.n	80017c4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 80017c0:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80017c2:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80017c4:	6181      	str	r1, [r0, #24]
 80017c6:	e7fc      	b.n	80017c2 <HAL_GPIO_WritePin+0x6>

080017c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c8:	b510      	push	{r4, lr}
 80017ca:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017cc:	d059      	beq.n	8001882 <HAL_I2C_Init+0xba>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017ce:	2341      	movs	r3, #65	; 0x41
 80017d0:	5cc3      	ldrb	r3, [r0, r3]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d043      	beq.n	800185e <HAL_I2C_Init+0x96>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d6:	2224      	movs	r2, #36	; 0x24
 80017d8:	2341      	movs	r3, #65	; 0x41
 80017da:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017dc:	6822      	ldr	r2, [r4, #0]
 80017de:	6813      	ldr	r3, [r2, #0]
 80017e0:	2101      	movs	r1, #1
 80017e2:	438b      	bics	r3, r1
 80017e4:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017e6:	6822      	ldr	r2, [r4, #0]
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <HAL_I2C_Init+0xc0>)
 80017ea:	6861      	ldr	r1, [r4, #4]
 80017ec:	400b      	ands	r3, r1
 80017ee:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017f0:	6822      	ldr	r2, [r4, #0]
 80017f2:	6893      	ldr	r3, [r2, #8]
 80017f4:	4925      	ldr	r1, [pc, #148]	; (800188c <HAL_I2C_Init+0xc4>)
 80017f6:	400b      	ands	r3, r1
 80017f8:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017fa:	68e3      	ldr	r3, [r4, #12]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d034      	beq.n	800186a <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001800:	6822      	ldr	r2, [r4, #0]
 8001802:	2384      	movs	r3, #132	; 0x84
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	68a1      	ldr	r1, [r4, #8]
 8001808:	430b      	orrs	r3, r1
 800180a:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800180c:	68e3      	ldr	r3, [r4, #12]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d032      	beq.n	8001878 <HAL_I2C_Init+0xb0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001812:	6822      	ldr	r2, [r4, #0]
 8001814:	6851      	ldr	r1, [r2, #4]
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <HAL_I2C_Init+0xc8>)
 8001818:	430b      	orrs	r3, r1
 800181a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800181c:	6822      	ldr	r2, [r4, #0]
 800181e:	68d3      	ldr	r3, [r2, #12]
 8001820:	491a      	ldr	r1, [pc, #104]	; (800188c <HAL_I2C_Init+0xc4>)
 8001822:	400b      	ands	r3, r1
 8001824:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001826:	6821      	ldr	r1, [r4, #0]
 8001828:	6923      	ldr	r3, [r4, #16]
 800182a:	6962      	ldr	r2, [r4, #20]
 800182c:	4313      	orrs	r3, r2
 800182e:	69a2      	ldr	r2, [r4, #24]
 8001830:	0212      	lsls	r2, r2, #8
 8001832:	4313      	orrs	r3, r2
 8001834:	60cb      	str	r3, [r1, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	69e3      	ldr	r3, [r4, #28]
 800183a:	6a21      	ldr	r1, [r4, #32]
 800183c:	430b      	orrs	r3, r1
 800183e:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001840:	6822      	ldr	r2, [r4, #0]
 8001842:	6813      	ldr	r3, [r2, #0]
 8001844:	2101      	movs	r1, #1
 8001846:	430b      	orrs	r3, r1
 8001848:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800184a:	2300      	movs	r3, #0
 800184c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800184e:	311f      	adds	r1, #31
 8001850:	2241      	movs	r2, #65	; 0x41
 8001852:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001854:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001856:	3201      	adds	r2, #1
 8001858:	54a3      	strb	r3, [r4, r2]

  return HAL_OK;
 800185a:	2000      	movs	r0, #0
}
 800185c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800185e:	2200      	movs	r2, #0
 8001860:	3340      	adds	r3, #64	; 0x40
 8001862:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8001864:	f7ff fa52 	bl	8000d0c <HAL_I2C_MspInit>
 8001868:	e7b5      	b.n	80017d6 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800186a:	6822      	ldr	r2, [r4, #0]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	68a1      	ldr	r1, [r4, #8]
 8001872:	430b      	orrs	r3, r1
 8001874:	6093      	str	r3, [r2, #8]
 8001876:	e7c9      	b.n	800180c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	e7c7      	b.n	8001812 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001882:	2001      	movs	r0, #1
 8001884:	e7ea      	b.n	800185c <HAL_I2C_Init+0x94>
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	f0ffffff 	.word	0xf0ffffff
 800188c:	ffff7fff 	.word	0xffff7fff
 8001890:	02008000 	.word	0x02008000

08001894 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001896:	2341      	movs	r3, #65	; 0x41
 8001898:	5cc2      	ldrb	r2, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800189a:	3b3f      	subs	r3, #63	; 0x3f
  if (hi2c->State == HAL_I2C_STATE_READY)
 800189c:	2a20      	cmp	r2, #32
 800189e:	d001      	beq.n	80018a4 <HAL_I2CEx_ConfigAnalogFilter+0x10>
  }
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80018a4:	333e      	adds	r3, #62	; 0x3e
 80018a6:	5cc2      	ldrb	r2, [r0, r3]
 80018a8:	3b3e      	subs	r3, #62	; 0x3e
 80018aa:	2a01      	cmp	r2, #1
 80018ac:	d0f8      	beq.n	80018a0 <HAL_I2CEx_ConfigAnalogFilter+0xc>
 80018ae:	2440      	movs	r4, #64	; 0x40
 80018b0:	2201      	movs	r2, #1
 80018b2:	5502      	strb	r2, [r0, r4]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80018b4:	2541      	movs	r5, #65	; 0x41
 80018b6:	3322      	adds	r3, #34	; 0x22
 80018b8:	5543      	strb	r3, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 80018ba:	6806      	ldr	r6, [r0, #0]
 80018bc:	6833      	ldr	r3, [r6, #0]
 80018be:	4393      	bics	r3, r2
 80018c0:	6033      	str	r3, [r6, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018c2:	6806      	ldr	r6, [r0, #0]
 80018c4:	6833      	ldr	r3, [r6, #0]
 80018c6:	4f08      	ldr	r7, [pc, #32]	; (80018e8 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 80018c8:	403b      	ands	r3, r7
 80018ca:	6033      	str	r3, [r6, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80018cc:	6806      	ldr	r6, [r0, #0]
 80018ce:	6833      	ldr	r3, [r6, #0]
 80018d0:	4319      	orrs	r1, r3
 80018d2:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 80018d4:	6801      	ldr	r1, [r0, #0]
 80018d6:	680b      	ldr	r3, [r1, #0]
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80018dc:	2320      	movs	r3, #32
 80018de:	5543      	strb	r3, [r0, r5]
    __HAL_UNLOCK(hi2c);
 80018e0:	2300      	movs	r3, #0
 80018e2:	5503      	strb	r3, [r0, r4]
    return HAL_OK;
 80018e4:	e7dc      	b.n	80018a0 <HAL_I2CEx_ConfigAnalogFilter+0xc>
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	ffffefff 	.word	0xffffefff

080018ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ee:	2341      	movs	r3, #65	; 0x41
 80018f0:	5cc2      	ldrb	r2, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80018f2:	3b3f      	subs	r3, #63	; 0x3f
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f4:	2a20      	cmp	r2, #32
 80018f6:	d001      	beq.n	80018fc <HAL_I2CEx_ConfigDigitalFilter+0x10>
  }
}
 80018f8:	0018      	movs	r0, r3
 80018fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80018fc:	333e      	adds	r3, #62	; 0x3e
 80018fe:	5cc2      	ldrb	r2, [r0, r3]
 8001900:	3b3e      	subs	r3, #62	; 0x3e
 8001902:	2a01      	cmp	r2, #1
 8001904:	d0f8      	beq.n	80018f8 <HAL_I2CEx_ConfigDigitalFilter+0xc>
 8001906:	2440      	movs	r4, #64	; 0x40
 8001908:	2201      	movs	r2, #1
 800190a:	5502      	strb	r2, [r0, r4]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800190c:	2541      	movs	r5, #65	; 0x41
 800190e:	3322      	adds	r3, #34	; 0x22
 8001910:	5543      	strb	r3, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 8001912:	6806      	ldr	r6, [r0, #0]
 8001914:	6833      	ldr	r3, [r6, #0]
 8001916:	4393      	bics	r3, r2
 8001918:	6033      	str	r3, [r6, #0]
    tmpreg = hi2c->Instance->CR1;
 800191a:	6806      	ldr	r6, [r0, #0]
 800191c:	6833      	ldr	r3, [r6, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800191e:	4f07      	ldr	r7, [pc, #28]	; (800193c <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8001920:	403b      	ands	r3, r7
    tmpreg |= DigitalFilter << 8U;
 8001922:	0209      	lsls	r1, r1, #8
 8001924:	4319      	orrs	r1, r3
    hi2c->Instance->CR1 = tmpreg;
 8001926:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001928:	6801      	ldr	r1, [r0, #0]
 800192a:	680b      	ldr	r3, [r1, #0]
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001930:	2320      	movs	r3, #32
 8001932:	5543      	strb	r3, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8001934:	2300      	movs	r3, #0
 8001936:	5503      	strb	r3, [r0, r4]
    return HAL_OK;
 8001938:	e7de      	b.n	80018f8 <HAL_I2CEx_ConfigDigitalFilter+0xc>
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	fffff0ff 	.word	0xfffff0ff

08001940 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001940:	b570      	push	{r4, r5, r6, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	1e04      	subs	r4, r0, #0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001946:	d100      	bne.n	800194a <HAL_PCD_Init+0xa>
 8001948:	e06d      	b.n	8001a26 <HAL_PCD_Init+0xe6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800194a:	4b38      	ldr	r3, [pc, #224]	; (8001a2c <HAL_PCD_Init+0xec>)
 800194c:	5cc3      	ldrb	r3, [r0, r3]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d055      	beq.n	80019fe <HAL_PCD_Init+0xbe>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001952:	2203      	movs	r2, #3
 8001954:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <HAL_PCD_Init+0xec>)
 8001956:	54e2      	strb	r2, [r4, r3]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001958:	6820      	ldr	r0, [r4, #0]
 800195a:	f001 f983 	bl	8002c64 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195e:	6860      	ldr	r0, [r4, #4]
 8001960:	2800      	cmp	r0, #0
 8001962:	d02e      	beq.n	80019c2 <HAL_PCD_Init+0x82>
 8001964:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001966:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001968:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	18a2      	adds	r2, r4, r2
 800196e:	0015      	movs	r5, r2
 8001970:	3529      	adds	r5, #41	; 0x29
 8001972:	702e      	strb	r6, [r5, #0]
    hpcd->IN_ep[i].num = i;
 8001974:	3d01      	subs	r5, #1
 8001976:	702b      	strb	r3, [r5, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001978:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800197a:	3503      	adds	r5, #3
 800197c:	7029      	strb	r1, [r5, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800197e:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001980:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001982:	1c9a      	adds	r2, r3, #2
 8001984:	0152      	lsls	r2, r2, #5
 8001986:	5111      	str	r1, [r2, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001988:	3301      	adds	r3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	4283      	cmp	r3, r0
 800198e:	d3ec      	bcc.n	800196a <HAL_PCD_Init+0x2a>
 8001990:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001992:	2100      	movs	r1, #0
 8001994:	0153      	lsls	r3, r2, #5
 8001996:	18e3      	adds	r3, r4, r3
 8001998:	001d      	movs	r5, r3
 800199a:	352a      	adds	r5, #42	; 0x2a
 800199c:	35ff      	adds	r5, #255	; 0xff
 800199e:	7029      	strb	r1, [r5, #0]
    hpcd->OUT_ep[i].num = i;
 80019a0:	3d01      	subs	r5, #1
 80019a2:	702a      	strb	r2, [r5, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019a4:	3503      	adds	r5, #3
 80019a6:	7029      	strb	r1, [r5, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019a8:	350d      	adds	r5, #13
 80019aa:	6029      	str	r1, [r5, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019ac:	333d      	adds	r3, #61	; 0x3d
 80019ae:	33ff      	adds	r3, #255	; 0xff
 80019b0:	6019      	str	r1, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019b2:	0013      	movs	r3, r2
 80019b4:	330a      	adds	r3, #10
 80019b6:	015b      	lsls	r3, r3, #5
 80019b8:	5119      	str	r1, [r3, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ba:	3201      	adds	r2, #1
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	4282      	cmp	r2, r0
 80019c0:	d3e8      	bcc.n	8001994 <HAL_PCD_Init+0x54>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019c2:	0023      	movs	r3, r4
 80019c4:	3310      	adds	r3, #16
 80019c6:	466a      	mov	r2, sp
 80019c8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80019ca:	c223      	stmia	r2!, {r0, r1, r5}
 80019cc:	cb03      	ldmia	r3!, {r0, r1}
 80019ce:	c203      	stmia	r2!, {r0, r1}
 80019d0:	6861      	ldr	r1, [r4, #4]
 80019d2:	68a2      	ldr	r2, [r4, #8]
 80019d4:	68e3      	ldr	r3, [r4, #12]
 80019d6:	6820      	ldr	r0, [r4, #0]
 80019d8:	f001 f94e 	bl	8002c78 <USB_DevInit>
 80019dc:	1e05      	subs	r5, r0, #0
 80019de:	d115      	bne.n	8001a0c <HAL_PCD_Init+0xcc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80019e0:	2200      	movs	r2, #0
 80019e2:	2324      	movs	r3, #36	; 0x24
 80019e4:	54e2      	strb	r2, [r4, r3]
  hpcd->State = HAL_PCD_STATE_READY;
 80019e6:	3201      	adds	r2, #1
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_PCD_Init+0xec>)
 80019ea:	54e2      	strb	r2, [r4, r3]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019ec:	69e3      	ldr	r3, [r4, #28]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d011      	beq.n	8001a16 <HAL_PCD_Init+0xd6>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }


  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 80019f2:	6a23      	ldr	r3, [r4, #32]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d012      	beq.n	8001a1e <HAL_PCD_Init+0xde>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
  }

  return HAL_OK;
}
 80019f8:	0028      	movs	r0, r5
 80019fa:	b006      	add	sp, #24
 80019fc:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80019fe:	2200      	movs	r2, #0
 8001a00:	238a      	movs	r3, #138	; 0x8a
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	54c2      	strb	r2, [r0, r3]
    HAL_PCD_MspInit(hpcd);
 8001a06:	f7ff fab7 	bl	8000f78 <HAL_PCD_MspInit>
 8001a0a:	e7a2      	b.n	8001952 <HAL_PCD_Init+0x12>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <HAL_PCD_Init+0xec>)
 8001a10:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8001a12:	2501      	movs	r5, #1
 8001a14:	e7f0      	b.n	80019f8 <HAL_PCD_Init+0xb8>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a16:	0020      	movs	r0, r4
 8001a18:	f000 f81a 	bl	8001a50 <HAL_PCDEx_ActivateLPM>
 8001a1c:	e7e9      	b.n	80019f2 <HAL_PCD_Init+0xb2>
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8001a1e:	0020      	movs	r0, r4
 8001a20:	f000 f806 	bl	8001a30 <HAL_PCDEx_ActivateBCD>
 8001a24:	e7e8      	b.n	80019f8 <HAL_PCD_Init+0xb8>
    return HAL_ERROR;
 8001a26:	2501      	movs	r5, #1
 8001a28:	e7e6      	b.n	80019f8 <HAL_PCD_Init+0xb8>
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	00000229 	.word	0x00000229

08001a30 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_TypeDef *USBx = hpcd->Instance;
 8001a30:	6802      	ldr	r2, [r0, #0]
  hpcd->battery_charging_active = 1U;
 8001a32:	2101      	movs	r1, #1
 8001a34:	239b      	movs	r3, #155	; 0x9b
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	50c1      	str	r1, [r0, r3]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8001a3a:	2358      	movs	r3, #88	; 0x58
 8001a3c:	5ad1      	ldrh	r1, [r2, r3]
 8001a3e:	2001      	movs	r0, #1
 8001a40:	4301      	orrs	r1, r0
 8001a42:	52d1      	strh	r1, [r2, r3]
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8001a44:	5ad1      	ldrh	r1, [r2, r3]
 8001a46:	3001      	adds	r0, #1
 8001a48:	4301      	orrs	r1, r0
 8001a4a:	52d1      	strh	r1, [r2, r3]

  return HAL_OK;
}
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	4770      	bx	lr

08001a50 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001a50:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 8001a52:	2101      	movs	r1, #1
 8001a54:	239a      	movs	r3, #154	; 0x9a
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	50c1      	str	r1, [r0, r3]
  hpcd->LPM_State = LPM_L0;
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	3b08      	subs	r3, #8
 8001a5e:	54c1      	strb	r1, [r0, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001a60:	2354      	movs	r3, #84	; 0x54
 8001a62:	5ad1      	ldrh	r1, [r2, r3]
 8001a64:	2001      	movs	r0, #1
 8001a66:	4301      	orrs	r1, r0
 8001a68:	52d1      	strh	r1, [r2, r3]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001a6a:	5ad1      	ldrh	r1, [r2, r3]
 8001a6c:	3001      	adds	r0, #1
 8001a6e:	4301      	orrs	r1, r0
 8001a70:	52d1      	strh	r1, [r2, r3]

  return HAL_OK;
}
 8001a72:	2000      	movs	r0, #0
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a78:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001a7c:	68d9      	ldr	r1, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a7e:	230c      	movs	r3, #12
 8001a80:	400b      	ands	r3, r1
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d030      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x70>
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d010      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x34>
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d008      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x28>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	041b      	lsls	r3, r3, #16
 8001a94:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a96:	3301      	adds	r3, #1
 8001a98:	2080      	movs	r0, #128	; 0x80
 8001a9a:	0200      	lsls	r0, r0, #8
 8001a9c:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8001a9e:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	06db      	lsls	r3, r3, #27
 8001aa6:	d421      	bmi.n	8001aec <HAL_RCC_GetSysClockFreq+0x74>
        sysclockfreq =  HSI_VALUE;
 8001aa8:	4812      	ldr	r0, [pc, #72]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001aaa:	e7f8      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x26>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001aac:	028b      	lsls	r3, r1, #10
 8001aae:	0f1b      	lsrs	r3, r3, #28
 8001ab0:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x80>)
 8001ab2:	5cd0      	ldrb	r0, [r2, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ab4:	0209      	lsls	r1, r1, #8
 8001ab6:	0f89      	lsrs	r1, r1, #30
 8001ab8:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	03db      	lsls	r3, r3, #15
 8001ac0:	d408      	bmi.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x5c>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	06db      	lsls	r3, r3, #27
 8001ac8:	d509      	bpl.n	8001ade <HAL_RCC_GetSysClockFreq+0x66>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_RCC_GetSysClockFreq+0x84>)
 8001acc:	4358      	muls	r0, r3
 8001ace:	f7fe fb23 	bl	8000118 <__udivsi3>
 8001ad2:	e7e4      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x26>
        pllvco = (HSE_VALUE * pllm) / plld;
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x88>)
 8001ad6:	4358      	muls	r0, r3
 8001ad8:	f7fe fb1e 	bl	8000118 <__udivsi3>
 8001adc:	e7df      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x26>
         pllvco = (HSI_VALUE * pllm) / plld;
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001ae0:	4358      	muls	r0, r3
 8001ae2:	f7fe fb19 	bl	8000118 <__udivsi3>
 8001ae6:	e7da      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x26>
      sysclockfreq = HSE_VALUE;
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x88>)
 8001aea:	e7d8      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x26>
        sysclockfreq =  (HSI_VALUE >> 2);
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <HAL_RCC_GetSysClockFreq+0x84>)
  return sysclockfreq;
 8001aee:	e7d6      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x26>
 8001af0:	40021000 	.word	0x40021000
 8001af4:	00f42400 	.word	0x00f42400
 8001af8:	08004ca4 	.word	0x08004ca4
 8001afc:	003d0900 	.word	0x003d0900
 8001b00:	007a1200 	.word	0x007a1200

08001b04 <HAL_RCC_OscConfig>:
{
 8001b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b06:	46d6      	mov	lr, sl
 8001b08:	464f      	mov	r7, r9
 8001b0a:	4646      	mov	r6, r8
 8001b0c:	b5c0      	push	{r6, r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 8001b12:	d100      	bne.n	8001b16 <HAL_RCC_OscConfig+0x12>
 8001b14:	e2c2      	b.n	800209c <HAL_RCC_OscConfig+0x598>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b16:	4bbb      	ldr	r3, [pc, #748]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	250c      	movs	r5, #12
 8001b1c:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b1e:	68de      	ldr	r6, [r3, #12]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	025b      	lsls	r3, r3, #9
 8001b24:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b26:	6803      	ldr	r3, [r0, #0]
 8001b28:	07db      	lsls	r3, r3, #31
 8001b2a:	d53c      	bpl.n	8001ba6 <HAL_RCC_OscConfig+0xa2>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b2c:	2d08      	cmp	r5, #8
 8001b2e:	d031      	beq.n	8001b94 <HAL_RCC_OscConfig+0x90>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b30:	2d0c      	cmp	r5, #12
 8001b32:	d02d      	beq.n	8001b90 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b34:	6863      	ldr	r3, [r4, #4]
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	0252      	lsls	r2, r2, #9
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d055      	beq.n	8001bea <HAL_RCC_OscConfig+0xe6>
 8001b3e:	22a0      	movs	r2, #160	; 0xa0
 8001b40:	02d2      	lsls	r2, r2, #11
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d058      	beq.n	8001bf8 <HAL_RCC_OscConfig+0xf4>
 8001b46:	49af      	ldr	r1, [pc, #700]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001b48:	680b      	ldr	r3, [r1, #0]
 8001b4a:	4aaf      	ldr	r2, [pc, #700]	; (8001e08 <HAL_RCC_OscConfig+0x304>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	680b      	ldr	r3, [r1, #0]
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	0252      	lsls	r2, r2, #9
 8001b56:	4013      	ands	r3, r2
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	9b01      	ldr	r3, [sp, #4]
 8001b5c:	680b      	ldr	r3, [r1, #0]
 8001b5e:	4aab      	ldr	r2, [pc, #684]	; (8001e0c <HAL_RCC_OscConfig+0x308>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b64:	6863      	ldr	r3, [r4, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d052      	beq.n	8001c10 <HAL_RCC_OscConfig+0x10c>
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fceb 	bl	8001544 <HAL_GetTick>
 8001b6e:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b70:	4ba4      	ldr	r3, [pc, #656]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001b72:	4698      	mov	r8, r3
 8001b74:	2780      	movs	r7, #128	; 0x80
 8001b76:	02bf      	lsls	r7, r7, #10
 8001b78:	4643      	mov	r3, r8
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	423b      	tst	r3, r7
 8001b7e:	d112      	bne.n	8001ba6 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff fce0 	bl	8001544 <HAL_GetTick>
 8001b84:	464b      	mov	r3, r9
 8001b86:	1ac0      	subs	r0, r0, r3
 8001b88:	2864      	cmp	r0, #100	; 0x64
 8001b8a:	d9f5      	bls.n	8001b78 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	e286      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b90:	2e00      	cmp	r6, #0
 8001b92:	d0cf      	beq.n	8001b34 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	4b9b      	ldr	r3, [pc, #620]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	039b      	lsls	r3, r3, #14
 8001b9a:	d504      	bpl.n	8001ba6 <HAL_RCC_OscConfig+0xa2>
        return HAL_ERROR;
 8001b9c:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9e:	6863      	ldr	r3, [r4, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d100      	bne.n	8001ba6 <HAL_RCC_OscConfig+0xa2>
 8001ba4:	e27b      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	079b      	lsls	r3, r3, #30
 8001baa:	d56b      	bpl.n	8001c84 <HAL_RCC_OscConfig+0x180>
    hsi_state = RCC_OscInitStruct->HSIState;
 8001bac:	68e3      	ldr	r3, [r4, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bae:	2d04      	cmp	r5, #4
 8001bb0:	d043      	beq.n	8001c3a <HAL_RCC_OscConfig+0x136>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bb2:	2d0c      	cmp	r5, #12
 8001bb4:	d03f      	beq.n	8001c36 <HAL_RCC_OscConfig+0x132>
      if(hsi_state != RCC_HSI_OFF)
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d100      	bne.n	8001bbc <HAL_RCC_OscConfig+0xb8>
 8001bba:	e0b9      	b.n	8001d30 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bbc:	4991      	ldr	r1, [pc, #580]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001bbe:	680a      	ldr	r2, [r1, #0]
 8001bc0:	2009      	movs	r0, #9
 8001bc2:	4382      	bics	r2, r0
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fcbc 	bl	8001544 <HAL_GetTick>
 8001bcc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bce:	4f8d      	ldr	r7, [pc, #564]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001bd0:	2604      	movs	r6, #4
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	421e      	tst	r6, r3
 8001bd6:	d000      	beq.n	8001bda <HAL_RCC_OscConfig+0xd6>
 8001bd8:	e0a1      	b.n	8001d1e <HAL_RCC_OscConfig+0x21a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff fcb3 	bl	8001544 <HAL_GetTick>
 8001bde:	4643      	mov	r3, r8
 8001be0:	1ac0      	subs	r0, r0, r3
 8001be2:	2802      	cmp	r0, #2
 8001be4:	d9f5      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 8001be6:	2003      	movs	r0, #3
 8001be8:	e259      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bea:	4a86      	ldr	r2, [pc, #536]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001bec:	6811      	ldr	r1, [r2, #0]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	025b      	lsls	r3, r3, #9
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e7b5      	b.n	8001b64 <HAL_RCC_OscConfig+0x60>
 8001bf8:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001bfa:	6819      	ldr	r1, [r3, #0]
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	02d2      	lsls	r2, r2, #11
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	6819      	ldr	r1, [r3, #0]
 8001c06:	2280      	movs	r2, #128	; 0x80
 8001c08:	0252      	lsls	r2, r2, #9
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e7a9      	b.n	8001b64 <HAL_RCC_OscConfig+0x60>
        tickstart = HAL_GetTick();
 8001c10:	f7ff fc98 	bl	8001544 <HAL_GetTick>
 8001c14:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c16:	4b7b      	ldr	r3, [pc, #492]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001c18:	4698      	mov	r8, r3
 8001c1a:	2780      	movs	r7, #128	; 0x80
 8001c1c:	02bf      	lsls	r7, r7, #10
 8001c1e:	4643      	mov	r3, r8
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	423b      	tst	r3, r7
 8001c24:	d0bf      	beq.n	8001ba6 <HAL_RCC_OscConfig+0xa2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c26:	f7ff fc8d 	bl	8001544 <HAL_GetTick>
 8001c2a:	464b      	mov	r3, r9
 8001c2c:	1ac0      	subs	r0, r0, r3
 8001c2e:	2864      	cmp	r0, #100	; 0x64
 8001c30:	d9f5      	bls.n	8001c1e <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 8001c32:	2003      	movs	r0, #3
 8001c34:	e233      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c36:	2e00      	cmp	r6, #0
 8001c38:	d1bd      	bne.n	8001bb6 <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c3a:	4a72      	ldr	r2, [pc, #456]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	0752      	lsls	r2, r2, #29
 8001c40:	d503      	bpl.n	8001c4a <HAL_RCC_OscConfig+0x146>
        return HAL_ERROR;
 8001c42:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d100      	bne.n	8001c4a <HAL_RCC_OscConfig+0x146>
 8001c48:	e229      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	4e6e      	ldr	r6, [pc, #440]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001c4c:	6871      	ldr	r1, [r6, #4]
 8001c4e:	6922      	ldr	r2, [r4, #16]
 8001c50:	0212      	lsls	r2, r2, #8
 8001c52:	486f      	ldr	r0, [pc, #444]	; (8001e10 <HAL_RCC_OscConfig+0x30c>)
 8001c54:	4001      	ands	r1, r0
 8001c56:	430a      	orrs	r2, r1
 8001c58:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c5a:	6832      	ldr	r2, [r6, #0]
 8001c5c:	2109      	movs	r1, #9
 8001c5e:	438a      	bics	r2, r1
 8001c60:	4313      	orrs	r3, r2
 8001c62:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c64:	f7ff ff08 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8001c68:	68f3      	ldr	r3, [r6, #12]
 8001c6a:	061b      	lsls	r3, r3, #24
 8001c6c:	0f1b      	lsrs	r3, r3, #28
 8001c6e:	4a69      	ldr	r2, [pc, #420]	; (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c70:	5cd3      	ldrb	r3, [r2, r3]
 8001c72:	40d8      	lsrs	r0, r3
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <HAL_RCC_OscConfig+0x314>)
 8001c76:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001c78:	2003      	movs	r0, #3
 8001c7a:	f7ff fc2f 	bl	80014dc <HAL_InitTick>
      if(status != HAL_OK)
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d000      	beq.n	8001c84 <HAL_RCC_OscConfig+0x180>
 8001c82:	e20c      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	06db      	lsls	r3, r3, #27
 8001c88:	d52c      	bpl.n	8001ce4 <HAL_RCC_OscConfig+0x1e0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001c8a:	2d00      	cmp	r5, #0
 8001c8c:	d165      	bne.n	8001d5a <HAL_RCC_OscConfig+0x256>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	059b      	lsls	r3, r3, #22
 8001c94:	d504      	bpl.n	8001ca0 <HAL_RCC_OscConfig+0x19c>
        return HAL_ERROR;
 8001c96:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c98:	69e3      	ldr	r3, [r4, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d100      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x19c>
 8001c9e:	e1fe      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ca0:	4b58      	ldr	r3, [pc, #352]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	495d      	ldr	r1, [pc, #372]	; (8001e1c <HAL_RCC_OscConfig+0x318>)
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001caa:	430a      	orrs	r2, r1
 8001cac:	605a      	str	r2, [r3, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	6a22      	ldr	r2, [r4, #32]
 8001cb2:	0612      	lsls	r2, r2, #24
 8001cb4:	0209      	lsls	r1, r1, #8
 8001cb6:	0a09      	lsrs	r1, r1, #8
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	605a      	str	r2, [r3, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001cbc:	68da      	ldr	r2, [r3, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cc0:	0b59      	lsrs	r1, r3, #13
 8001cc2:	3101      	adds	r1, #1
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001cca:	0612      	lsls	r2, r2, #24
 8001ccc:	0f12      	lsrs	r2, r2, #28
 8001cce:	4951      	ldr	r1, [pc, #324]	; (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001cd0:	5c8a      	ldrb	r2, [r1, r2]
 8001cd2:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cd4:	4a50      	ldr	r2, [pc, #320]	; (8001e18 <HAL_RCC_OscConfig+0x314>)
 8001cd6:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f7ff fbff 	bl	80014dc <HAL_InitTick>
        if(status != HAL_OK)
 8001cde:	2800      	cmp	r0, #0
 8001ce0:	d000      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x1e0>
 8001ce2:	e1dc      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	071b      	lsls	r3, r3, #28
 8001ce8:	d400      	bmi.n	8001cec <HAL_RCC_OscConfig+0x1e8>
 8001cea:	e09b      	b.n	8001e24 <HAL_RCC_OscConfig+0x320>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cec:	6963      	ldr	r3, [r4, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d072      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x2d4>
      __HAL_RCC_LSI_ENABLE();
 8001cf2:	4a44      	ldr	r2, [pc, #272]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001cf4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001cfc:	f7ff fc22 	bl	8001544 <HAL_GetTick>
 8001d00:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d02:	4f40      	ldr	r7, [pc, #256]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001d04:	2602      	movs	r6, #2
 8001d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d08:	421e      	tst	r6, r3
 8001d0a:	d000      	beq.n	8001d0e <HAL_RCC_OscConfig+0x20a>
 8001d0c:	e08a      	b.n	8001e24 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fc19 	bl	8001544 <HAL_GetTick>
 8001d12:	4643      	mov	r3, r8
 8001d14:	1ac0      	subs	r0, r0, r3
 8001d16:	2802      	cmp	r0, #2
 8001d18:	d9f5      	bls.n	8001d06 <HAL_RCC_OscConfig+0x202>
          return HAL_TIMEOUT;
 8001d1a:	2003      	movs	r0, #3
 8001d1c:	e1bf      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	4939      	ldr	r1, [pc, #228]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001d20:	684a      	ldr	r2, [r1, #4]
 8001d22:	6923      	ldr	r3, [r4, #16]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	483a      	ldr	r0, [pc, #232]	; (8001e10 <HAL_RCC_OscConfig+0x30c>)
 8001d28:	4002      	ands	r2, r0
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
 8001d2e:	e7a9      	b.n	8001c84 <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_HSI_DISABLE();
 8001d30:	4a34      	ldr	r2, [pc, #208]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001d32:	6813      	ldr	r3, [r2, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	438b      	bics	r3, r1
 8001d38:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fc03 	bl	8001544 <HAL_GetTick>
 8001d3e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d40:	4f30      	ldr	r7, [pc, #192]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001d42:	2604      	movs	r6, #4
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	421e      	tst	r6, r3
 8001d48:	d09c      	beq.n	8001c84 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fbfb 	bl	8001544 <HAL_GetTick>
 8001d4e:	4643      	mov	r3, r8
 8001d50:	1ac0      	subs	r0, r0, r3
 8001d52:	2802      	cmp	r0, #2
 8001d54:	d9f6      	bls.n	8001d44 <HAL_RCC_OscConfig+0x240>
            return HAL_TIMEOUT;
 8001d56:	2003      	movs	r0, #3
 8001d58:	e1a1      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d5a:	69e3      	ldr	r3, [r4, #28]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d025      	beq.n	8001dac <HAL_RCC_OscConfig+0x2a8>
        __HAL_RCC_MSI_ENABLE();
 8001d60:	4a28      	ldr	r2, [pc, #160]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001d62:	6811      	ldr	r1, [r2, #0]
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fbea 	bl	8001544 <HAL_GetTick>
 8001d70:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d72:	4f24      	ldr	r7, [pc, #144]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001d74:	2680      	movs	r6, #128	; 0x80
 8001d76:	00b6      	lsls	r6, r6, #2
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4233      	tst	r3, r6
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_OscConfig+0x28a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fbe1 	bl	8001544 <HAL_GetTick>
 8001d82:	4643      	mov	r3, r8
 8001d84:	1ac0      	subs	r0, r0, r3
 8001d86:	2802      	cmp	r0, #2
 8001d88:	d9f6      	bls.n	8001d78 <HAL_RCC_OscConfig+0x274>
            return HAL_TIMEOUT;
 8001d8a:	2003      	movs	r0, #3
 8001d8c:	e187      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d8e:	491d      	ldr	r1, [pc, #116]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001d90:	684b      	ldr	r3, [r1, #4]
 8001d92:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <HAL_RCC_OscConfig+0x318>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d9c:	684a      	ldr	r2, [r1, #4]
 8001d9e:	6a23      	ldr	r3, [r4, #32]
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	0212      	lsls	r2, r2, #8
 8001da4:	0a12      	lsrs	r2, r2, #8
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
 8001daa:	e79b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1e0>
        __HAL_RCC_MSI_DISABLE();
 8001dac:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001dae:	6813      	ldr	r3, [r2, #0]
 8001db0:	491b      	ldr	r1, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x31c>)
 8001db2:	400b      	ands	r3, r1
 8001db4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001db6:	f7ff fbc5 	bl	8001544 <HAL_GetTick>
 8001dba:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dbc:	4f11      	ldr	r7, [pc, #68]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001dbe:	2680      	movs	r6, #128	; 0x80
 8001dc0:	00b6      	lsls	r6, r6, #2
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	4233      	tst	r3, r6
 8001dc6:	d08d      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x1e0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fbbc 	bl	8001544 <HAL_GetTick>
 8001dcc:	4643      	mov	r3, r8
 8001dce:	1ac0      	subs	r0, r0, r3
 8001dd0:	2802      	cmp	r0, #2
 8001dd2:	d9f6      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	e162      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
      __HAL_RCC_LSI_DISABLE();
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001dda:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001ddc:	2101      	movs	r1, #1
 8001dde:	438b      	bics	r3, r1
 8001de0:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001de2:	f7ff fbaf 	bl	8001544 <HAL_GetTick>
 8001de6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001de8:	4f06      	ldr	r7, [pc, #24]	; (8001e04 <HAL_RCC_OscConfig+0x300>)
 8001dea:	2602      	movs	r6, #2
 8001dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dee:	421e      	tst	r6, r3
 8001df0:	d018      	beq.n	8001e24 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df2:	f7ff fba7 	bl	8001544 <HAL_GetTick>
 8001df6:	4643      	mov	r3, r8
 8001df8:	1ac0      	subs	r0, r0, r3
 8001dfa:	2802      	cmp	r0, #2
 8001dfc:	d9f6      	bls.n	8001dec <HAL_RCC_OscConfig+0x2e8>
          return HAL_TIMEOUT;
 8001dfe:	2003      	movs	r0, #3
 8001e00:	e14d      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	40021000 	.word	0x40021000
 8001e08:	fffeffff 	.word	0xfffeffff
 8001e0c:	fffbffff 	.word	0xfffbffff
 8001e10:	ffffe0ff 	.word	0xffffe0ff
 8001e14:	08004c8c 	.word	0x08004c8c
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	ffff1fff 	.word	0xffff1fff
 8001e20:	fffffeff 	.word	0xfffffeff
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	075b      	lsls	r3, r3, #29
 8001e28:	d400      	bmi.n	8001e2c <HAL_RCC_OscConfig+0x328>
 8001e2a:	e085      	b.n	8001f38 <HAL_RCC_OscConfig+0x434>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2c:	4b9f      	ldr	r3, [pc, #636]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001e30:	2200      	movs	r2, #0
 8001e32:	4692      	mov	sl, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	d407      	bmi.n	8001e48 <HAL_RCC_OscConfig+0x344>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	4a9c      	ldr	r2, [pc, #624]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001e3a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	055b      	lsls	r3, r3, #21
 8001e40:	430b      	orrs	r3, r1
 8001e42:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8001e44:	2301      	movs	r3, #1
 8001e46:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	4b99      	ldr	r3, [pc, #612]	; (80020b0 <HAL_RCC_OscConfig+0x5ac>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	05db      	lsls	r3, r3, #23
 8001e4e:	d525      	bpl.n	8001e9c <HAL_RCC_OscConfig+0x398>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e50:	68a3      	ldr	r3, [r4, #8]
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	0052      	lsls	r2, r2, #1
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d037      	beq.n	8001eca <HAL_RCC_OscConfig+0x3c6>
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d13c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x3d4>
 8001e5e:	4b93      	ldr	r3, [pc, #588]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001e60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e62:	4994      	ldr	r1, [pc, #592]	; (80020b4 <HAL_RCC_OscConfig+0x5b0>)
 8001e64:	400a      	ands	r2, r1
 8001e66:	651a      	str	r2, [r3, #80]	; 0x50
 8001e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e6a:	4993      	ldr	r1, [pc, #588]	; (80020b8 <HAL_RCC_OscConfig+0x5b4>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	651a      	str	r2, [r3, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e70:	68a3      	ldr	r3, [r4, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d04a      	beq.n	8001f0c <HAL_RCC_OscConfig+0x408>
      tickstart = HAL_GetTick();
 8001e76:	f7ff fb65 	bl	8001544 <HAL_GetTick>
 8001e7a:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e7c:	4f8b      	ldr	r7, [pc, #556]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001e7e:	2680      	movs	r6, #128	; 0x80
 8001e80:	00b6      	lsls	r6, r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	4b8e      	ldr	r3, [pc, #568]	; (80020bc <HAL_RCC_OscConfig+0x5b8>)
 8001e84:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e88:	4233      	tst	r3, r6
 8001e8a:	d152      	bne.n	8001f32 <HAL_RCC_OscConfig+0x42e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fb5a 	bl	8001544 <HAL_GetTick>
 8001e90:	464b      	mov	r3, r9
 8001e92:	1ac0      	subs	r0, r0, r3
 8001e94:	4540      	cmp	r0, r8
 8001e96:	d9f6      	bls.n	8001e86 <HAL_RCC_OscConfig+0x382>
          return HAL_TIMEOUT;
 8001e98:	2003      	movs	r0, #3
 8001e9a:	e100      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9c:	4a84      	ldr	r2, [pc, #528]	; (80020b0 <HAL_RCC_OscConfig+0x5ac>)
 8001e9e:	6811      	ldr	r1, [r2, #0]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fb4c 	bl	8001544 <HAL_GetTick>
 8001eac:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eae:	4f80      	ldr	r7, [pc, #512]	; (80020b0 <HAL_RCC_OscConfig+0x5ac>)
 8001eb0:	2680      	movs	r6, #128	; 0x80
 8001eb2:	0076      	lsls	r6, r6, #1
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4233      	tst	r3, r6
 8001eb8:	d1ca      	bne.n	8001e50 <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eba:	f7ff fb43 	bl	8001544 <HAL_GetTick>
 8001ebe:	4643      	mov	r3, r8
 8001ec0:	1ac0      	subs	r0, r0, r3
 8001ec2:	2864      	cmp	r0, #100	; 0x64
 8001ec4:	d9f6      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3b0>
          return HAL_TIMEOUT;
 8001ec6:	2003      	movs	r0, #3
 8001ec8:	e0e9      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eca:	4a78      	ldr	r2, [pc, #480]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001ecc:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	6513      	str	r3, [r2, #80]	; 0x50
 8001ed6:	e7cb      	b.n	8001e70 <HAL_RCC_OscConfig+0x36c>
 8001ed8:	22a0      	movs	r2, #160	; 0xa0
 8001eda:	00d2      	lsls	r2, r2, #3
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d009      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x3f0>
 8001ee0:	4b72      	ldr	r3, [pc, #456]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001ee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ee4:	4973      	ldr	r1, [pc, #460]	; (80020b4 <HAL_RCC_OscConfig+0x5b0>)
 8001ee6:	400a      	ands	r2, r1
 8001ee8:	651a      	str	r2, [r3, #80]	; 0x50
 8001eea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eec:	4972      	ldr	r1, [pc, #456]	; (80020b8 <HAL_RCC_OscConfig+0x5b4>)
 8001eee:	400a      	ands	r2, r1
 8001ef0:	651a      	str	r2, [r3, #80]	; 0x50
 8001ef2:	e7bd      	b.n	8001e70 <HAL_RCC_OscConfig+0x36c>
 8001ef4:	4b6d      	ldr	r3, [pc, #436]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001ef6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ef8:	3a01      	subs	r2, #1
 8001efa:	3aff      	subs	r2, #255	; 0xff
 8001efc:	430a      	orrs	r2, r1
 8001efe:	651a      	str	r2, [r3, #80]	; 0x50
 8001f00:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	0052      	lsls	r2, r2, #1
 8001f06:	430a      	orrs	r2, r1
 8001f08:	651a      	str	r2, [r3, #80]	; 0x50
 8001f0a:	e7b1      	b.n	8001e70 <HAL_RCC_OscConfig+0x36c>
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fb1a 	bl	8001544 <HAL_GetTick>
 8001f10:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f12:	4f66      	ldr	r7, [pc, #408]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001f14:	2680      	movs	r6, #128	; 0x80
 8001f16:	00b6      	lsls	r6, r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f18:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_OscConfig+0x5b8>)
 8001f1a:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f1e:	4233      	tst	r3, r6
 8001f20:	d007      	beq.n	8001f32 <HAL_RCC_OscConfig+0x42e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff fb0f 	bl	8001544 <HAL_GetTick>
 8001f26:	464b      	mov	r3, r9
 8001f28:	1ac0      	subs	r0, r0, r3
 8001f2a:	4540      	cmp	r0, r8
 8001f2c:	d9f6      	bls.n	8001f1c <HAL_RCC_OscConfig+0x418>
          return HAL_TIMEOUT;
 8001f2e:	2003      	movs	r0, #3
 8001f30:	e0b5      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
    if(pwrclkchanged == SET)
 8001f32:	4653      	mov	r3, sl
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d023      	beq.n	8001f80 <HAL_RCC_OscConfig+0x47c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	069b      	lsls	r3, r3, #26
 8001f3c:	d540      	bpl.n	8001fc0 <HAL_RCC_OscConfig+0x4bc>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f3e:	69a3      	ldr	r3, [r4, #24]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d023      	beq.n	8001f8c <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_HSI48_ENABLE();
 8001f44:	4b59      	ldr	r3, [pc, #356]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001f46:	6899      	ldr	r1, [r3, #8]
 8001f48:	2001      	movs	r0, #1
 8001f4a:	4301      	orrs	r1, r0
 8001f4c:	6099      	str	r1, [r3, #8]
 8001f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f50:	4302      	orrs	r2, r0
 8001f52:	635a      	str	r2, [r3, #52]	; 0x34
 8001f54:	4a5a      	ldr	r2, [pc, #360]	; (80020c0 <HAL_RCC_OscConfig+0x5bc>)
 8001f56:	6a11      	ldr	r1, [r2, #32]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	019b      	lsls	r3, r3, #6
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001f60:	f7ff faf0 	bl	8001544 <HAL_GetTick>
 8001f64:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f66:	4f51      	ldr	r7, [pc, #324]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001f68:	2602      	movs	r6, #2
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	421e      	tst	r6, r3
 8001f6e:	d127      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4bc>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f70:	f7ff fae8 	bl	8001544 <HAL_GetTick>
 8001f74:	4643      	mov	r3, r8
 8001f76:	1ac0      	subs	r0, r0, r3
 8001f78:	2802      	cmp	r0, #2
 8001f7a:	d9f6      	bls.n	8001f6a <HAL_RCC_OscConfig+0x466>
            return HAL_TIMEOUT;
 8001f7c:	2003      	movs	r0, #3
 8001f7e:	e08e      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f80:	4a4a      	ldr	r2, [pc, #296]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001f82:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001f84:	494f      	ldr	r1, [pc, #316]	; (80020c4 <HAL_RCC_OscConfig+0x5c0>)
 8001f86:	400b      	ands	r3, r1
 8001f88:	6393      	str	r3, [r2, #56]	; 0x38
 8001f8a:	e7d5      	b.n	8001f38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_HSI48_DISABLE();
 8001f8c:	4a47      	ldr	r2, [pc, #284]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001f8e:	6893      	ldr	r3, [r2, #8]
 8001f90:	2101      	movs	r1, #1
 8001f92:	438b      	bics	r3, r1
 8001f94:	6093      	str	r3, [r2, #8]
 8001f96:	4a4a      	ldr	r2, [pc, #296]	; (80020c0 <HAL_RCC_OscConfig+0x5bc>)
 8001f98:	6a13      	ldr	r3, [r2, #32]
 8001f9a:	494b      	ldr	r1, [pc, #300]	; (80020c8 <HAL_RCC_OscConfig+0x5c4>)
 8001f9c:	400b      	ands	r3, r1
 8001f9e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fad0 	bl	8001544 <HAL_GetTick>
 8001fa4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fa6:	4f41      	ldr	r7, [pc, #260]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001fa8:	2602      	movs	r6, #2
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	421e      	tst	r6, r3
 8001fae:	d007      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x4bc>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fb0:	f7ff fac8 	bl	8001544 <HAL_GetTick>
 8001fb4:	4643      	mov	r3, r8
 8001fb6:	1ac0      	subs	r0, r0, r3
 8001fb8:	2802      	cmp	r0, #2
 8001fba:	d9f6      	bls.n	8001faa <HAL_RCC_OscConfig+0x4a6>
            return HAL_TIMEOUT;
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	e06e      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return HAL_OK;
 8001fc2:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d06a      	beq.n	800209e <HAL_RCC_OscConfig+0x59a>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc8:	2d0c      	cmp	r5, #12
 8001fca:	d04f      	beq.n	800206c <HAL_RCC_OscConfig+0x568>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d014      	beq.n	8001ffa <HAL_RCC_OscConfig+0x4f6>
        __HAL_RCC_PLL_DISABLE();
 8001fd0:	4a36      	ldr	r2, [pc, #216]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001fd2:	6813      	ldr	r3, [r2, #0]
 8001fd4:	493d      	ldr	r1, [pc, #244]	; (80020cc <HAL_RCC_OscConfig+0x5c8>)
 8001fd6:	400b      	ands	r3, r1
 8001fd8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001fda:	f7ff fab3 	bl	8001544 <HAL_GetTick>
 8001fde:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fe0:	4d32      	ldr	r5, [pc, #200]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001fe2:	2480      	movs	r4, #128	; 0x80
 8001fe4:	04a4      	lsls	r4, r4, #18
 8001fe6:	682b      	ldr	r3, [r5, #0]
 8001fe8:	4223      	tst	r3, r4
 8001fea:	d03d      	beq.n	8002068 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fec:	f7ff faaa 	bl	8001544 <HAL_GetTick>
 8001ff0:	1b80      	subs	r0, r0, r6
 8001ff2:	2802      	cmp	r0, #2
 8001ff4:	d9f7      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
            return HAL_TIMEOUT;
 8001ff6:	2003      	movs	r0, #3
 8001ff8:	e051      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
        __HAL_RCC_PLL_DISABLE();
 8001ffa:	4a2c      	ldr	r2, [pc, #176]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8001ffc:	6813      	ldr	r3, [r2, #0]
 8001ffe:	4933      	ldr	r1, [pc, #204]	; (80020cc <HAL_RCC_OscConfig+0x5c8>)
 8002000:	400b      	ands	r3, r1
 8002002:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002004:	f7ff fa9e 	bl	8001544 <HAL_GetTick>
 8002008:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800200a:	4e28      	ldr	r6, [pc, #160]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 800200c:	2580      	movs	r5, #128	; 0x80
 800200e:	04ad      	lsls	r5, r5, #18
 8002010:	6833      	ldr	r3, [r6, #0]
 8002012:	422b      	tst	r3, r5
 8002014:	d006      	beq.n	8002024 <HAL_RCC_OscConfig+0x520>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002016:	f7ff fa95 	bl	8001544 <HAL_GetTick>
 800201a:	1bc0      	subs	r0, r0, r7
 800201c:	2802      	cmp	r0, #2
 800201e:	d9f7      	bls.n	8002010 <HAL_RCC_OscConfig+0x50c>
            return HAL_TIMEOUT;
 8002020:	2003      	movs	r0, #3
 8002022:	e03c      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002024:	4a21      	ldr	r2, [pc, #132]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 8002026:	68d1      	ldr	r1, [r2, #12]
 8002028:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800202a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800202c:	4303      	orrs	r3, r0
 800202e:	4828      	ldr	r0, [pc, #160]	; (80020d0 <HAL_RCC_OscConfig+0x5cc>)
 8002030:	4001      	ands	r1, r0
 8002032:	430b      	orrs	r3, r1
 8002034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002036:	430b      	orrs	r3, r1
 8002038:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800203a:	6811      	ldr	r1, [r2, #0]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	045b      	lsls	r3, r3, #17
 8002040:	430b      	orrs	r3, r1
 8002042:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002044:	f7ff fa7e 	bl	8001544 <HAL_GetTick>
 8002048:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800204a:	4d18      	ldr	r5, [pc, #96]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 800204c:	2480      	movs	r4, #128	; 0x80
 800204e:	04a4      	lsls	r4, r4, #18
 8002050:	682b      	ldr	r3, [r5, #0]
 8002052:	4223      	tst	r3, r4
 8002054:	d106      	bne.n	8002064 <HAL_RCC_OscConfig+0x560>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002056:	f7ff fa75 	bl	8001544 <HAL_GetTick>
 800205a:	1b80      	subs	r0, r0, r6
 800205c:	2802      	cmp	r0, #2
 800205e:	d9f7      	bls.n	8002050 <HAL_RCC_OscConfig+0x54c>
            return HAL_TIMEOUT;
 8002060:	2003      	movs	r0, #3
 8002062:	e01c      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
  return HAL_OK;
 8002064:	2000      	movs	r0, #0
 8002066:	e01a      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
 8002068:	2000      	movs	r0, #0
 800206a:	e018      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
      pll_config = RCC->CFGR;
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_RCC_OscConfig+0x5a8>)
 800206e:	68da      	ldr	r2, [r3, #12]
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	4013      	ands	r3, r2
        return HAL_ERROR;
 8002076:	2001      	movs	r0, #1
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002078:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800207a:	428b      	cmp	r3, r1
 800207c:	d10f      	bne.n	800209e <HAL_RCC_OscConfig+0x59a>
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800207e:	23f0      	movs	r3, #240	; 0xf0
 8002080:	039b      	lsls	r3, r3, #14
 8002082:	4013      	ands	r3, r2
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002084:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002086:	428b      	cmp	r3, r1
 8002088:	d109      	bne.n	800209e <HAL_RCC_OscConfig+0x59a>
         (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800208a:	20c0      	movs	r0, #192	; 0xc0
 800208c:	0400      	lsls	r0, r0, #16
 800208e:	4002      	ands	r2, r0
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002090:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002092:	1a10      	subs	r0, r2, r0
 8002094:	1e42      	subs	r2, r0, #1
 8002096:	4190      	sbcs	r0, r2
    return HAL_ERROR;
 8002098:	b2c0      	uxtb	r0, r0
 800209a:	e000      	b.n	800209e <HAL_RCC_OscConfig+0x59a>
 800209c:	2001      	movs	r0, #1
}
 800209e:	b002      	add	sp, #8
 80020a0:	bc1c      	pop	{r2, r3, r4}
 80020a2:	4690      	mov	r8, r2
 80020a4:	4699      	mov	r9, r3
 80020a6:	46a2      	mov	sl, r4
 80020a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40007000 	.word	0x40007000
 80020b4:	fffffeff 	.word	0xfffffeff
 80020b8:	fffffbff 	.word	0xfffffbff
 80020bc:	00001388 	.word	0x00001388
 80020c0:	40010000 	.word	0x40010000
 80020c4:	efffffff 	.word	0xefffffff
 80020c8:	ffffdfff 	.word	0xffffdfff
 80020cc:	feffffff 	.word	0xfeffffff
 80020d0:	ff02ffff 	.word	0xff02ffff

080020d4 <HAL_RCC_ClockConfig>:
{
 80020d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d6:	46ce      	mov	lr, r9
 80020d8:	4647      	mov	r7, r8
 80020da:	b580      	push	{r7, lr}
 80020dc:	0004      	movs	r4, r0
 80020de:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80020e0:	2800      	cmp	r0, #0
 80020e2:	d100      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x12>
 80020e4:	e0c8      	b.n	8002278 <HAL_RCC_ClockConfig+0x1a4>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e6:	4b65      	ldr	r3, [pc, #404]	; (800227c <HAL_RCC_ClockConfig+0x1a8>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	2301      	movs	r3, #1
 80020ec:	4013      	ands	r3, r2
 80020ee:	428b      	cmp	r3, r1
 80020f0:	d20b      	bcs.n	800210a <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4962      	ldr	r1, [pc, #392]	; (800227c <HAL_RCC_ClockConfig+0x1a8>)
 80020f4:	680b      	ldr	r3, [r1, #0]
 80020f6:	2201      	movs	r2, #1
 80020f8:	4393      	bics	r3, r2
 80020fa:	432b      	orrs	r3, r5
 80020fc:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	680b      	ldr	r3, [r1, #0]
 8002100:	401a      	ands	r2, r3
      return HAL_ERROR;
 8002102:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002104:	4295      	cmp	r5, r2
 8002106:	d000      	beq.n	800210a <HAL_RCC_ClockConfig+0x36>
 8002108:	e0b2      	b.n	8002270 <HAL_RCC_ClockConfig+0x19c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	079b      	lsls	r3, r3, #30
 800210e:	d506      	bpl.n	800211e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002110:	4a5b      	ldr	r2, [pc, #364]	; (8002280 <HAL_RCC_ClockConfig+0x1ac>)
 8002112:	68d3      	ldr	r3, [r2, #12]
 8002114:	21f0      	movs	r1, #240	; 0xf0
 8002116:	438b      	bics	r3, r1
 8002118:	68a1      	ldr	r1, [r4, #8]
 800211a:	430b      	orrs	r3, r1
 800211c:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	07db      	lsls	r3, r3, #31
 8002122:	d571      	bpl.n	8002208 <HAL_RCC_ClockConfig+0x134>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002124:	6863      	ldr	r3, [r4, #4]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d029      	beq.n	800217e <HAL_RCC_ClockConfig+0xaa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212a:	2b03      	cmp	r3, #3
 800212c:	d02d      	beq.n	800218a <HAL_RCC_ClockConfig+0xb6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800212e:	2b01      	cmp	r3, #1
 8002130:	d031      	beq.n	8002196 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002132:	4a53      	ldr	r2, [pc, #332]	; (8002280 <HAL_RCC_ClockConfig+0x1ac>)
 8002134:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 8002136:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002138:	0592      	lsls	r2, r2, #22
 800213a:	d400      	bmi.n	800213e <HAL_RCC_ClockConfig+0x6a>
 800213c:	e098      	b.n	8002270 <HAL_RCC_ClockConfig+0x19c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4950      	ldr	r1, [pc, #320]	; (8002280 <HAL_RCC_ClockConfig+0x1ac>)
 8002140:	68ca      	ldr	r2, [r1, #12]
 8002142:	2003      	movs	r0, #3
 8002144:	4382      	bics	r2, r0
 8002146:	4313      	orrs	r3, r2
 8002148:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 800214a:	f7ff f9fb 	bl	8001544 <HAL_GetTick>
 800214e:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002150:	6863      	ldr	r3, [r4, #4]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d025      	beq.n	80021a2 <HAL_RCC_ClockConfig+0xce>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002156:	2b03      	cmp	r3, #3
 8002158:	d034      	beq.n	80021c4 <HAL_RCC_ClockConfig+0xf0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800215a:	2b01      	cmp	r3, #1
 800215c:	d043      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x112>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800215e:	4b48      	ldr	r3, [pc, #288]	; (8002280 <HAL_RCC_ClockConfig+0x1ac>)
 8002160:	4698      	mov	r8, r3
 8002162:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002164:	4b47      	ldr	r3, [pc, #284]	; (8002284 <HAL_RCC_ClockConfig+0x1b0>)
 8002166:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002168:	4643      	mov	r3, r8
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	421f      	tst	r7, r3
 800216e:	d04b      	beq.n	8002208 <HAL_RCC_ClockConfig+0x134>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002170:	f7ff f9e8 	bl	8001544 <HAL_GetTick>
 8002174:	1b80      	subs	r0, r0, r6
 8002176:	4548      	cmp	r0, r9
 8002178:	d9f6      	bls.n	8002168 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 800217a:	2003      	movs	r0, #3
 800217c:	e078      	b.n	8002270 <HAL_RCC_ClockConfig+0x19c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800217e:	4a40      	ldr	r2, [pc, #256]	; (8002280 <HAL_RCC_ClockConfig+0x1ac>)
 8002180:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 8002182:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002184:	0392      	lsls	r2, r2, #14
 8002186:	d4da      	bmi.n	800213e <HAL_RCC_ClockConfig+0x6a>
 8002188:	e072      	b.n	8002270 <HAL_RCC_ClockConfig+0x19c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800218a:	4a3d      	ldr	r2, [pc, #244]	; (8002280 <HAL_RCC_ClockConfig+0x1ac>)
 800218c:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 800218e:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002190:	0192      	lsls	r2, r2, #6
 8002192:	d4d4      	bmi.n	800213e <HAL_RCC_ClockConfig+0x6a>
 8002194:	e06c      	b.n	8002270 <HAL_RCC_ClockConfig+0x19c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002196:	4a3a      	ldr	r2, [pc, #232]	; (8002280 <HAL_RCC_ClockConfig+0x1ac>)
 8002198:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 800219a:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800219c:	0752      	lsls	r2, r2, #29
 800219e:	d4ce      	bmi.n	800213e <HAL_RCC_ClockConfig+0x6a>
 80021a0:	e066      	b.n	8002270 <HAL_RCC_ClockConfig+0x19c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a2:	4b37      	ldr	r3, [pc, #220]	; (8002280 <HAL_RCC_ClockConfig+0x1ac>)
 80021a4:	4698      	mov	r8, r3
 80021a6:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a8:	4b36      	ldr	r3, [pc, #216]	; (8002284 <HAL_RCC_ClockConfig+0x1b0>)
 80021aa:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ac:	4643      	mov	r3, r8
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	403b      	ands	r3, r7
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d028      	beq.n	8002208 <HAL_RCC_ClockConfig+0x134>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b6:	f7ff f9c5 	bl	8001544 <HAL_GetTick>
 80021ba:	1b80      	subs	r0, r0, r6
 80021bc:	4548      	cmp	r0, r9
 80021be:	d9f5      	bls.n	80021ac <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80021c0:	2003      	movs	r0, #3
 80021c2:	e055      	b.n	8002270 <HAL_RCC_ClockConfig+0x19c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c4:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <HAL_RCC_ClockConfig+0x1ac>)
 80021c6:	4698      	mov	r8, r3
 80021c8:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ca:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <HAL_RCC_ClockConfig+0x1b0>)
 80021cc:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ce:	4643      	mov	r3, r8
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	403b      	ands	r3, r7
 80021d4:	2b0c      	cmp	r3, #12
 80021d6:	d017      	beq.n	8002208 <HAL_RCC_ClockConfig+0x134>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7ff f9b4 	bl	8001544 <HAL_GetTick>
 80021dc:	1b80      	subs	r0, r0, r6
 80021de:	4548      	cmp	r0, r9
 80021e0:	d9f5      	bls.n	80021ce <HAL_RCC_ClockConfig+0xfa>
          return HAL_TIMEOUT;
 80021e2:	2003      	movs	r0, #3
 80021e4:	e044      	b.n	8002270 <HAL_RCC_ClockConfig+0x19c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021e6:	4b26      	ldr	r3, [pc, #152]	; (8002280 <HAL_RCC_ClockConfig+0x1ac>)
 80021e8:	4698      	mov	r8, r3
 80021ea:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <HAL_RCC_ClockConfig+0x1b0>)
 80021ee:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021f0:	4643      	mov	r3, r8
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	403b      	ands	r3, r7
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d006      	beq.n	8002208 <HAL_RCC_ClockConfig+0x134>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fa:	f7ff f9a3 	bl	8001544 <HAL_GetTick>
 80021fe:	1b80      	subs	r0, r0, r6
 8002200:	4548      	cmp	r0, r9
 8002202:	d9f5      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x11c>
          return HAL_TIMEOUT;
 8002204:	2003      	movs	r0, #3
 8002206:	e033      	b.n	8002270 <HAL_RCC_ClockConfig+0x19c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002208:	4b1c      	ldr	r3, [pc, #112]	; (800227c <HAL_RCC_ClockConfig+0x1a8>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	4013      	ands	r3, r2
 8002210:	429d      	cmp	r5, r3
 8002212:	d20a      	bcs.n	800222a <HAL_RCC_ClockConfig+0x156>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002214:	4919      	ldr	r1, [pc, #100]	; (800227c <HAL_RCC_ClockConfig+0x1a8>)
 8002216:	680b      	ldr	r3, [r1, #0]
 8002218:	2201      	movs	r2, #1
 800221a:	4393      	bics	r3, r2
 800221c:	432b      	orrs	r3, r5
 800221e:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002220:	680b      	ldr	r3, [r1, #0]
 8002222:	401a      	ands	r2, r3
      return HAL_ERROR;
 8002224:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4295      	cmp	r5, r2
 8002228:	d122      	bne.n	8002270 <HAL_RCC_ClockConfig+0x19c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	075b      	lsls	r3, r3, #29
 800222e:	d506      	bpl.n	800223e <HAL_RCC_ClockConfig+0x16a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002230:	4a13      	ldr	r2, [pc, #76]	; (8002280 <HAL_RCC_ClockConfig+0x1ac>)
 8002232:	68d3      	ldr	r3, [r2, #12]
 8002234:	4914      	ldr	r1, [pc, #80]	; (8002288 <HAL_RCC_ClockConfig+0x1b4>)
 8002236:	400b      	ands	r3, r1
 8002238:	68e1      	ldr	r1, [r4, #12]
 800223a:	430b      	orrs	r3, r1
 800223c:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	071b      	lsls	r3, r3, #28
 8002242:	d507      	bpl.n	8002254 <HAL_RCC_ClockConfig+0x180>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002244:	490e      	ldr	r1, [pc, #56]	; (8002280 <HAL_RCC_ClockConfig+0x1ac>)
 8002246:	68ca      	ldr	r2, [r1, #12]
 8002248:	6923      	ldr	r3, [r4, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	480f      	ldr	r0, [pc, #60]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 800224e:	4002      	ands	r2, r0
 8002250:	4313      	orrs	r3, r2
 8002252:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002254:	f7ff fc10 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x1ac>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	0f1b      	lsrs	r3, r3, #28
 8002260:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	5cd3      	ldrb	r3, [r2, r3]
 8002264:	40d8      	lsrs	r0, r3
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800226a:	2003      	movs	r0, #3
 800226c:	f7ff f936 	bl	80014dc <HAL_InitTick>
}
 8002270:	bc0c      	pop	{r2, r3}
 8002272:	4690      	mov	r8, r2
 8002274:	4699      	mov	r9, r3
 8002276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002278:	2001      	movs	r0, #1
 800227a:	e7f9      	b.n	8002270 <HAL_RCC_ClockConfig+0x19c>
 800227c:	40022000 	.word	0x40022000
 8002280:	40021000 	.word	0x40021000
 8002284:	00001388 	.word	0x00001388
 8002288:	fffff8ff 	.word	0xfffff8ff
 800228c:	ffffc7ff 	.word	0xffffc7ff
 8002290:	08004c8c 	.word	0x08004c8c
 8002294:	20000000 	.word	0x20000000

08002298 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	055b      	lsls	r3, r3, #21
 800229e:	0f5b      	lsrs	r3, r3, #29
 80022a0:	4a03      	ldr	r2, [pc, #12]	; (80022b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	4a03      	ldr	r2, [pc, #12]	; (80022b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80022a6:	6810      	ldr	r0, [r2, #0]
 80022a8:	40d8      	lsrs	r0, r3
}
 80022aa:	4770      	bx	lr
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08004c9c 	.word	0x08004c9c
 80022b4:	20000000 	.word	0x20000000

080022b8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	049b      	lsls	r3, r3, #18
 80022be:	0f5b      	lsrs	r3, r3, #29
 80022c0:	4a03      	ldr	r2, [pc, #12]	; (80022d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	4a03      	ldr	r2, [pc, #12]	; (80022d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80022c6:	6810      	ldr	r0, [r2, #0]
 80022c8:	40d8      	lsrs	r0, r3
}
 80022ca:	4770      	bx	lr
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08004c9c 	.word	0x08004c9c
 80022d4:	20000000 	.word	0x20000000

080022d8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022da:	46d6      	mov	lr, sl
 80022dc:	464f      	mov	r7, r9
 80022de:	4646      	mov	r6, r8
 80022e0:	b5c0      	push	{r6, r7, lr}
 80022e2:	0004      	movs	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80022e4:	2382      	movs	r3, #130	; 0x82
 80022e6:	011b      	lsls	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022e8:	6802      	ldr	r2, [r0, #0]
 80022ea:	421a      	tst	r2, r3
 80022ec:	d035      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x82>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ee:	4b79      	ldr	r3, [pc, #484]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80022f2:	2200      	movs	r2, #0
 80022f4:	4692      	mov	sl, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	d407      	bmi.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	4a76      	ldr	r2, [pc, #472]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80022fc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	055b      	lsls	r3, r3, #21
 8002302:	430b      	orrs	r3, r1
 8002304:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8002306:	2301      	movs	r3, #1
 8002308:	469a      	mov	sl, r3
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230a:	4b73      	ldr	r3, [pc, #460]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	05db      	lsls	r3, r3, #23
 8002310:	d565      	bpl.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x106>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002312:	4b70      	ldr	r3, [pc, #448]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002314:	6819      	ldr	r1, [r3, #0]
 8002316:	23c0      	movs	r3, #192	; 0xc0
 8002318:	039b      	lsls	r3, r3, #14
 800231a:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800231c:	6862      	ldr	r2, [r4, #4]
 800231e:	4013      	ands	r3, r2
 8002320:	4299      	cmp	r1, r3
 8002322:	d100      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002324:	e072      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x134>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002326:	23c0      	movs	r3, #192	; 0xc0
 8002328:	029b      	lsls	r3, r3, #10
 800232a:	0011      	movs	r1, r2
 800232c:	4019      	ands	r1, r3
 800232e:	4299      	cmp	r1, r3
 8002330:	d100      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002332:	e079      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x150>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002334:	4b67      	ldr	r3, [pc, #412]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002338:	21c0      	movs	r1, #192	; 0xc0
 800233a:	0289      	lsls	r1, r1, #10
 800233c:	400b      	ands	r3, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800233e:	d000      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002340:	e07d      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002342:	4a64      	ldr	r2, [pc, #400]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002344:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8002346:	23c0      	movs	r3, #192	; 0xc0
 8002348:	029b      	lsls	r3, r3, #10
 800234a:	6860      	ldr	r0, [r4, #4]
 800234c:	4003      	ands	r3, r0
 800234e:	430b      	orrs	r3, r1
 8002350:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002352:	4653      	mov	r3, sl
 8002354:	2b01      	cmp	r3, #1
 8002356:	d100      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x82>
 8002358:	e0b7      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800235a:	6823      	ldr	r3, [r4, #0]
 800235c:	07db      	lsls	r3, r3, #31
 800235e:	d506      	bpl.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002360:	4a5c      	ldr	r2, [pc, #368]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002362:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002364:	2103      	movs	r1, #3
 8002366:	438b      	bics	r3, r1
 8002368:	68e1      	ldr	r1, [r4, #12]
 800236a:	430b      	orrs	r3, r1
 800236c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	079b      	lsls	r3, r3, #30
 8002372:	d506      	bpl.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002374:	4a57      	ldr	r2, [pc, #348]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002376:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002378:	210c      	movs	r1, #12
 800237a:	438b      	bics	r3, r1
 800237c:	6921      	ldr	r1, [r4, #16]
 800237e:	430b      	orrs	r3, r1
 8002380:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	075b      	lsls	r3, r3, #29
 8002386:	d506      	bpl.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002388:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800238a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800238c:	4953      	ldr	r1, [pc, #332]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800238e:	400b      	ands	r3, r1
 8002390:	6961      	ldr	r1, [r4, #20]
 8002392:	430b      	orrs	r3, r1
 8002394:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	071b      	lsls	r3, r3, #28
 800239a:	d506      	bpl.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800239c:	4a4d      	ldr	r2, [pc, #308]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800239e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80023a0:	494f      	ldr	r1, [pc, #316]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80023a2:	400b      	ands	r3, r1
 80023a4:	69a1      	ldr	r1, [r4, #24]
 80023a6:	430b      	orrs	r3, r1
 80023a8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	065b      	lsls	r3, r3, #25
 80023ae:	d506      	bpl.n	80023be <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023b0:	4a48      	ldr	r2, [pc, #288]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80023b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80023b4:	494b      	ldr	r1, [pc, #300]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80023b6:	400b      	ands	r3, r1
 80023b8:	6a21      	ldr	r1, [r4, #32]
 80023ba:	430b      	orrs	r3, r1
 80023bc:	64d3      	str	r3, [r2, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80023be:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	061b      	lsls	r3, r3, #24
 80023c4:	d506      	bpl.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80023c6:	4a43      	ldr	r2, [pc, #268]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80023c8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80023ca:	4947      	ldr	r1, [pc, #284]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80023cc:	400b      	ands	r3, r1
 80023ce:	69e1      	ldr	r1, [r4, #28]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80023d4:	bc1c      	pop	{r2, r3, r4}
 80023d6:	4690      	mov	r8, r2
 80023d8:	4699      	mov	r9, r3
 80023da:	46a2      	mov	sl, r4
 80023dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023de:	4a3e      	ldr	r2, [pc, #248]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023e0:	6811      	ldr	r1, [r2, #0]
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	430b      	orrs	r3, r1
 80023e8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80023ea:	f7ff f8ab 	bl	8001544 <HAL_GetTick>
 80023ee:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	4f39      	ldr	r7, [pc, #228]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023f2:	2680      	movs	r6, #128	; 0x80
 80023f4:	0076      	lsls	r6, r6, #1
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	4233      	tst	r3, r6
 80023fa:	d000      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x126>
 80023fc:	e789      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fe:	f7ff f8a1 	bl	8001544 <HAL_GetTick>
 8002402:	1b40      	subs	r0, r0, r5
 8002404:	2864      	cmp	r0, #100	; 0x64
 8002406:	d9f6      	bls.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
          return HAL_TIMEOUT;
 8002408:	2003      	movs	r0, #3
 800240a:	e7e3      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800240c:	23c0      	movs	r3, #192	; 0xc0
 800240e:	039b      	lsls	r3, r3, #14
 8002410:	68a0      	ldr	r0, [r4, #8]
 8002412:	4003      	ands	r3, r0
 8002414:	4299      	cmp	r1, r3
 8002416:	d000      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002418:	e785      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800241a:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800241c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241e:	21c0      	movs	r1, #192	; 0xc0
 8002420:	0289      	lsls	r1, r1, #10
 8002422:	400b      	ands	r3, r1
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002424:	d10b      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002426:	e02b      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002428:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800242a:	681b      	ldr	r3, [r3, #0]
          return HAL_ERROR;
 800242c:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800242e:	039b      	lsls	r3, r3, #14
 8002430:	d4d0      	bmi.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002432:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002436:	21c0      	movs	r1, #192	; 0xc0
 8002438:	0289      	lsls	r1, r1, #10
 800243a:	400b      	ands	r3, r1
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800243c:	d028      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800243e:	21c0      	movs	r1, #192	; 0xc0
 8002440:	0289      	lsls	r1, r1, #10
 8002442:	400a      	ands	r2, r1
 8002444:	429a      	cmp	r2, r3
 8002446:	d002      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x176>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002448:	6822      	ldr	r2, [r4, #0]
 800244a:	0692      	lsls	r2, r2, #26
 800244c:	d408      	bmi.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x188>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800244e:	22c0      	movs	r2, #192	; 0xc0
 8002450:	0292      	lsls	r2, r2, #10
 8002452:	68a1      	ldr	r1, [r4, #8]
 8002454:	400a      	ands	r2, r1
 8002456:	429a      	cmp	r2, r3
 8002458:	d012      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	051b      	lsls	r3, r3, #20
 800245e:	d50f      	bpl.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002460:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002462:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002464:	4a21      	ldr	r2, [pc, #132]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002466:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8002468:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 800246a:	2180      	movs	r1, #128	; 0x80
 800246c:	0309      	lsls	r1, r1, #12
 800246e:	4331      	orrs	r1, r6
 8002470:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002472:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002474:	4e1e      	ldr	r6, [pc, #120]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002476:	4031      	ands	r1, r6
 8002478:	6519      	str	r1, [r3, #80]	; 0x50
      RCC->CSR = temp_reg;
 800247a:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800247c:	05c3      	lsls	r3, r0, #23
 800247e:	d411      	bmi.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002480:	6862      	ldr	r2, [r4, #4]
 8002482:	23c0      	movs	r3, #192	; 0xc0
 8002484:	029b      	lsls	r3, r3, #10
 8002486:	0011      	movs	r1, r2
 8002488:	4019      	ands	r1, r3
 800248a:	4299      	cmp	r1, r3
 800248c:	d000      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800248e:	e758      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002490:	4810      	ldr	r0, [pc, #64]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002492:	6803      	ldr	r3, [r0, #0]
 8002494:	4917      	ldr	r1, [pc, #92]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002496:	400b      	ands	r3, r1
 8002498:	21c0      	movs	r1, #192	; 0xc0
 800249a:	0389      	lsls	r1, r1, #14
 800249c:	400a      	ands	r2, r1
 800249e:	431a      	orrs	r2, r3
 80024a0:	6002      	str	r2, [r0, #0]
 80024a2:	e74e      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x6a>
        tickstart = HAL_GetTick();
 80024a4:	f7ff f84e 	bl	8001544 <HAL_GetTick>
 80024a8:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024aa:	4f0a      	ldr	r7, [pc, #40]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80024ac:	2680      	movs	r6, #128	; 0x80
 80024ae:	00b6      	lsls	r6, r6, #2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80024b2:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b6:	4233      	tst	r3, r6
 80024b8:	d1e2      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7ff f843 	bl	8001544 <HAL_GetTick>
 80024be:	464b      	mov	r3, r9
 80024c0:	1ac0      	subs	r0, r0, r3
 80024c2:	4540      	cmp	r0, r8
 80024c4:	d9f6      	bls.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
            return HAL_TIMEOUT;
 80024c6:	2003      	movs	r0, #3
 80024c8:	e784      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80024cc:	490b      	ldr	r1, [pc, #44]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024ce:	400b      	ands	r3, r1
 80024d0:	6393      	str	r3, [r2, #56]	; 0x38
 80024d2:	e742      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x82>
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
 80024dc:	fffff3ff 	.word	0xfffff3ff
 80024e0:	ffffcfff 	.word	0xffffcfff
 80024e4:	fbffffff 	.word	0xfbffffff
 80024e8:	fff3ffff 	.word	0xfff3ffff
 80024ec:	fffcffff 	.word	0xfffcffff
 80024f0:	fff7ffff 	.word	0xfff7ffff
 80024f4:	ffcfffff 	.word	0xffcfffff
 80024f8:	00001388 	.word	0x00001388
 80024fc:	efffffff 	.word	0xefffffff

08002500 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002500:	b510      	push	{r4, lr}
 8002502:	1e04      	subs	r4, r0, #0
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002504:	d013      	beq.n	800252e <HAL_RNG_Init+0x2e>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002506:	7943      	ldrb	r3, [r0, #5]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00c      	beq.n	8002526 <HAL_RNG_Init+0x26>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800250c:	2302      	movs	r3, #2
 800250e:	7163      	strb	r3, [r4, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002510:	6822      	ldr	r2, [r4, #0]
 8002512:	6813      	ldr	r3, [r2, #0]
 8002514:	2104      	movs	r1, #4
 8002516:	430b      	orrs	r3, r1
 8002518:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800251a:	2301      	movs	r3, #1
 800251c:	7163      	strb	r3, [r4, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800251e:	2300      	movs	r3, #0
 8002520:	60a3      	str	r3, [r4, #8]

  /* Return function status */
  return HAL_OK;
 8002522:	2000      	movs	r0, #0
}
 8002524:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 8002526:	7103      	strb	r3, [r0, #4]
    HAL_RNG_MspInit(hrng);
 8002528:	f7fe fc22 	bl	8000d70 <HAL_RNG_MspInit>
 800252c:	e7ee      	b.n	800250c <HAL_RNG_Init+0xc>
    return HAL_ERROR;
 800252e:	2001      	movs	r0, #1
 8002530:	e7f8      	b.n	8002524 <HAL_RNG_Init+0x24>

08002532 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002534:	0004      	movs	r4, r0
 8002536:	000d      	movs	r5, r1
  uint32_t tickstart;    
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002538:	7903      	ldrb	r3, [r0, #4]
 800253a:	2002      	movs	r0, #2
 800253c:	2b01      	cmp	r3, #1
 800253e:	d007      	beq.n	8002550 <HAL_RNG_GenerateRandomNumber+0x1e>
 8002540:	2301      	movs	r3, #1
 8002542:	7123      	strb	r3, [r4, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002544:	7963      	ldrb	r3, [r4, #5]

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    status = HAL_ERROR;
 8002546:	3801      	subs	r0, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 8002548:	2b01      	cmp	r3, #1
 800254a:	d002      	beq.n	8002552 <HAL_RNG_GenerateRandomNumber+0x20>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800254c:	2300      	movs	r3, #0
 800254e:	7123      	strb	r3, [r4, #4]

  return status;
}
 8002550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8002552:	3301      	adds	r3, #1
 8002554:	7163      	strb	r3, [r4, #5]
    tickstart = HAL_GetTick();
 8002556:	f7fe fff5 	bl	8001544 <HAL_GetTick>
 800255a:	0007      	movs	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800255c:	2601      	movs	r6, #1
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	4216      	tst	r6, r2
 8002564:	d10e      	bne.n	8002584 <HAL_RNG_GenerateRandomNumber+0x52>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002566:	f7fe ffed 	bl	8001544 <HAL_GetTick>
 800256a:	1bc0      	subs	r0, r0, r7
 800256c:	2802      	cmp	r0, #2
 800256e:	d9f6      	bls.n	800255e <HAL_RNG_GenerateRandomNumber+0x2c>
        hrng->State = HAL_RNG_STATE_READY;
 8002570:	2301      	movs	r3, #1
 8002572:	7163      	strb	r3, [r4, #5]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8002574:	68a3      	ldr	r3, [r4, #8]
 8002576:	2202      	movs	r2, #2
 8002578:	4313      	orrs	r3, r2
 800257a:	60a3      	str	r3, [r4, #8]
        __HAL_UNLOCK(hrng);
 800257c:	2300      	movs	r3, #0
 800257e:	7123      	strb	r3, [r4, #4]
        return HAL_ERROR;
 8002580:	2001      	movs	r0, #1
 8002582:	e7e5      	b.n	8002550 <HAL_RNG_GenerateRandomNumber+0x1e>
    hrng->RandomNumber = hrng->Instance->DR;
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	60e3      	str	r3, [r4, #12]
    *random32bit = hrng->RandomNumber;
 8002588:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800258a:	2301      	movs	r3, #1
 800258c:	7163      	strb	r3, [r4, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800258e:	2000      	movs	r0, #0
 8002590:	e7dc      	b.n	800254c <HAL_RNG_GenerateRandomNumber+0x1a>
	...

08002594 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	1e04      	subs	r4, r0, #0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002598:	d03b      	beq.n	8002612 <HAL_SPI_Init+0x7e>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800259e:	3351      	adds	r3, #81	; 0x51
 80025a0:	5cc3      	ldrb	r3, [r0, r3]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d02f      	beq.n	8002606 <HAL_SPI_Init+0x72>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025a6:	2151      	movs	r1, #81	; 0x51
 80025a8:	2302      	movs	r3, #2
 80025aa:	5463      	strb	r3, [r4, r1]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025ac:	6822      	ldr	r2, [r4, #0]
 80025ae:	6813      	ldr	r3, [r2, #0]
 80025b0:	2040      	movs	r0, #64	; 0x40
 80025b2:	4383      	bics	r3, r0
 80025b4:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	6863      	ldr	r3, [r4, #4]
 80025ba:	68a0      	ldr	r0, [r4, #8]
 80025bc:	4303      	orrs	r3, r0
 80025be:	68e0      	ldr	r0, [r4, #12]
 80025c0:	4303      	orrs	r3, r0
 80025c2:	6920      	ldr	r0, [r4, #16]
 80025c4:	4303      	orrs	r3, r0
 80025c6:	6960      	ldr	r0, [r4, #20]
 80025c8:	4303      	orrs	r3, r0
 80025ca:	69e0      	ldr	r0, [r4, #28]
 80025cc:	4303      	orrs	r3, r0
 80025ce:	6a20      	ldr	r0, [r4, #32]
 80025d0:	4303      	orrs	r3, r0
 80025d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80025d4:	4303      	orrs	r3, r0
 80025d6:	2080      	movs	r0, #128	; 0x80
 80025d8:	0080      	lsls	r0, r0, #2
 80025da:	69a5      	ldr	r5, [r4, #24]
 80025dc:	4028      	ands	r0, r5
 80025de:	4303      	orrs	r3, r0
 80025e0:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80025e2:	6822      	ldr	r2, [r4, #0]
 80025e4:	8b60      	ldrh	r0, [r4, #26]
 80025e6:	2304      	movs	r3, #4
 80025e8:	4003      	ands	r3, r0
 80025ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80025ec:	4303      	orrs	r3, r0
 80025ee:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025f0:	6822      	ldr	r2, [r4, #0]
 80025f2:	69d3      	ldr	r3, [r2, #28]
 80025f4:	4808      	ldr	r0, [pc, #32]	; (8002618 <HAL_SPI_Init+0x84>)
 80025f6:	4003      	ands	r3, r0
 80025f8:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025fe:	3301      	adds	r3, #1
 8002600:	5463      	strb	r3, [r4, r1]

  return HAL_OK;
 8002602:	2000      	movs	r0, #0
}
 8002604:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002606:	2200      	movs	r2, #0
 8002608:	3350      	adds	r3, #80	; 0x50
 800260a:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 800260c:	f7fe fbc6 	bl	8000d9c <HAL_SPI_MspInit>
 8002610:	e7c9      	b.n	80025a6 <HAL_SPI_Init+0x12>
    return HAL_ERROR;
 8002612:	2001      	movs	r0, #1
 8002614:	e7f6      	b.n	8002604 <HAL_SPI_Init+0x70>
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	fffff7ff 	.word	0xfffff7ff

0800261c <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 800261c:	b570      	push	{r4, r5, r6, lr}
  uint32_t groups = 0UL;
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800261e:	2300      	movs	r3, #0
  uint32_t groups = 0UL;
 8002620:	2100      	movs	r1, #0
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8002622:	240f      	movs	r4, #15
    {
      groups |= (1UL << idx);
 8002624:	2501      	movs	r5, #1
 8002626:	e002      	b.n	800262e <TSC_extract_groups+0x12>
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002628:	3301      	adds	r3, #1
 800262a:	2b08      	cmp	r3, #8
 800262c:	d008      	beq.n	8002640 <TSC_extract_groups+0x24>
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 800262e:	009a      	lsls	r2, r3, #2
 8002630:	0026      	movs	r6, r4
 8002632:	4096      	lsls	r6, r2
 8002634:	4230      	tst	r0, r6
 8002636:	d0f7      	beq.n	8002628 <TSC_extract_groups+0xc>
      groups |= (1UL << idx);
 8002638:	002a      	movs	r2, r5
 800263a:	409a      	lsls	r2, r3
 800263c:	4311      	orrs	r1, r2
 800263e:	e7f3      	b.n	8002628 <TSC_extract_groups+0xc>
    }
  }

  return groups;
}
 8002640:	0008      	movs	r0, r1
 8002642:	bd70      	pop	{r4, r5, r6, pc}

08002644 <HAL_TSC_Init>:
{
 8002644:	b570      	push	{r4, r5, r6, lr}
 8002646:	1e04      	subs	r4, r0, #0
  if (htsc == NULL)
 8002648:	d04e      	beq.n	80026e8 <HAL_TSC_Init+0xa4>
  if (htsc->State == HAL_TSC_STATE_RESET)
 800264a:	233c      	movs	r3, #60	; 0x3c
 800264c:	5cc3      	ldrb	r3, [r0, r3]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d03d      	beq.n	80026ce <HAL_TSC_Init+0x8a>
  htsc->State = HAL_TSC_STATE_BUSY;
 8002652:	2202      	movs	r2, #2
 8002654:	233c      	movs	r3, #60	; 0x3c
 8002656:	54e2      	strb	r2, [r4, r3]
  htsc->Instance->CR = TSC_CR_TSCE;
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	3a01      	subs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800265e:	6821      	ldr	r1, [r4, #0]
 8002660:	680a      	ldr	r2, [r1, #0]
 8002662:	6863      	ldr	r3, [r4, #4]
 8002664:	68a0      	ldr	r0, [r4, #8]
 8002666:	4303      	orrs	r3, r0
 8002668:	6960      	ldr	r0, [r4, #20]
 800266a:	4303      	orrs	r3, r0
 800266c:	69a0      	ldr	r0, [r4, #24]
 800266e:	4303      	orrs	r3, r0
 8002670:	69e0      	ldr	r0, [r4, #28]
 8002672:	4303      	orrs	r3, r0
 8002674:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002676:	4303      	orrs	r3, r0
 8002678:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800267a:	4303      	orrs	r3, r0
 800267c:	4313      	orrs	r3, r2
                         (uint32_t)(htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800267e:	6922      	ldr	r2, [r4, #16]
 8002680:	0452      	lsls	r2, r2, #17
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
  if ((FunctionalState)htsc->Init.SpreadSpectrum == ENABLE)
 8002686:	7b23      	ldrb	r3, [r4, #12]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d026      	beq.n	80026da <HAL_TSC_Init+0x96>
  htsc->Instance->IOHCR = (uint32_t)(~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800268c:	6822      	ldr	r2, [r4, #0]
 800268e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002692:	430b      	orrs	r3, r1
 8002694:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002696:	430b      	orrs	r3, r1
 8002698:	43db      	mvns	r3, r3
 800269a:	6113      	str	r3, [r2, #16]
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 800269c:	6822      	ldr	r2, [r4, #0]
 800269e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026a2:	430b      	orrs	r3, r1
 80026a4:	6293      	str	r3, [r2, #40]	; 0x28
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80026aa:	621a      	str	r2, [r3, #32]
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 80026ac:	6825      	ldr	r5, [r4, #0]
 80026ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80026b0:	f7ff ffb4 	bl	800261c <TSC_extract_groups>
 80026b4:	6328      	str	r0, [r5, #48]	; 0x30
  htsc->Instance->IER &= (uint32_t)(~(TSC_IT_EOA | TSC_IT_MCE));
 80026b6:	6821      	ldr	r1, [r4, #0]
 80026b8:	684b      	ldr	r3, [r1, #4]
 80026ba:	2203      	movs	r2, #3
 80026bc:	4393      	bics	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	609a      	str	r2, [r3, #8]
  htsc->State = HAL_TSC_STATE_READY;
 80026c4:	3a02      	subs	r2, #2
 80026c6:	233c      	movs	r3, #60	; 0x3c
 80026c8:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80026ca:	2000      	movs	r0, #0
}
 80026cc:	bd70      	pop	{r4, r5, r6, pc}
    htsc->Lock = HAL_UNLOCKED;
 80026ce:	2200      	movs	r2, #0
 80026d0:	333d      	adds	r3, #61	; 0x3d
 80026d2:	54c2      	strb	r2, [r0, r3]
    HAL_TSC_MspInit(htsc);
 80026d4:	f7fe fbc0 	bl	8000e58 <HAL_TSC_MspInit>
 80026d8:	e7bb      	b.n	8002652 <HAL_TSC_Init+0xe>
    htsc->Instance->CR |= TSC_CR_SSE;
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	6811      	ldr	r1, [r2, #0]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	025b      	lsls	r3, r3, #9
 80026e2:	430b      	orrs	r3, r1
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e7d1      	b.n	800268c <HAL_TSC_Init+0x48>
    return HAL_ERROR;
 80026e8:	2001      	movs	r0, #1
 80026ea:	e7ef      	b.n	80026cc <HAL_TSC_Init+0x88>

080026ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026ec:	b5d0      	push	{r4, r6, r7, lr}
 80026ee:	0004      	movs	r4, r0
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80026f0:	6801      	ldr	r1, [r0, #0]
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026f2:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026f4:	6883      	ldr	r3, [r0, #8]
 80026f6:	6900      	ldr	r0, [r0, #16]
 80026f8:	4303      	orrs	r3, r0
 80026fa:	6960      	ldr	r0, [r4, #20]
 80026fc:	4303      	orrs	r3, r0
 80026fe:	69e0      	ldr	r0, [r4, #28]
 8002700:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002702:	48c0      	ldr	r0, [pc, #768]	; (8002a04 <UART_SetConfig+0x318>)
 8002704:	4002      	ands	r2, r0
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800270a:	6822      	ldr	r2, [r4, #0]
 800270c:	6853      	ldr	r3, [r2, #4]
 800270e:	49be      	ldr	r1, [pc, #760]	; (8002a08 <UART_SetConfig+0x31c>)
 8002710:	400b      	ands	r3, r1
 8002712:	68e1      	ldr	r1, [r4, #12]
 8002714:	430b      	orrs	r3, r1
 8002716:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002718:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800271a:	6822      	ldr	r2, [r4, #0]
 800271c:	4bbb      	ldr	r3, [pc, #748]	; (8002a0c <UART_SetConfig+0x320>)
 800271e:	429a      	cmp	r2, r3
 8002720:	d001      	beq.n	8002726 <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002722:	6a23      	ldr	r3, [r4, #32]
 8002724:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002726:	6893      	ldr	r3, [r2, #8]
 8002728:	48b9      	ldr	r0, [pc, #740]	; (8002a10 <UART_SetConfig+0x324>)
 800272a:	4003      	ands	r3, r0
 800272c:	430b      	orrs	r3, r1
 800272e:	6093      	str	r3, [r2, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002730:	6822      	ldr	r2, [r4, #0]
 8002732:	4bb8      	ldr	r3, [pc, #736]	; (8002a14 <UART_SetConfig+0x328>)
 8002734:	429a      	cmp	r2, r3
 8002736:	d013      	beq.n	8002760 <UART_SetConfig+0x74>
 8002738:	4bb7      	ldr	r3, [pc, #732]	; (8002a18 <UART_SetConfig+0x32c>)
 800273a:	429a      	cmp	r2, r3
 800273c:	d022      	beq.n	8002784 <UART_SetConfig+0x98>
 800273e:	49b3      	ldr	r1, [pc, #716]	; (8002a0c <UART_SetConfig+0x320>)
 8002740:	2310      	movs	r3, #16
 8002742:	428a      	cmp	r2, r1
 8002744:	d033      	beq.n	80027ae <UART_SetConfig+0xc2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002746:	2280      	movs	r2, #128	; 0x80
 8002748:	0212      	lsls	r2, r2, #8
 800274a:	69e1      	ldr	r1, [r4, #28]
 800274c:	4291      	cmp	r1, r2
 800274e:	d100      	bne.n	8002752 <UART_SetConfig+0x66>
 8002750:	e08a      	b.n	8002868 <UART_SetConfig+0x17c>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8002752:	2b08      	cmp	r3, #8
 8002754:	d900      	bls.n	8002758 <UART_SetConfig+0x6c>
 8002756:	e146      	b.n	80029e6 <UART_SetConfig+0x2fa>
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4ab0      	ldr	r2, [pc, #704]	; (8002a1c <UART_SetConfig+0x330>)
 800275c:	58d3      	ldr	r3, [r2, r3]
 800275e:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002760:	4baf      	ldr	r3, [pc, #700]	; (8002a20 <UART_SetConfig+0x334>)
 8002762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002764:	2103      	movs	r1, #3
 8002766:	4019      	ands	r1, r3
 8002768:	2901      	cmp	r1, #1
 800276a:	d009      	beq.n	8002780 <UART_SetConfig+0x94>
 800276c:	2900      	cmp	r1, #0
 800276e:	d038      	beq.n	80027e2 <UART_SetConfig+0xf6>
 8002770:	2902      	cmp	r1, #2
 8002772:	d100      	bne.n	8002776 <UART_SetConfig+0x8a>
 8002774:	e142      	b.n	80029fc <UART_SetConfig+0x310>
 8002776:	2308      	movs	r3, #8
 8002778:	2903      	cmp	r1, #3
 800277a:	d0e4      	beq.n	8002746 <UART_SetConfig+0x5a>
 800277c:	2310      	movs	r3, #16
 800277e:	e7e2      	b.n	8002746 <UART_SetConfig+0x5a>
 8002780:	2304      	movs	r3, #4
 8002782:	e7e0      	b.n	8002746 <UART_SetConfig+0x5a>
 8002784:	4ba6      	ldr	r3, [pc, #664]	; (8002a20 <UART_SetConfig+0x334>)
 8002786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002788:	210c      	movs	r1, #12
 800278a:	4019      	ands	r1, r3
 800278c:	2904      	cmp	r1, #4
 800278e:	d00c      	beq.n	80027aa <UART_SetConfig+0xbe>
 8002790:	d906      	bls.n	80027a0 <UART_SetConfig+0xb4>
 8002792:	2302      	movs	r3, #2
 8002794:	2908      	cmp	r1, #8
 8002796:	d0d6      	beq.n	8002746 <UART_SetConfig+0x5a>
 8002798:	3306      	adds	r3, #6
 800279a:	290c      	cmp	r1, #12
 800279c:	d0d3      	beq.n	8002746 <UART_SetConfig+0x5a>
 800279e:	e002      	b.n	80027a6 <UART_SetConfig+0xba>
 80027a0:	2300      	movs	r3, #0
 80027a2:	2900      	cmp	r1, #0
 80027a4:	d01e      	beq.n	80027e4 <UART_SetConfig+0xf8>
 80027a6:	2310      	movs	r3, #16
 80027a8:	e7cd      	b.n	8002746 <UART_SetConfig+0x5a>
 80027aa:	2304      	movs	r3, #4
 80027ac:	e7cb      	b.n	8002746 <UART_SetConfig+0x5a>
 80027ae:	4b9c      	ldr	r3, [pc, #624]	; (8002a20 <UART_SetConfig+0x334>)
 80027b0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80027b2:	23c0      	movs	r3, #192	; 0xc0
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	4019      	ands	r1, r3
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4299      	cmp	r1, r3
 80027be:	d04f      	beq.n	8002860 <UART_SetConfig+0x174>
 80027c0:	d90a      	bls.n	80027d8 <UART_SetConfig+0xec>
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	4299      	cmp	r1, r3
 80027c8:	d043      	beq.n	8002852 <UART_SetConfig+0x166>
 80027ca:	23c0      	movs	r3, #192	; 0xc0
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	4299      	cmp	r1, r3
 80027d0:	d105      	bne.n	80027de <UART_SetConfig+0xf2>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	e011      	b.n	80027fc <UART_SetConfig+0x110>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027d8:	2300      	movs	r3, #0
 80027da:	2900      	cmp	r1, #0
 80027dc:	d002      	beq.n	80027e4 <UART_SetConfig+0xf8>
        ret = HAL_ERROR;
 80027de:	2001      	movs	r0, #1
 80027e0:	e0bc      	b.n	800295c <UART_SetConfig+0x270>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027e2:	2301      	movs	r3, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 80027e4:	4989      	ldr	r1, [pc, #548]	; (8002a0c <UART_SetConfig+0x320>)
 80027e6:	428a      	cmp	r2, r1
 80027e8:	d1ad      	bne.n	8002746 <UART_SetConfig+0x5a>
    switch (clocksource)
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d031      	beq.n	8002852 <UART_SetConfig+0x166>
 80027ee:	d828      	bhi.n	8002842 <UART_SetConfig+0x156>
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d000      	beq.n	80027f6 <UART_SetConfig+0x10a>
 80027f4:	e0fa      	b.n	80029ec <UART_SetConfig+0x300>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80027f6:	f7ff fd4f 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 80027fa:	0003      	movs	r3, r0
    if (lpuart_ker_ck_pres != 0U)
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d100      	bne.n	8002802 <UART_SetConfig+0x116>
 8002800:	e0f6      	b.n	80029f0 <UART_SetConfig+0x304>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002802:	6862      	ldr	r2, [r4, #4]
 8002804:	0051      	lsls	r1, r2, #1
 8002806:	1889      	adds	r1, r1, r2
        ret = HAL_ERROR;
 8002808:	2001      	movs	r0, #1
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800280a:	4299      	cmp	r1, r3
 800280c:	d900      	bls.n	8002810 <UART_SetConfig+0x124>
 800280e:	e0a5      	b.n	800295c <UART_SetConfig+0x270>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002810:	0311      	lsls	r1, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002812:	4299      	cmp	r1, r3
 8002814:	d200      	bcs.n	8002818 <UART_SetConfig+0x12c>
 8002816:	e0a1      	b.n	800295c <UART_SetConfig+0x270>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002818:	0e19      	lsrs	r1, r3, #24
 800281a:	0218      	lsls	r0, r3, #8
 800281c:	0856      	lsrs	r6, r2, #1
 800281e:	2700      	movs	r7, #0
 8002820:	1980      	adds	r0, r0, r6
 8002822:	4179      	adcs	r1, r7
 8002824:	2300      	movs	r3, #0
 8002826:	f7fd fded 	bl	8000404 <__aeabi_uldivmod>
 800282a:	0003      	movs	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800282c:	4a7d      	ldr	r2, [pc, #500]	; (8002a24 <UART_SetConfig+0x338>)
 800282e:	1881      	adds	r1, r0, r2
 8002830:	4a7d      	ldr	r2, [pc, #500]	; (8002a28 <UART_SetConfig+0x33c>)
          ret = HAL_ERROR;
 8002832:	2001      	movs	r0, #1
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002834:	4291      	cmp	r1, r2
 8002836:	d900      	bls.n	800283a <UART_SetConfig+0x14e>
 8002838:	e090      	b.n	800295c <UART_SetConfig+0x270>
          huart->Instance->BRR = usartdiv;
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	60d3      	str	r3, [r2, #12]
 800283e:	2000      	movs	r0, #0
 8002840:	e08c      	b.n	800295c <UART_SetConfig+0x270>
    switch (clocksource)
 8002842:	2b04      	cmp	r3, #4
 8002844:	d00c      	beq.n	8002860 <UART_SetConfig+0x174>
 8002846:	2b08      	cmp	r3, #8
 8002848:	d000      	beq.n	800284c <UART_SetConfig+0x160>
 800284a:	e0cf      	b.n	80029ec <UART_SetConfig+0x300>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	e7d4      	b.n	80027fc <UART_SetConfig+0x110>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002852:	4b73      	ldr	r3, [pc, #460]	; (8002a20 <UART_SetConfig+0x334>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	06db      	lsls	r3, r3, #27
 8002858:	d500      	bpl.n	800285c <UART_SetConfig+0x170>
 800285a:	e0d1      	b.n	8002a00 <UART_SetConfig+0x314>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800285c:	4b73      	ldr	r3, [pc, #460]	; (8002a2c <UART_SetConfig+0x340>)
 800285e:	e7d0      	b.n	8002802 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002860:	f7ff f90a 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8002864:	0003      	movs	r3, r0
        break;
 8002866:	e7c9      	b.n	80027fc <UART_SetConfig+0x110>
    switch (clocksource)
 8002868:	2b08      	cmp	r3, #8
 800286a:	d862      	bhi.n	8002932 <UART_SetConfig+0x246>
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4a70      	ldr	r2, [pc, #448]	; (8002a30 <UART_SetConfig+0x344>)
 8002870:	58d3      	ldr	r3, [r2, r3]
 8002872:	469f      	mov	pc, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002874:	f7ff fd10 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8002878:	0040      	lsls	r0, r0, #1
 800287a:	6863      	ldr	r3, [r4, #4]
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	18c0      	adds	r0, r0, r3
 8002880:	6861      	ldr	r1, [r4, #4]
 8002882:	f7fd fc49 	bl	8000118 <__udivsi3>
 8002886:	0403      	lsls	r3, r0, #16
 8002888:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800288a:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800288c:	4969      	ldr	r1, [pc, #420]	; (8002a34 <UART_SetConfig+0x348>)
 800288e:	001a      	movs	r2, r3
 8002890:	3a10      	subs	r2, #16
 8002892:	428a      	cmp	r2, r1
 8002894:	d900      	bls.n	8002898 <UART_SetConfig+0x1ac>
 8002896:	e0ad      	b.n	80029f4 <UART_SetConfig+0x308>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002898:	220f      	movs	r2, #15
 800289a:	0019      	movs	r1, r3
 800289c:	4391      	bics	r1, r2
 800289e:	000a      	movs	r2, r1
      huart->Instance->BRR = brrtemp;
 80028a0:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028a2:	071b      	lsls	r3, r3, #28
 80028a4:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60cb      	str	r3, [r1, #12]
 80028aa:	e057      	b.n	800295c <UART_SetConfig+0x270>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80028ac:	f7ff fd04 	bl	80022b8 <HAL_RCC_GetPCLK2Freq>
 80028b0:	0040      	lsls	r0, r0, #1
 80028b2:	6863      	ldr	r3, [r4, #4]
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	18c0      	adds	r0, r0, r3
 80028b8:	6861      	ldr	r1, [r4, #4]
 80028ba:	f7fd fc2d 	bl	8000118 <__udivsi3>
 80028be:	0403      	lsls	r3, r0, #16
 80028c0:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80028c2:	2000      	movs	r0, #0
        break;
 80028c4:	e7e2      	b.n	800288c <UART_SetConfig+0x1a0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028c6:	4b56      	ldr	r3, [pc, #344]	; (8002a20 <UART_SetConfig+0x334>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	06db      	lsls	r3, r3, #27
 80028cc:	d50b      	bpl.n	80028e6 <UART_SetConfig+0x1fa>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80028ce:	6863      	ldr	r3, [r4, #4]
 80028d0:	0858      	lsrs	r0, r3, #1
 80028d2:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <UART_SetConfig+0x34c>)
 80028d4:	469c      	mov	ip, r3
 80028d6:	4460      	add	r0, ip
 80028d8:	6861      	ldr	r1, [r4, #4]
 80028da:	f7fd fc1d 	bl	8000118 <__udivsi3>
 80028de:	0403      	lsls	r3, r0, #16
 80028e0:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80028e2:	2000      	movs	r0, #0
 80028e4:	e7d2      	b.n	800288c <UART_SetConfig+0x1a0>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80028e6:	6863      	ldr	r3, [r4, #4]
 80028e8:	0858      	lsrs	r0, r3, #1
 80028ea:	4b54      	ldr	r3, [pc, #336]	; (8002a3c <UART_SetConfig+0x350>)
 80028ec:	469c      	mov	ip, r3
 80028ee:	4460      	add	r0, ip
 80028f0:	6861      	ldr	r1, [r4, #4]
 80028f2:	f7fd fc11 	bl	8000118 <__udivsi3>
 80028f6:	0403      	lsls	r3, r0, #16
 80028f8:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80028fa:	2000      	movs	r0, #0
 80028fc:	e7c6      	b.n	800288c <UART_SetConfig+0x1a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028fe:	f7ff f8bb 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8002902:	0040      	lsls	r0, r0, #1
 8002904:	6863      	ldr	r3, [r4, #4]
 8002906:	085b      	lsrs	r3, r3, #1
 8002908:	18c0      	adds	r0, r0, r3
 800290a:	6861      	ldr	r1, [r4, #4]
 800290c:	f7fd fc04 	bl	8000118 <__udivsi3>
 8002910:	0403      	lsls	r3, r0, #16
 8002912:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002914:	2000      	movs	r0, #0
        break;
 8002916:	e7b9      	b.n	800288c <UART_SetConfig+0x1a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002918:	6863      	ldr	r3, [r4, #4]
 800291a:	0858      	lsrs	r0, r3, #1
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	025b      	lsls	r3, r3, #9
 8002920:	469c      	mov	ip, r3
 8002922:	4460      	add	r0, ip
 8002924:	6861      	ldr	r1, [r4, #4]
 8002926:	f7fd fbf7 	bl	8000118 <__udivsi3>
 800292a:	0403      	lsls	r3, r0, #16
 800292c:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800292e:	2000      	movs	r0, #0
        break;
 8002930:	e7ac      	b.n	800288c <UART_SetConfig+0x1a0>
        ret = HAL_ERROR;
 8002932:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002934:	2300      	movs	r3, #0
 8002936:	e7a9      	b.n	800288c <UART_SetConfig+0x1a0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002938:	f7ff fcae 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 800293c:	6863      	ldr	r3, [r4, #4]
 800293e:	085b      	lsrs	r3, r3, #1
 8002940:	1818      	adds	r0, r3, r0
 8002942:	6861      	ldr	r1, [r4, #4]
 8002944:	f7fd fbe8 	bl	8000118 <__udivsi3>
 8002948:	0403      	lsls	r3, r0, #16
 800294a:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800294c:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800294e:	4939      	ldr	r1, [pc, #228]	; (8002a34 <UART_SetConfig+0x348>)
 8002950:	001a      	movs	r2, r3
 8002952:	3a10      	subs	r2, #16
 8002954:	428a      	cmp	r2, r1
 8002956:	d84f      	bhi.n	80029f8 <UART_SetConfig+0x30c>
    {
      huart->Instance->BRR = usartdiv;
 8002958:	6822      	ldr	r2, [r4, #0]
 800295a:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800295c:	2300      	movs	r3, #0
 800295e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002960:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002962:	bdd0      	pop	{r4, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002964:	f7ff fca8 	bl	80022b8 <HAL_RCC_GetPCLK2Freq>
 8002968:	6863      	ldr	r3, [r4, #4]
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	1818      	adds	r0, r3, r0
 800296e:	6861      	ldr	r1, [r4, #4]
 8002970:	f7fd fbd2 	bl	8000118 <__udivsi3>
 8002974:	0403      	lsls	r3, r0, #16
 8002976:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002978:	2000      	movs	r0, #0
        break;
 800297a:	e7e8      	b.n	800294e <UART_SetConfig+0x262>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800297c:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <UART_SetConfig+0x334>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	06db      	lsls	r3, r3, #27
 8002982:	d50b      	bpl.n	800299c <UART_SetConfig+0x2b0>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002984:	6863      	ldr	r3, [r4, #4]
 8002986:	0858      	lsrs	r0, r3, #1
 8002988:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <UART_SetConfig+0x354>)
 800298a:	469c      	mov	ip, r3
 800298c:	4460      	add	r0, ip
 800298e:	6861      	ldr	r1, [r4, #4]
 8002990:	f7fd fbc2 	bl	8000118 <__udivsi3>
 8002994:	0403      	lsls	r3, r0, #16
 8002996:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002998:	2000      	movs	r0, #0
 800299a:	e7d8      	b.n	800294e <UART_SetConfig+0x262>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800299c:	6863      	ldr	r3, [r4, #4]
 800299e:	0858      	lsrs	r0, r3, #1
 80029a0:	4b22      	ldr	r3, [pc, #136]	; (8002a2c <UART_SetConfig+0x340>)
 80029a2:	469c      	mov	ip, r3
 80029a4:	4460      	add	r0, ip
 80029a6:	6861      	ldr	r1, [r4, #4]
 80029a8:	f7fd fbb6 	bl	8000118 <__udivsi3>
 80029ac:	0403      	lsls	r3, r0, #16
 80029ae:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80029b0:	2000      	movs	r0, #0
 80029b2:	e7cc      	b.n	800294e <UART_SetConfig+0x262>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029b4:	f7ff f860 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 80029b8:	6863      	ldr	r3, [r4, #4]
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	1818      	adds	r0, r3, r0
 80029be:	6861      	ldr	r1, [r4, #4]
 80029c0:	f7fd fbaa 	bl	8000118 <__udivsi3>
 80029c4:	0403      	lsls	r3, r0, #16
 80029c6:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80029c8:	2000      	movs	r0, #0
        break;
 80029ca:	e7c0      	b.n	800294e <UART_SetConfig+0x262>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029cc:	6863      	ldr	r3, [r4, #4]
 80029ce:	0858      	lsrs	r0, r3, #1
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	469c      	mov	ip, r3
 80029d6:	4460      	add	r0, ip
 80029d8:	6861      	ldr	r1, [r4, #4]
 80029da:	f7fd fb9d 	bl	8000118 <__udivsi3>
 80029de:	0403      	lsls	r3, r0, #16
 80029e0:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80029e2:	2000      	movs	r0, #0
        break;
 80029e4:	e7b3      	b.n	800294e <UART_SetConfig+0x262>
        ret = HAL_ERROR;
 80029e6:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e7b0      	b.n	800294e <UART_SetConfig+0x262>
        ret = HAL_ERROR;
 80029ec:	2001      	movs	r0, #1
 80029ee:	e7b5      	b.n	800295c <UART_SetConfig+0x270>
 80029f0:	2000      	movs	r0, #0
 80029f2:	e7b3      	b.n	800295c <UART_SetConfig+0x270>
      ret = HAL_ERROR;
 80029f4:	2001      	movs	r0, #1
 80029f6:	e7b1      	b.n	800295c <UART_SetConfig+0x270>
      ret = HAL_ERROR;
 80029f8:	2001      	movs	r0, #1
 80029fa:	e7af      	b.n	800295c <UART_SetConfig+0x270>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029fc:	2302      	movs	r3, #2
 80029fe:	e6a2      	b.n	8002746 <UART_SetConfig+0x5a>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <UART_SetConfig+0x354>)
 8002a02:	e6fe      	b.n	8002802 <UART_SetConfig+0x116>
 8002a04:	efff69f3 	.word	0xefff69f3
 8002a08:	ffffcfff 	.word	0xffffcfff
 8002a0c:	40004800 	.word	0x40004800
 8002a10:	fffff4ff 	.word	0xfffff4ff
 8002a14:	40013800 	.word	0x40013800
 8002a18:	40004400 	.word	0x40004400
 8002a1c:	08004e30 	.word	0x08004e30
 8002a20:	40021000 	.word	0x40021000
 8002a24:	fffffd00 	.word	0xfffffd00
 8002a28:	000ffcff 	.word	0x000ffcff
 8002a2c:	00f42400 	.word	0x00f42400
 8002a30:	08004e54 	.word	0x08004e54
 8002a34:	0000ffef 	.word	0x0000ffef
 8002a38:	007a1200 	.word	0x007a1200
 8002a3c:	01e84800 	.word	0x01e84800
 8002a40:	003d0900 	.word	0x003d0900

08002a44 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a46:	07db      	lsls	r3, r3, #31
 8002a48:	d506      	bpl.n	8002a58 <UART_AdvFeatureConfig+0x14>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a4a:	6802      	ldr	r2, [r0, #0]
 8002a4c:	6853      	ldr	r3, [r2, #4]
 8002a4e:	492c      	ldr	r1, [pc, #176]	; (8002b00 <UART_AdvFeatureConfig+0xbc>)
 8002a50:	400b      	ands	r3, r1
 8002a52:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a5a:	079b      	lsls	r3, r3, #30
 8002a5c:	d506      	bpl.n	8002a6c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a5e:	6802      	ldr	r2, [r0, #0]
 8002a60:	6853      	ldr	r3, [r2, #4]
 8002a62:	4928      	ldr	r1, [pc, #160]	; (8002b04 <UART_AdvFeatureConfig+0xc0>)
 8002a64:	400b      	ands	r3, r1
 8002a66:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a6e:	075b      	lsls	r3, r3, #29
 8002a70:	d506      	bpl.n	8002a80 <UART_AdvFeatureConfig+0x3c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a72:	6802      	ldr	r2, [r0, #0]
 8002a74:	6853      	ldr	r3, [r2, #4]
 8002a76:	4924      	ldr	r1, [pc, #144]	; (8002b08 <UART_AdvFeatureConfig+0xc4>)
 8002a78:	400b      	ands	r3, r1
 8002a7a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a82:	071b      	lsls	r3, r3, #28
 8002a84:	d506      	bpl.n	8002a94 <UART_AdvFeatureConfig+0x50>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a86:	6802      	ldr	r2, [r0, #0]
 8002a88:	6853      	ldr	r3, [r2, #4]
 8002a8a:	4920      	ldr	r1, [pc, #128]	; (8002b0c <UART_AdvFeatureConfig+0xc8>)
 8002a8c:	400b      	ands	r3, r1
 8002a8e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002a90:	430b      	orrs	r3, r1
 8002a92:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a96:	06db      	lsls	r3, r3, #27
 8002a98:	d506      	bpl.n	8002aa8 <UART_AdvFeatureConfig+0x64>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a9a:	6802      	ldr	r2, [r0, #0]
 8002a9c:	6893      	ldr	r3, [r2, #8]
 8002a9e:	491c      	ldr	r1, [pc, #112]	; (8002b10 <UART_AdvFeatureConfig+0xcc>)
 8002aa0:	400b      	ands	r3, r1
 8002aa2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aa8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002aaa:	069b      	lsls	r3, r3, #26
 8002aac:	d506      	bpl.n	8002abc <UART_AdvFeatureConfig+0x78>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002aae:	6802      	ldr	r2, [r0, #0]
 8002ab0:	6893      	ldr	r3, [r2, #8]
 8002ab2:	4918      	ldr	r1, [pc, #96]	; (8002b14 <UART_AdvFeatureConfig+0xd0>)
 8002ab4:	400b      	ands	r3, r1
 8002ab6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002abc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002abe:	065b      	lsls	r3, r3, #25
 8002ac0:	d50b      	bpl.n	8002ada <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ac2:	6802      	ldr	r2, [r0, #0]
 8002ac4:	6853      	ldr	r3, [r2, #4]
 8002ac6:	4914      	ldr	r1, [pc, #80]	; (8002b18 <UART_AdvFeatureConfig+0xd4>)
 8002ac8:	400b      	ands	r3, r1
 8002aca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	035b      	lsls	r3, r3, #13
 8002ad4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d00a      	beq.n	8002af0 <UART_AdvFeatureConfig+0xac>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ada:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	d506      	bpl.n	8002aee <UART_AdvFeatureConfig+0xaa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ae0:	6802      	ldr	r2, [r0, #0]
 8002ae2:	6853      	ldr	r3, [r2, #4]
 8002ae4:	490d      	ldr	r1, [pc, #52]	; (8002b1c <UART_AdvFeatureConfig+0xd8>)
 8002ae6:	400b      	ands	r3, r1
 8002ae8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002aea:	430b      	orrs	r3, r1
 8002aec:	6053      	str	r3, [r2, #4]
  }
}
 8002aee:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002af0:	6802      	ldr	r2, [r0, #0]
 8002af2:	6853      	ldr	r3, [r2, #4]
 8002af4:	490a      	ldr	r1, [pc, #40]	; (8002b20 <UART_AdvFeatureConfig+0xdc>)
 8002af6:	400b      	ands	r3, r1
 8002af8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002afa:	430b      	orrs	r3, r1
 8002afc:	6053      	str	r3, [r2, #4]
 8002afe:	e7ec      	b.n	8002ada <UART_AdvFeatureConfig+0x96>
 8002b00:	fffdffff 	.word	0xfffdffff
 8002b04:	fffeffff 	.word	0xfffeffff
 8002b08:	fffbffff 	.word	0xfffbffff
 8002b0c:	ffff7fff 	.word	0xffff7fff
 8002b10:	ffffefff 	.word	0xffffefff
 8002b14:	ffffdfff 	.word	0xffffdfff
 8002b18:	ffefffff 	.word	0xffefffff
 8002b1c:	fff7ffff 	.word	0xfff7ffff
 8002b20:	ff9fffff 	.word	0xff9fffff

08002b24 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b26:	46c6      	mov	lr, r8
 8002b28:	b500      	push	{lr}
 8002b2a:	0007      	movs	r7, r0
 8002b2c:	000c      	movs	r4, r1
 8002b2e:	0016      	movs	r6, r2
 8002b30:	4698      	mov	r8, r3
 8002b32:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	69d3      	ldr	r3, [r2, #28]
 8002b38:	4023      	ands	r3, r4
 8002b3a:	1b1b      	subs	r3, r3, r4
 8002b3c:	4259      	negs	r1, r3
 8002b3e:	414b      	adcs	r3, r1
 8002b40:	42b3      	cmp	r3, r6
 8002b42:	d11c      	bne.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b44:	1c6b      	adds	r3, r5, #1
 8002b46:	d0f6      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x12>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b48:	f7fe fcfc 	bl	8001544 <HAL_GetTick>
 8002b4c:	4643      	mov	r3, r8
 8002b4e:	1ac0      	subs	r0, r0, r3
 8002b50:	4285      	cmp	r5, r0
 8002b52:	d301      	bcc.n	8002b58 <UART_WaitOnFlagUntilTimeout+0x34>
 8002b54:	2d00      	cmp	r5, #0
 8002b56:	d1ed      	bne.n	8002b34 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	6813      	ldr	r3, [r2, #0]
 8002b5c:	490a      	ldr	r1, [pc, #40]	; (8002b88 <UART_WaitOnFlagUntilTimeout+0x64>)
 8002b5e:	400b      	ands	r3, r1
 8002b60:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	6893      	ldr	r3, [r2, #8]
 8002b66:	31a3      	adds	r1, #163	; 0xa3
 8002b68:	31ff      	adds	r1, #255	; 0xff
 8002b6a:	438b      	bics	r3, r1
 8002b6c:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	677b      	str	r3, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002b72:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b74:	2200      	movs	r2, #0
 8002b76:	3350      	adds	r3, #80	; 0x50
 8002b78:	54fa      	strb	r2, [r7, r3]

        return HAL_TIMEOUT;
 8002b7a:	2003      	movs	r0, #3
 8002b7c:	e000      	b.n	8002b80 <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 8002b7e:	2000      	movs	r0, #0
}
 8002b80:	bc04      	pop	{r2}
 8002b82:	4690      	mov	r8, r2
 8002b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	fffffe5f 	.word	0xfffffe5f

08002b8c <UART_CheckIdleState>:
{
 8002b8c:	b530      	push	{r4, r5, lr}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002b96:	f7fe fcd5 	bl	8001544 <HAL_GetTick>
 8002b9a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	071b      	lsls	r3, r3, #28
 8002ba2:	d40d      	bmi.n	8002bc0 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	075b      	lsls	r3, r3, #29
 8002baa:	d416      	bmi.n	8002bda <UART_CheckIdleState+0x4e>
  huart->gState = HAL_UART_STATE_READY;
 8002bac:	2320      	movs	r3, #32
 8002bae:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002bb0:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	3350      	adds	r3, #80	; 0x50
 8002bb6:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	0018      	movs	r0, r3
 8002bbc:	b003      	add	sp, #12
 8002bbe:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <UART_CheckIdleState+0x68>)
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2180      	movs	r1, #128	; 0x80
 8002bca:	0389      	lsls	r1, r1, #14
 8002bcc:	0020      	movs	r0, r4
 8002bce:	f7ff ffa9 	bl	8002b24 <UART_WaitOnFlagUntilTimeout>
      return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	d1f0      	bne.n	8002bba <UART_CheckIdleState+0x2e>
 8002bd8:	e7e4      	b.n	8002ba4 <UART_CheckIdleState+0x18>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <UART_CheckIdleState+0x68>)
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	002b      	movs	r3, r5
 8002be0:	2200      	movs	r2, #0
 8002be2:	2180      	movs	r1, #128	; 0x80
 8002be4:	03c9      	lsls	r1, r1, #15
 8002be6:	0020      	movs	r0, r4
 8002be8:	f7ff ff9c 	bl	8002b24 <UART_WaitOnFlagUntilTimeout>
      return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bee:	2800      	cmp	r0, #0
 8002bf0:	d1e3      	bne.n	8002bba <UART_CheckIdleState+0x2e>
 8002bf2:	e7db      	b.n	8002bac <UART_CheckIdleState+0x20>
 8002bf4:	01ffffff 	.word	0x01ffffff

08002bf8 <HAL_UART_Init>:
{
 8002bf8:	b510      	push	{r4, lr}
 8002bfa:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002bfc:	d02e      	beq.n	8002c5c <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002bfe:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d021      	beq.n	8002c48 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002c04:	2324      	movs	r3, #36	; 0x24
 8002c06:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002c08:	6822      	ldr	r2, [r4, #0]
 8002c0a:	6813      	ldr	r3, [r2, #0]
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	438b      	bics	r3, r1
 8002c10:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c12:	0020      	movs	r0, r4
 8002c14:	f7ff fd6a 	bl	80026ec <UART_SetConfig>
 8002c18:	2801      	cmp	r0, #1
 8002c1a:	d014      	beq.n	8002c46 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d118      	bne.n	8002c54 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c22:	6822      	ldr	r2, [r4, #0]
 8002c24:	6853      	ldr	r3, [r2, #4]
 8002c26:	490e      	ldr	r1, [pc, #56]	; (8002c60 <HAL_UART_Init+0x68>)
 8002c28:	400b      	ands	r3, r1
 8002c2a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c2c:	6822      	ldr	r2, [r4, #0]
 8002c2e:	6893      	ldr	r3, [r2, #8]
 8002c30:	212a      	movs	r1, #42	; 0x2a
 8002c32:	438b      	bics	r3, r1
 8002c34:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002c36:	6822      	ldr	r2, [r4, #0]
 8002c38:	6813      	ldr	r3, [r2, #0]
 8002c3a:	3929      	subs	r1, #41	; 0x29
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002c40:	0020      	movs	r0, r4
 8002c42:	f7ff ffa3 	bl	8002b8c <UART_CheckIdleState>
}
 8002c46:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002c48:	2200      	movs	r2, #0
 8002c4a:	3370      	adds	r3, #112	; 0x70
 8002c4c:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8002c4e:	f7fe f963 	bl	8000f18 <HAL_UART_MspInit>
 8002c52:	e7d7      	b.n	8002c04 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002c54:	0020      	movs	r0, r4
 8002c56:	f7ff fef5 	bl	8002a44 <UART_AdvFeatureConfig>
 8002c5a:	e7e2      	b.n	8002c22 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	e7f2      	b.n	8002c46 <HAL_UART_Init+0x4e>
 8002c60:	ffffb7ff 	.word	0xffffb7ff

08002c64 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002c64:	2240      	movs	r2, #64	; 0x40
 8002c66:	5a83      	ldrh	r3, [r0, r2]
 8002c68:	4902      	ldr	r1, [pc, #8]	; (8002c74 <USB_DisableGlobalInt+0x10>)
 8002c6a:	400b      	ands	r3, r1
 8002c6c:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 8002c6e:	2000      	movs	r0, #0
 8002c70:	4770      	bx	lr
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	0000407f 	.word	0x0000407f

08002c78 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c78:	b084      	sub	sp, #16
 8002c7a:	9101      	str	r1, [sp, #4]
 8002c7c:	9202      	str	r2, [sp, #8]
 8002c7e:	9303      	str	r3, [sp, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002c80:	2340      	movs	r3, #64	; 0x40
 8002c82:	2201      	movs	r2, #1
 8002c84:	52c2      	strh	r2, [r0, r3]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002c86:	2200      	movs	r2, #0
 8002c88:	52c2      	strh	r2, [r0, r3]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002c8a:	2144      	movs	r1, #68	; 0x44
 8002c8c:	5242      	strh	r2, [r0, r1]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002c8e:	310c      	adds	r1, #12
 8002c90:	5242      	strh	r2, [r0, r1]
  USBx->CNTR |= winterruptmask;
 8002c92:	5ac2      	ldrh	r2, [r0, r3]
 8002c94:	4902      	ldr	r1, [pc, #8]	; (8002ca0 <USB_DevInit+0x28>)
 8002c96:	430a      	orrs	r2, r1
 8002c98:	52c2      	strh	r2, [r0, r3]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	b004      	add	sp, #16
 8002c9e:	4770      	bx	lr
 8002ca0:	0000bf80 	.word	0x0000bf80

08002ca4 <uECC_vli_rshift1>:
	return (!equal - 2 * neg);
}

/* Computes vli = vli >> 1. */
static void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words)
{
 8002ca4:	b510      	push	{r4, lr}
	uECC_word_t *end = vli;
	uECC_word_t carry = 0;

	vli += num_words;
 8002ca6:	0089      	lsls	r1, r1, #2
 8002ca8:	1841      	adds	r1, r0, r1
	while (vli-- > end) {
 8002caa:	1f0b      	subs	r3, r1, #4
 8002cac:	4288      	cmp	r0, r1
 8002cae:	d20e      	bcs.n	8002cce <uECC_vli_rshift1+0x2a>
 8002cb0:	1a1c      	subs	r4, r3, r0
 8002cb2:	3403      	adds	r4, #3
 8002cb4:	08a4      	lsrs	r4, r4, #2
 8002cb6:	00a4      	lsls	r4, r4, #2
 8002cb8:	1b0c      	subs	r4, r1, r4
 8002cba:	3c08      	subs	r4, #8
 8002cbc:	2000      	movs	r0, #0
		uECC_word_t temp = *vli;
 8002cbe:	6819      	ldr	r1, [r3, #0]
		*vli = (temp >> 1) | carry;
 8002cc0:	084a      	lsrs	r2, r1, #1
 8002cc2:	4302      	orrs	r2, r0
 8002cc4:	601a      	str	r2, [r3, #0]
		carry = temp << (uECC_WORD_BITS - 1);
 8002cc6:	07c8      	lsls	r0, r1, #31
	while (vli-- > end) {
 8002cc8:	3b04      	subs	r3, #4
 8002cca:	42a3      	cmp	r3, r4
 8002ccc:	d1f7      	bne.n	8002cbe <uECC_vli_rshift1+0x1a>
	}
}
 8002cce:	bd10      	pop	{r4, pc}

08002cd0 <uECC_vli_mult>:
}

/* Computes result = left * right. Result must be 2 * num_words long. */
static void uECC_vli_mult(uECC_word_t *result, const uECC_word_t *left,
		const uECC_word_t *right, wordcount_t num_words)
{
 8002cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd2:	46de      	mov	lr, fp
 8002cd4:	4657      	mov	r7, sl
 8002cd6:	464e      	mov	r6, r9
 8002cd8:	4645      	mov	r5, r8
 8002cda:	b5e0      	push	{r5, r6, r7, lr}
 8002cdc:	b08b      	sub	sp, #44	; 0x2c
 8002cde:	9006      	str	r0, [sp, #24]
 8002ce0:	468a      	mov	sl, r1
 8002ce2:	4691      	mov	r9, r2
 8002ce4:	469b      	mov	fp, r3
	uECC_word_t r1 = 0;
	uECC_word_t r2 = 0;
	wordcount_t i, k;

	/* Compute each digit of result in sequence, maintaining the carries. */
	for (k = 0; k < num_words; ++k) {
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	dd46      	ble.n	8002d78 <uECC_vli_mult+0xa8>
 8002cea:	2200      	movs	r2, #0
 8002cec:	4690      	mov	r8, r2
 8002cee:	9202      	str	r2, [sp, #8]
 8002cf0:	2600      	movs	r6, #0
 8002cf2:	465a      	mov	r2, fp
 8002cf4:	9204      	str	r2, [sp, #16]
 8002cf6:	4683      	mov	fp, r0
 8002cf8:	e031      	b.n	8002d5e <uECC_vli_mult+0x8e>
	*r2 += (r01 < p);
 8002cfa:	2600      	movs	r6, #0
 8002cfc:	19ad      	adds	r5, r5, r6
	*r1 = r01 >> uECC_WORD_BITS;
 8002cfe:	9302      	str	r3, [sp, #8]
	*r0 = (uECC_word_t)r01;
 8002d00:	0016      	movs	r6, r2
 8002d02:	3401      	adds	r4, #1
 8002d04:	b264      	sxtb	r4, r4

		for (i = 0; i <= k; ++i) {
 8002d06:	454c      	cmp	r4, r9
 8002d08:	dc18      	bgt.n	8002d3c <uECC_vli_mult+0x6c>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
 8002d0a:	4643      	mov	r3, r8
 8002d0c:	1b1b      	subs	r3, r3, r4
 8002d0e:	009b      	lsls	r3, r3, #2
	uECC_dword_t p = (uECC_dword_t)a * b;
 8002d10:	59d8      	ldr	r0, [r3, r7]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
 8002d12:	00a3      	lsls	r3, r4, #2
	uECC_dword_t p = (uECC_dword_t)a * b;
 8002d14:	4652      	mov	r2, sl
 8002d16:	589a      	ldr	r2, [r3, r2]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	f7fd fb92 	bl	8000444 <__aeabi_lmul>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
 8002d20:	9600      	str	r6, [sp, #0]
 8002d22:	9b02      	ldr	r3, [sp, #8]
 8002d24:	9301      	str	r3, [sp, #4]
	r01 += p;
 8002d26:	9a00      	ldr	r2, [sp, #0]
 8002d28:	9b01      	ldr	r3, [sp, #4]
 8002d2a:	1812      	adds	r2, r2, r0
 8002d2c:	414b      	adcs	r3, r1
	*r2 += (r01 < p);
 8002d2e:	2601      	movs	r6, #1
 8002d30:	4299      	cmp	r1, r3
 8002d32:	d8e3      	bhi.n	8002cfc <uECC_vli_mult+0x2c>
 8002d34:	d1e1      	bne.n	8002cfa <uECC_vli_mult+0x2a>
 8002d36:	4290      	cmp	r0, r2
 8002d38:	d8e0      	bhi.n	8002cfc <uECC_vli_mult+0x2c>
 8002d3a:	e7de      	b.n	8002cfa <uECC_vli_mult+0x2a>
 8002d3c:	46b9      	mov	r9, r7
		}

		result[k] = r0;
 8002d3e:	465b      	mov	r3, fp
 8002d40:	c340      	stmia	r3!, {r6}
 8002d42:	469b      	mov	fp, r3
 8002d44:	2301      	movs	r3, #1
 8002d46:	469c      	mov	ip, r3
 8002d48:	44e0      	add	r8, ip
 8002d4a:	9e02      	ldr	r6, [sp, #8]
	for (k = 0; k < num_words; ++k) {
 8002d4c:	4643      	mov	r3, r8
 8002d4e:	466a      	mov	r2, sp
 8002d50:	7313      	strb	r3, [r2, #12]
 8002d52:	7b13      	ldrb	r3, [r2, #12]
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	9a04      	ldr	r2, [sp, #16]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dd11      	ble.n	8002d80 <uECC_vli_mult+0xb0>
 8002d5c:	9502      	str	r5, [sp, #8]
 8002d5e:	4643      	mov	r3, r8
 8002d60:	466a      	mov	r2, sp
 8002d62:	7313      	strb	r3, [r2, #12]
 8002d64:	270c      	movs	r7, #12
 8002d66:	57d7      	ldrsb	r7, [r2, r7]
		for (i = 0; i <= k; ++i) {
 8002d68:	2500      	movs	r5, #0
 8002d6a:	2400      	movs	r4, #0
 8002d6c:	2f00      	cmp	r7, #0
 8002d6e:	dbe6      	blt.n	8002d3e <uECC_vli_mult+0x6e>
 8002d70:	464b      	mov	r3, r9
 8002d72:	46b9      	mov	r9, r7
 8002d74:	001f      	movs	r7, r3
 8002d76:	e7c8      	b.n	8002d0a <uECC_vli_mult+0x3a>
	uECC_word_t r1 = 0;
 8002d78:	2500      	movs	r5, #0
	uECC_word_t r0 = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	9302      	str	r3, [sp, #8]
 8002d7e:	e001      	b.n	8002d84 <uECC_vli_mult+0xb4>
 8002d80:	9b04      	ldr	r3, [sp, #16]
 8002d82:	469b      	mov	fp, r3
		r0 = r1;
		r1 = r2;
		r2 = 0;
	}

	for (k = num_words; k < num_words * 2 - 1; ++k) {
 8002d84:	465b      	mov	r3, fp
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	9307      	str	r3, [sp, #28]
 8002d8c:	459b      	cmp	fp, r3
 8002d8e:	da4b      	bge.n	8002e28 <uECC_vli_mult+0x158>
 8002d90:	465f      	mov	r7, fp
 8002d92:	46d8      	mov	r8, fp
 8002d94:	2301      	movs	r3, #1
 8002d96:	9305      	str	r3, [sp, #20]
	*r2 += (r01 < p);
 8002d98:	9704      	str	r7, [sp, #16]
 8002d9a:	9500      	str	r5, [sp, #0]
 8002d9c:	e039      	b.n	8002e12 <uECC_vli_mult+0x142>
 8002d9e:	2100      	movs	r1, #0
 8002da0:	468c      	mov	ip, r1
 8002da2:	9903      	ldr	r1, [sp, #12]
 8002da4:	4461      	add	r1, ip
 8002da6:	9103      	str	r1, [sp, #12]
	*r1 = r01 >> uECC_WORD_BITS;
 8002da8:	9300      	str	r3, [sp, #0]
	*r0 = (uECC_word_t)r01;
 8002daa:	9202      	str	r2, [sp, #8]
 8002dac:	3401      	adds	r4, #1
 8002dae:	b264      	sxtb	r4, r4

		for (i = (k + 1) - num_words; i < num_words; ++i) {
 8002db0:	45a3      	cmp	fp, r4
 8002db2:	d019      	beq.n	8002de8 <uECC_vli_mult+0x118>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
 8002db4:	9b04      	ldr	r3, [sp, #16]
 8002db6:	1b1b      	subs	r3, r3, r4
 8002db8:	009b      	lsls	r3, r3, #2
	uECC_dword_t p = (uECC_dword_t)a * b;
 8002dba:	464a      	mov	r2, r9
 8002dbc:	5898      	ldr	r0, [r3, r2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
 8002dbe:	00a3      	lsls	r3, r4, #2
	uECC_dword_t p = (uECC_dword_t)a * b;
 8002dc0:	4652      	mov	r2, sl
 8002dc2:	589a      	ldr	r2, [r3, r2]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	f7fd fb3c 	bl	8000444 <__aeabi_lmul>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
 8002dcc:	9e02      	ldr	r6, [sp, #8]
 8002dce:	9f00      	ldr	r7, [sp, #0]
	r01 += p;
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	000b      	movs	r3, r1
 8002dd4:	1992      	adds	r2, r2, r6
 8002dd6:	417b      	adcs	r3, r7
	*r2 += (r01 < p);
 8002dd8:	2501      	movs	r5, #1
 8002dda:	46ac      	mov	ip, r5
 8002ddc:	4299      	cmp	r1, r3
 8002dde:	d8e0      	bhi.n	8002da2 <uECC_vli_mult+0xd2>
 8002de0:	d1dd      	bne.n	8002d9e <uECC_vli_mult+0xce>
 8002de2:	4290      	cmp	r0, r2
 8002de4:	d8dd      	bhi.n	8002da2 <uECC_vli_mult+0xd2>
 8002de6:	e7da      	b.n	8002d9e <uECC_vli_mult+0xce>
 8002de8:	000d      	movs	r5, r1
	*r1 = r01 >> uECC_WORD_BITS;
 8002dea:	001a      	movs	r2, r3
		}
		result[k] = r0;
 8002dec:	4643      	mov	r3, r8
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	9906      	ldr	r1, [sp, #24]
 8002df2:	9802      	ldr	r0, [sp, #8]
 8002df4:	5058      	str	r0, [r3, r1]
 8002df6:	4643      	mov	r3, r8
 8002df8:	3301      	adds	r3, #1
 8002dfa:	b25b      	sxtb	r3, r3
 8002dfc:	4698      	mov	r8, r3
	for (k = num_words; k < num_words * 2 - 1; ++k) {
 8002dfe:	9304      	str	r3, [sp, #16]
 8002e00:	9b05      	ldr	r3, [sp, #20]
 8002e02:	3301      	adds	r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	9305      	str	r3, [sp, #20]
 8002e08:	9202      	str	r2, [sp, #8]
 8002e0a:	9500      	str	r5, [sp, #0]
 8002e0c:	9b07      	ldr	r3, [sp, #28]
 8002e0e:	4543      	cmp	r3, r8
 8002e10:	dd0b      	ble.n	8002e2a <uECC_vli_mult+0x15a>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
 8002e12:	466b      	mov	r3, sp
 8002e14:	2414      	movs	r4, #20
 8002e16:	571c      	ldrsb	r4, [r3, r4]
 8002e18:	45a3      	cmp	fp, r4
 8002e1a:	dd02      	ble.n	8002e22 <uECC_vli_mult+0x152>
 8002e1c:	2500      	movs	r5, #0
 8002e1e:	9503      	str	r5, [sp, #12]
 8002e20:	e7c8      	b.n	8002db4 <uECC_vli_mult+0xe4>
 8002e22:	9a00      	ldr	r2, [sp, #0]
 8002e24:	2500      	movs	r5, #0
 8002e26:	e7e1      	b.n	8002dec <uECC_vli_mult+0x11c>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
 8002e28:	9a02      	ldr	r2, [sp, #8]
		r0 = r1;
		r1 = r2;
		r2 = 0;
	}
	result[num_words * 2 - 1] = r0;
 8002e2a:	465b      	mov	r3, fp
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	9906      	ldr	r1, [sp, #24]
 8002e30:	468c      	mov	ip, r1
 8002e32:	4463      	add	r3, ip
 8002e34:	3b04      	subs	r3, #4
 8002e36:	601a      	str	r2, [r3, #0]
}
 8002e38:	b00b      	add	sp, #44	; 0x2c
 8002e3a:	bc3c      	pop	{r2, r3, r4, r5}
 8002e3c:	4690      	mov	r8, r2
 8002e3e:	4699      	mov	r9, r3
 8002e40:	46a2      	mov	sl, r4
 8002e42:	46ab      	mov	fp, r5
 8002e44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e46 <uECC_vli_add>:
{
 8002e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e48:	46ce      	mov	lr, r9
 8002e4a:	4647      	mov	r7, r8
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	4680      	mov	r8, r0
	for (i = 0; i < num_words; ++i) {
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	dd21      	ble.n	8002e98 <uECC_vli_add+0x52>
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	469c      	mov	ip, r3
 8002e5e:	2500      	movs	r5, #0
 8002e60:	2000      	movs	r0, #0
		uECC_word_t sum = left[i] + right[i] + carry;
 8002e62:	594b      	ldr	r3, [r1, r5]
 8002e64:	5954      	ldr	r4, [r2, r5]
 8002e66:	191c      	adds	r4, r3, r4
 8002e68:	1824      	adds	r4, r4, r0
		uECC_word_t val = (sum < left[i]);
 8002e6a:	429c      	cmp	r4, r3
 8002e6c:	41bf      	sbcs	r7, r7
 8002e6e:	427f      	negs	r7, r7
		carry = cond_set(val, carry, (sum != left[i]));
 8002e70:	1b1b      	subs	r3, r3, r4
 8002e72:	4699      	mov	r9, r3
 8002e74:	001e      	movs	r6, r3
 8002e76:	1e73      	subs	r3, r6, #1
 8002e78:	419e      	sbcs	r6, r3
	return (p_true*(cond)) | (p_false*(!cond));
 8002e7a:	437e      	muls	r6, r7
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	425f      	negs	r7, r3
 8002e80:	417b      	adcs	r3, r7
 8002e82:	4358      	muls	r0, r3
 8002e84:	4330      	orrs	r0, r6
		result[i] = sum;
 8002e86:	4643      	mov	r3, r8
 8002e88:	515c      	str	r4, [r3, r5]
 8002e8a:	3504      	adds	r5, #4
	for (i = 0; i < num_words; ++i) {
 8002e8c:	4565      	cmp	r5, ip
 8002e8e:	d1e8      	bne.n	8002e62 <uECC_vli_add+0x1c>
}
 8002e90:	bc0c      	pop	{r2, r3}
 8002e92:	4690      	mov	r8, r2
 8002e94:	4699      	mov	r9, r3
 8002e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_word_t carry = 0;
 8002e98:	2000      	movs	r0, #0
	return carry;
 8002e9a:	e7f9      	b.n	8002e90 <uECC_vli_add+0x4a>

08002e9c <vli_modInv_update>:
#define EVEN(vli) (!(vli[0] & 1))

static void vli_modInv_update(uECC_word_t *uv,
		const uECC_word_t *mod,
		wordcount_t num_words)
{
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	0004      	movs	r4, r0
 8002ea0:	0015      	movs	r5, r2

	uECC_word_t carry = 0;

	if (!EVEN(uv)) {
 8002ea2:	6803      	ldr	r3, [r0, #0]
 8002ea4:	07db      	lsls	r3, r3, #31
 8002ea6:	d403      	bmi.n	8002eb0 <vli_modInv_update+0x14>
		carry = uECC_vli_add(uv, uv, mod, num_words);
	}
	uECC_vli_rshift1(uv, num_words);
 8002ea8:	0011      	movs	r1, r2
 8002eaa:	f7ff fefb 	bl	8002ca4 <uECC_vli_rshift1>
	if (carry) {
		uv[num_words - 1] |= HIGH_BIT_SET;
	}
}
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
		carry = uECC_vli_add(uv, uv, mod, num_words);
 8002eb0:	0013      	movs	r3, r2
 8002eb2:	000a      	movs	r2, r1
 8002eb4:	0001      	movs	r1, r0
 8002eb6:	f7ff ffc6 	bl	8002e46 <uECC_vli_add>
 8002eba:	0006      	movs	r6, r0
	uECC_vli_rshift1(uv, num_words);
 8002ebc:	0029      	movs	r1, r5
 8002ebe:	0020      	movs	r0, r4
 8002ec0:	f7ff fef0 	bl	8002ca4 <uECC_vli_rshift1>
	if (carry) {
 8002ec4:	2e00      	cmp	r6, #0
 8002ec6:	d0f2      	beq.n	8002eae <vli_modInv_update+0x12>
		uv[num_words - 1] |= HIGH_BIT_SET;
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <vli_modInv_update+0x44>)
 8002eca:	469c      	mov	ip, r3
 8002ecc:	4465      	add	r5, ip
 8002ece:	00ad      	lsls	r5, r5, #2
 8002ed0:	1964      	adds	r4, r4, r5
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	6822      	ldr	r2, [r4, #0]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	6023      	str	r3, [r4, #0]
}
 8002edc:	e7e7      	b.n	8002eae <vli_modInv_update+0x12>
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	3fffffff 	.word	0x3fffffff

08002ee4 <uECC_set_rng>:
	g_rng_function = rng_function;
 8002ee4:	4b01      	ldr	r3, [pc, #4]	; (8002eec <uECC_set_rng+0x8>)
 8002ee6:	6018      	str	r0, [r3, #0]
}
 8002ee8:	4770      	bx	lr
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	20000004 	.word	0x20000004

08002ef0 <uECC_get_rng>:
	return g_rng_function;
 8002ef0:	4b01      	ldr	r3, [pc, #4]	; (8002ef8 <uECC_get_rng+0x8>)
 8002ef2:	6818      	ldr	r0, [r3, #0]
}
 8002ef4:	4770      	bx	lr
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	20000004 	.word	0x20000004

08002efc <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
 8002efc:	2900      	cmp	r1, #0
 8002efe:	dd09      	ble.n	8002f14 <uECC_vli_clear+0x18>
 8002f00:	0003      	movs	r3, r0
 8002f02:	3901      	subs	r1, #1
 8002f04:	b2c9      	uxtb	r1, r1
 8002f06:	3101      	adds	r1, #1
 8002f08:	0089      	lsls	r1, r1, #2
 8002f0a:	1840      	adds	r0, r0, r1
		vli[i] = 0;
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	c304      	stmia	r3!, {r2}
	for (i = 0; i < num_words; ++i) {
 8002f10:	4283      	cmp	r3, r0
 8002f12:	d1fc      	bne.n	8002f0e <uECC_vli_clear+0x12>
}
 8002f14:	4770      	bx	lr

08002f16 <uECC_vli_isZero>:
	for (i = 0; i < num_words; ++i) {
 8002f16:	2900      	cmp	r1, #0
 8002f18:	dd0d      	ble.n	8002f36 <uECC_vli_isZero+0x20>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	3901      	subs	r1, #1
 8002f1e:	b2c9      	uxtb	r1, r1
 8002f20:	3101      	adds	r1, #1
 8002f22:	0089      	lsls	r1, r1, #2
 8002f24:	1840      	adds	r0, r0, r1
 8002f26:	2200      	movs	r2, #0
		bits |= vli[i];
 8002f28:	cb02      	ldmia	r3!, {r1}
 8002f2a:	430a      	orrs	r2, r1
	for (i = 0; i < num_words; ++i) {
 8002f2c:	4283      	cmp	r3, r0
 8002f2e:	d1fb      	bne.n	8002f28 <uECC_vli_isZero+0x12>
	return (bits == 0);
 8002f30:	4250      	negs	r0, r2
 8002f32:	4150      	adcs	r0, r2
}
 8002f34:	4770      	bx	lr
	uECC_word_t bits = 0;
 8002f36:	2200      	movs	r2, #0
 8002f38:	e7fa      	b.n	8002f30 <uECC_vli_isZero+0x1a>

08002f3a <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 8002f3a:	114a      	asrs	r2, r1, #5
 8002f3c:	0092      	lsls	r2, r2, #2
			((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 8002f3e:	231f      	movs	r3, #31
 8002f40:	4019      	ands	r1, r3
 8002f42:	3b1e      	subs	r3, #30
 8002f44:	408b      	lsls	r3, r1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 8002f46:	5810      	ldr	r0, [r2, r0]
 8002f48:	4018      	ands	r0, r3
}
 8002f4a:	4770      	bx	lr

08002f4c <uECC_vli_numBits>:
{
 8002f4c:	0002      	movs	r2, r0
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 8002f4e:	3901      	subs	r1, #1
 8002f50:	b249      	sxtb	r1, r1
 8002f52:	2900      	cmp	r1, #0
 8002f54:	db0b      	blt.n	8002f6e <uECC_vli_numBits+0x22>
 8002f56:	008b      	lsls	r3, r1, #2
 8002f58:	581b      	ldr	r3, [r3, r0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d107      	bne.n	8002f6e <uECC_vli_numBits+0x22>
 8002f5e:	3901      	subs	r1, #1
 8002f60:	b249      	sxtb	r1, r1
 8002f62:	2900      	cmp	r1, #0
 8002f64:	db03      	blt.n	8002f6e <uECC_vli_numBits+0x22>
 8002f66:	008b      	lsls	r3, r1, #2
 8002f68:	589b      	ldr	r3, [r3, r2]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f7      	beq.n	8002f5e <uECC_vli_numBits+0x12>
	return (i + 1);
 8002f6e:	3101      	adds	r1, #1
 8002f70:	b249      	sxtb	r1, r1
		return 0;
 8002f72:	2000      	movs	r0, #0
	if (num_digits == 0) {
 8002f74:	2900      	cmp	r1, #0
 8002f76:	d00d      	beq.n	8002f94 <uECC_vli_numBits+0x48>
	digit = vli[num_digits - 1];
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <uECC_vli_numBits+0x50>)
 8002f7a:	18cb      	adds	r3, r1, r3
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	589b      	ldr	r3, [r3, r2]
	for (i = 0; digit; ++i) {
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <uECC_vli_numBits+0x4a>
		digit >>= 1;
 8002f84:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
 8002f86:	3001      	adds	r0, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1fb      	bne.n	8002f84 <uECC_vli_numBits+0x38>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 8002f8c:	3901      	subs	r1, #1
 8002f8e:	0149      	lsls	r1, r1, #5
 8002f90:	1808      	adds	r0, r1, r0
 8002f92:	b200      	sxth	r0, r0
}
 8002f94:	4770      	bx	lr
	for (i = 0; digit; ++i) {
 8002f96:	0018      	movs	r0, r3
 8002f98:	e7f8      	b.n	8002f8c <uECC_vli_numBits+0x40>
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	3fffffff 	.word	0x3fffffff

08002fa0 <uECC_vli_set>:
{
 8002fa0:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
 8002fa2:	2a00      	cmp	r2, #0
 8002fa4:	dd09      	ble.n	8002fba <uECC_vli_set+0x1a>
 8002fa6:	3a01      	subs	r2, #1
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	3201      	adds	r2, #1
 8002fac:	0092      	lsls	r2, r2, #2
 8002fae:	2300      	movs	r3, #0
		dest[i] = src[i];
 8002fb0:	58cc      	ldr	r4, [r1, r3]
 8002fb2:	50c4      	str	r4, [r0, r3]
 8002fb4:	3304      	adds	r3, #4
	for (i = 0; i < num_words; ++i) {
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d1fa      	bne.n	8002fb0 <uECC_vli_set+0x10>
}
 8002fba:	bd10      	pop	{r4, pc}

08002fbc <uECC_vli_cmp_unsafe>:
{
 8002fbc:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
 8002fbe:	3a01      	subs	r2, #1
 8002fc0:	b252      	sxtb	r2, r2
 8002fc2:	2a00      	cmp	r2, #0
 8002fc4:	db14      	blt.n	8002ff0 <uECC_vli_cmp_unsafe+0x34>
		if (left[i] > right[i]) {
 8002fc6:	0093      	lsls	r3, r2, #2
 8002fc8:	58c4      	ldr	r4, [r0, r3]
 8002fca:	58cb      	ldr	r3, [r1, r3]
 8002fcc:	429c      	cmp	r4, r3
 8002fce:	d811      	bhi.n	8002ff4 <uECC_vli_cmp_unsafe+0x38>
		} else if (left[i] < right[i]) {
 8002fd0:	d312      	bcc.n	8002ff8 <uECC_vli_cmp_unsafe+0x3c>
 8002fd2:	3a01      	subs	r2, #1
 8002fd4:	b252      	sxtb	r2, r2
	for (i = num_words - 1; i >= 0; --i) {
 8002fd6:	2a00      	cmp	r2, #0
 8002fd8:	db08      	blt.n	8002fec <uECC_vli_cmp_unsafe+0x30>
		if (left[i] > right[i]) {
 8002fda:	0093      	lsls	r3, r2, #2
 8002fdc:	58c4      	ldr	r4, [r0, r3]
 8002fde:	58cb      	ldr	r3, [r1, r3]
 8002fe0:	429c      	cmp	r4, r3
 8002fe2:	d80c      	bhi.n	8002ffe <uECC_vli_cmp_unsafe+0x42>
		} else if (left[i] < right[i]) {
 8002fe4:	d2f5      	bcs.n	8002fd2 <uECC_vli_cmp_unsafe+0x16>
			return -1;
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	4240      	negs	r0, r0
 8002fea:	e000      	b.n	8002fee <uECC_vli_cmp_unsafe+0x32>
	return 0;
 8002fec:	2000      	movs	r0, #0
}
 8002fee:	bd10      	pop	{r4, pc}
	return 0;
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	e7fc      	b.n	8002fee <uECC_vli_cmp_unsafe+0x32>
			return 1;
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	e7fa      	b.n	8002fee <uECC_vli_cmp_unsafe+0x32>
			return -1;
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	4240      	negs	r0, r0
 8002ffc:	e7f7      	b.n	8002fee <uECC_vli_cmp_unsafe+0x32>
			return 1;
 8002ffe:	2001      	movs	r0, #1
 8003000:	e7f5      	b.n	8002fee <uECC_vli_cmp_unsafe+0x32>

08003002 <uECC_vli_equal>:
{
 8003002:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
 8003004:	3a01      	subs	r2, #1
 8003006:	b252      	sxtb	r2, r2
 8003008:	2a00      	cmp	r2, #0
 800300a:	db0d      	blt.n	8003028 <uECC_vli_equal+0x26>
 800300c:	2500      	movs	r5, #0
		diff |= (left[i] ^ right[i]);
 800300e:	0094      	lsls	r4, r2, #2
 8003010:	5903      	ldr	r3, [r0, r4]
 8003012:	590c      	ldr	r4, [r1, r4]
 8003014:	4063      	eors	r3, r4
 8003016:	431d      	orrs	r5, r3
 8003018:	3a01      	subs	r2, #1
 800301a:	b252      	sxtb	r2, r2
	for (i = num_words - 1; i >= 0; --i) {
 800301c:	2a00      	cmp	r2, #0
 800301e:	daf6      	bge.n	800300e <uECC_vli_equal+0xc>
	return !(diff == 0);
 8003020:	0028      	movs	r0, r5
 8003022:	1e45      	subs	r5, r0, #1
 8003024:	41a8      	sbcs	r0, r5
}
 8003026:	bd30      	pop	{r4, r5, pc}
	uECC_word_t diff = 0;
 8003028:	2500      	movs	r5, #0
 800302a:	e7f9      	b.n	8003020 <uECC_vli_equal+0x1e>

0800302c <uECC_vli_sub>:
{
 800302c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302e:	46ce      	mov	lr, r9
 8003030:	4647      	mov	r7, r8
 8003032:	b580      	push	{r7, lr}
 8003034:	4680      	mov	r8, r0
	for (i = 0; i < num_words; ++i) {
 8003036:	2b00      	cmp	r3, #0
 8003038:	dd21      	ble.n	800307e <uECC_vli_sub+0x52>
 800303a:	3b01      	subs	r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	3301      	adds	r3, #1
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	469c      	mov	ip, r3
 8003044:	2500      	movs	r5, #0
 8003046:	2000      	movs	r0, #0
		uECC_word_t diff = left[i] - right[i] - borrow;
 8003048:	594b      	ldr	r3, [r1, r5]
 800304a:	5954      	ldr	r4, [r2, r5]
 800304c:	1b1c      	subs	r4, r3, r4
 800304e:	1a24      	subs	r4, r4, r0
		uECC_word_t val = (diff > left[i]);
 8003050:	42a3      	cmp	r3, r4
 8003052:	41bf      	sbcs	r7, r7
 8003054:	427f      	negs	r7, r7
		borrow = cond_set(val, borrow, (diff != left[i]));
 8003056:	1b1b      	subs	r3, r3, r4
 8003058:	4699      	mov	r9, r3
 800305a:	001e      	movs	r6, r3
 800305c:	1e73      	subs	r3, r6, #1
 800305e:	419e      	sbcs	r6, r3
	return (p_true*(cond)) | (p_false*(!cond));
 8003060:	437e      	muls	r6, r7
 8003062:	464b      	mov	r3, r9
 8003064:	425f      	negs	r7, r3
 8003066:	417b      	adcs	r3, r7
 8003068:	4358      	muls	r0, r3
 800306a:	4330      	orrs	r0, r6
		result[i] = diff;
 800306c:	4643      	mov	r3, r8
 800306e:	515c      	str	r4, [r3, r5]
 8003070:	3504      	adds	r5, #4
	for (i = 0; i < num_words; ++i) {
 8003072:	4565      	cmp	r5, ip
 8003074:	d1e8      	bne.n	8003048 <uECC_vli_sub+0x1c>
}
 8003076:	bc0c      	pop	{r2, r3}
 8003078:	4690      	mov	r8, r2
 800307a:	4699      	mov	r9, r3
 800307c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_word_t borrow = 0;
 800307e:	2000      	movs	r0, #0
	return borrow;
 8003080:	e7f9      	b.n	8003076 <uECC_vli_sub+0x4a>

08003082 <uECC_vli_cmp>:
{
 8003082:	b530      	push	{r4, r5, lr}
 8003084:	b089      	sub	sp, #36	; 0x24
 8003086:	0015      	movs	r5, r2
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
 8003088:	0013      	movs	r3, r2
 800308a:	000a      	movs	r2, r1
 800308c:	0001      	movs	r1, r0
 800308e:	4668      	mov	r0, sp
 8003090:	f7ff ffcc 	bl	800302c <uECC_vli_sub>
 8003094:	0004      	movs	r4, r0
	uECC_word_t equal = uECC_vli_isZero(tmp, num_words);
 8003096:	0029      	movs	r1, r5
 8003098:	4668      	mov	r0, sp
 800309a:	f7ff ff3c 	bl	8002f16 <uECC_vli_isZero>
	return (!equal - 2 * neg);
 800309e:	4243      	negs	r3, r0
 80030a0:	4143      	adcs	r3, r0
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
 80030a2:	1e60      	subs	r0, r4, #1
 80030a4:	4184      	sbcs	r4, r0
	return (!equal - 2 * neg);
 80030a6:	0064      	lsls	r4, r4, #1
 80030a8:	1b18      	subs	r0, r3, r4
}
 80030aa:	b009      	add	sp, #36	; 0x24
 80030ac:	bd30      	pop	{r4, r5, pc}

080030ae <uECC_vli_modAdd>:
{
 80030ae:	b570      	push	{r4, r5, r6, lr}
 80030b0:	0004      	movs	r4, r0
 80030b2:	001e      	movs	r6, r3
 80030b4:	ab04      	add	r3, sp, #16
 80030b6:	2500      	movs	r5, #0
 80030b8:	575d      	ldrsb	r5, [r3, r5]
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 80030ba:	002b      	movs	r3, r5
 80030bc:	f7ff fec3 	bl	8002e46 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d106      	bne.n	80030d2 <uECC_vli_modAdd+0x24>
 80030c4:	002a      	movs	r2, r5
 80030c6:	0021      	movs	r1, r4
 80030c8:	0030      	movs	r0, r6
 80030ca:	f7ff ff77 	bl	8002fbc <uECC_vli_cmp_unsafe>
 80030ce:	2801      	cmp	r0, #1
 80030d0:	d005      	beq.n	80030de <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
 80030d2:	002b      	movs	r3, r5
 80030d4:	0032      	movs	r2, r6
 80030d6:	0021      	movs	r1, r4
 80030d8:	0020      	movs	r0, r4
 80030da:	f7ff ffa7 	bl	800302c <uECC_vli_sub>
}
 80030de:	bd70      	pop	{r4, r5, r6, pc}

080030e0 <uECC_vli_modSub>:
{
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	0004      	movs	r4, r0
 80030e4:	001e      	movs	r6, r3
 80030e6:	ab04      	add	r3, sp, #16
 80030e8:	2500      	movs	r5, #0
 80030ea:	575d      	ldrsb	r5, [r3, r5]
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 80030ec:	002b      	movs	r3, r5
 80030ee:	f7ff ff9d 	bl	800302c <uECC_vli_sub>
	if (l_borrow) {
 80030f2:	2800      	cmp	r0, #0
 80030f4:	d100      	bne.n	80030f8 <uECC_vli_modSub+0x18>
}
 80030f6:	bd70      	pop	{r4, r5, r6, pc}
		uECC_vli_add(result, result, mod, num_words);
 80030f8:	002b      	movs	r3, r5
 80030fa:	0032      	movs	r2, r6
 80030fc:	0021      	movs	r1, r4
 80030fe:	0020      	movs	r0, r4
 8003100:	f7ff fea1 	bl	8002e46 <uECC_vli_add>
}
 8003104:	e7f7      	b.n	80030f6 <uECC_vli_modSub+0x16>

08003106 <uECC_vli_mmod>:
{
 8003106:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003108:	46de      	mov	lr, fp
 800310a:	4657      	mov	r7, sl
 800310c:	464e      	mov	r6, r9
 800310e:	4645      	mov	r5, r8
 8003110:	b5e0      	push	{r5, r6, r7, lr}
 8003112:	b0a7      	sub	sp, #156	; 0x9c
 8003114:	9003      	str	r0, [sp, #12]
 8003116:	0015      	movs	r5, r2
 8003118:	001c      	movs	r4, r3
	uECC_word_t *v[2] = {tmp, product};
 800311a:	ab06      	add	r3, sp, #24
 800311c:	9304      	str	r3, [sp, #16]
 800311e:	9105      	str	r1, [sp, #20]
			uECC_vli_numBits(mod, num_words);
 8003120:	0021      	movs	r1, r4
 8003122:	0010      	movs	r0, r2
 8003124:	f7ff ff12 	bl	8002f4c <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
 8003128:	9401      	str	r4, [sp, #4]
 800312a:	01a7      	lsls	r7, r4, #6
 800312c:	1a3f      	subs	r7, r7, r0
 800312e:	b23a      	sxth	r2, r7
 8003130:	4692      	mov	sl, r2
	wordcount_t word_shift = shift / uECC_WORD_BITS;
 8003132:	17d2      	asrs	r2, r2, #31
 8003134:	231f      	movs	r3, #31
 8003136:	001e      	movs	r6, r3
 8003138:	4016      	ands	r6, r2
 800313a:	4456      	add	r6, sl
 800313c:	1176      	asrs	r6, r6, #5
 800313e:	b276      	sxtb	r6, r6
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
 8003140:	0ed2      	lsrs	r2, r2, #27
 8003142:	4651      	mov	r1, sl
 8003144:	188c      	adds	r4, r1, r2
 8003146:	401c      	ands	r4, r3
 8003148:	1aa4      	subs	r4, r4, r2
 800314a:	b264      	sxtb	r4, r4
	uECC_vli_clear(mod_multiple, word_shift);
 800314c:	0031      	movs	r1, r6
 800314e:	a816      	add	r0, sp, #88	; 0x58
 8003150:	f7ff fed4 	bl	8002efc <uECC_vli_clear>
	if (bit_shift > 0) {
 8003154:	2c00      	cmp	r4, #0
 8003156:	dd2b      	ble.n	80031b0 <uECC_vli_mmod+0xaa>
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
 8003158:	9b01      	ldr	r3, [sp, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d015      	beq.n	800318a <uECC_vli_mmod+0x84>
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4698      	mov	r8, r3
 8003162:	00b6      	lsls	r6, r6, #2
 8003164:	ab16      	add	r3, sp, #88	; 0x58
 8003166:	1999      	adds	r1, r3, r6
 8003168:	2000      	movs	r0, #0
 800316a:	2300      	movs	r3, #0
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 800316c:	2620      	movs	r6, #32
 800316e:	1b36      	subs	r6, r6, r4
 8003170:	001f      	movs	r7, r3
 8003172:	0032      	movs	r2, r6
 8003174:	002e      	movs	r6, r5
 8003176:	4645      	mov	r5, r8
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
 8003178:	5833      	ldr	r3, [r6, r0]
 800317a:	40a3      	lsls	r3, r4
 800317c:	433b      	orrs	r3, r7
 800317e:	500b      	str	r3, [r1, r0]
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 8003180:	5837      	ldr	r7, [r6, r0]
 8003182:	40d7      	lsrs	r7, r2
 8003184:	3004      	adds	r0, #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
 8003186:	42a8      	cmp	r0, r5
 8003188:	d1f6      	bne.n	8003178 <uECC_vli_mmod+0x72>
	for (index = 1; shift >= 0; --shift) {
 800318a:	4653      	mov	r3, sl
 800318c:	2b00      	cmp	r3, #0
 800318e:	db61      	blt.n	8003254 <uECC_vli_mmod+0x14e>
		for (i = 0; i < num_words * 2; ++i) {
 8003190:	9a01      	ldr	r2, [sp, #4]
 8003192:	4691      	mov	r9, r2
 8003194:	0056      	lsls	r6, r2, #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8003196:	0093      	lsls	r3, r2, #2
 8003198:	aa16      	add	r2, sp, #88	; 0x58
 800319a:	4694      	mov	ip, r2
 800319c:	4463      	add	r3, ip
 800319e:	9302      	str	r3, [sp, #8]
 80031a0:	2301      	movs	r3, #1
 80031a2:	469b      	mov	fp, r3
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 80031a4:	0015      	movs	r5, r2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
 80031a6:	464b      	mov	r3, r9
 80031a8:	3b01      	subs	r3, #1
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4698      	mov	r8, r3
 80031ae:	e03b      	b.n	8003228 <uECC_vli_mmod+0x122>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
 80031b0:	00b6      	lsls	r6, r6, #2
 80031b2:	ab16      	add	r3, sp, #88	; 0x58
 80031b4:	1998      	adds	r0, r3, r6
 80031b6:	9a01      	ldr	r2, [sp, #4]
 80031b8:	0029      	movs	r1, r5
 80031ba:	f7ff fef1 	bl	8002fa0 <uECC_vli_set>
 80031be:	e7e4      	b.n	800318a <uECC_vli_mmod+0x84>
			v[1 - index][i] = diff;
 80031c0:	9a00      	ldr	r2, [sp, #0]
 80031c2:	5113      	str	r3, [r2, r4]
 80031c4:	3001      	adds	r0, #1
 80031c6:	b240      	sxtb	r0, r0
		for (i = 0; i < num_words * 2; ++i) {
 80031c8:	0003      	movs	r3, r0
 80031ca:	42b0      	cmp	r0, r6
 80031cc:	da0d      	bge.n	80031ea <uECC_vli_mmod+0xe4>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 80031ce:	0084      	lsls	r4, r0, #2
 80031d0:	593a      	ldr	r2, [r7, r4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	595b      	ldr	r3, [r3, r5]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	4661      	mov	r1, ip
 80031da:	1a5b      	subs	r3, r3, r1
			if (diff != v[index][i]) {
 80031dc:	429a      	cmp	r2, r3
 80031de:	d0ef      	beq.n	80031c0 <uECC_vli_mmod+0xba>
				borrow = (diff > v[index][i]);
 80031e0:	429a      	cmp	r2, r3
 80031e2:	4192      	sbcs	r2, r2
 80031e4:	4252      	negs	r2, r2
 80031e6:	4694      	mov	ip, r2
 80031e8:	e7ea      	b.n	80031c0 <uECC_vli_mmod+0xba>
 80031ea:	4661      	mov	r1, ip
		index = !(index ^ borrow);
 80031ec:	465b      	mov	r3, fp
 80031ee:	1a59      	subs	r1, r3, r1
 80031f0:	424f      	negs	r7, r1
 80031f2:	414f      	adcs	r7, r1
 80031f4:	b2fb      	uxtb	r3, r7
 80031f6:	469b      	mov	fp, r3
		uECC_vli_rshift1(mod_multiple, num_words);
 80031f8:	9c01      	ldr	r4, [sp, #4]
 80031fa:	0021      	movs	r1, r4
 80031fc:	0028      	movs	r0, r5
 80031fe:	f7ff fd51 	bl	8002ca4 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
 8003202:	464b      	mov	r3, r9
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	595b      	ldr	r3, [r3, r5]
 8003208:	07db      	lsls	r3, r3, #31
 800320a:	4642      	mov	r2, r8
 800320c:	5952      	ldr	r2, [r2, r5]
 800320e:	4313      	orrs	r3, r2
 8003210:	4642      	mov	r2, r8
 8003212:	5153      	str	r3, [r2, r5]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8003214:	0021      	movs	r1, r4
 8003216:	9802      	ldr	r0, [sp, #8]
 8003218:	f7ff fd44 	bl	8002ca4 <uECC_vli_rshift1>
 800321c:	4654      	mov	r4, sl
 800321e:	3c01      	subs	r4, #1
 8003220:	b223      	sxth	r3, r4
 8003222:	469a      	mov	sl, r3
	for (index = 1; shift >= 0; --shift) {
 8003224:	3301      	adds	r3, #1
 8003226:	d017      	beq.n	8003258 <uECC_vli_mmod+0x152>
		for (i = 0; i < num_words * 2; ++i) {
 8003228:	2e00      	cmp	r6, #0
 800322a:	dd11      	ble.n	8003250 <uECC_vli_mmod+0x14a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 800322c:	465b      	mov	r3, fp
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	aa04      	add	r2, sp, #16
 8003232:	589f      	ldr	r7, [r3, r2]
			v[1 - index][i] = diff;
 8003234:	2301      	movs	r3, #1
 8003236:	465a      	mov	r2, fp
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	aa04      	add	r2, sp, #16
 800323e:	589b      	ldr	r3, [r3, r2]
 8003240:	469c      	mov	ip, r3
 8003242:	2300      	movs	r3, #0
 8003244:	2000      	movs	r0, #0
 8003246:	2100      	movs	r1, #0
 8003248:	4662      	mov	r2, ip
 800324a:	468c      	mov	ip, r1
 800324c:	9200      	str	r2, [sp, #0]
 800324e:	e7be      	b.n	80031ce <uECC_vli_mmod+0xc8>
		for (i = 0; i < num_words * 2; ++i) {
 8003250:	2100      	movs	r1, #0
 8003252:	e7cb      	b.n	80031ec <uECC_vli_mmod+0xe6>
	for (index = 1; shift >= 0; --shift) {
 8003254:	2301      	movs	r3, #1
 8003256:	469b      	mov	fp, r3
	uECC_vli_set(result, v[index], num_words);
 8003258:	465b      	mov	r3, fp
 800325a:	009c      	lsls	r4, r3, #2
 800325c:	ab04      	add	r3, sp, #16
 800325e:	58e1      	ldr	r1, [r4, r3]
 8003260:	9a01      	ldr	r2, [sp, #4]
 8003262:	9803      	ldr	r0, [sp, #12]
 8003264:	f7ff fe9c 	bl	8002fa0 <uECC_vli_set>
}
 8003268:	b027      	add	sp, #156	; 0x9c
 800326a:	bc3c      	pop	{r2, r3, r4, r5}
 800326c:	4690      	mov	r8, r2
 800326e:	4699      	mov	r9, r3
 8003270:	46a2      	mov	sl, r4
 8003272:	46ab      	mov	fp, r5
 8003274:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003276 <uECC_vli_modMult>:
{
 8003276:	b570      	push	{r4, r5, r6, lr}
 8003278:	b090      	sub	sp, #64	; 0x40
 800327a:	0005      	movs	r5, r0
 800327c:	001e      	movs	r6, r3
 800327e:	ab14      	add	r3, sp, #80	; 0x50
 8003280:	2400      	movs	r4, #0
 8003282:	571c      	ldrsb	r4, [r3, r4]
	uECC_vli_mult(product, left, right, num_words);
 8003284:	0023      	movs	r3, r4
 8003286:	4668      	mov	r0, sp
 8003288:	f7ff fd22 	bl	8002cd0 <uECC_vli_mult>
	uECC_vli_mmod(result, product, mod, num_words);
 800328c:	0023      	movs	r3, r4
 800328e:	0032      	movs	r2, r6
 8003290:	4669      	mov	r1, sp
 8003292:	0028      	movs	r0, r5
 8003294:	f7ff ff37 	bl	8003106 <uECC_vli_mmod>
}
 8003298:	b010      	add	sp, #64	; 0x40
 800329a:	bd70      	pop	{r4, r5, r6, pc}

0800329c <uECC_vli_modMult_fast>:
{
 800329c:	b530      	push	{r4, r5, lr}
 800329e:	b091      	sub	sp, #68	; 0x44
 80032a0:	0005      	movs	r5, r0
 80032a2:	001c      	movs	r4, r3
	uECC_vli_mult(product, left, right, curve->num_words);
 80032a4:	2300      	movs	r3, #0
 80032a6:	56e3      	ldrsb	r3, [r4, r3]
 80032a8:	4668      	mov	r0, sp
 80032aa:	f7ff fd11 	bl	8002cd0 <uECC_vli_mult>
	curve->mmod_fast(result, product);
 80032ae:	23ac      	movs	r3, #172	; 0xac
 80032b0:	58e3      	ldr	r3, [r4, r3]
 80032b2:	4669      	mov	r1, sp
 80032b4:	0028      	movs	r0, r5
 80032b6:	4798      	blx	r3
}
 80032b8:	b011      	add	sp, #68	; 0x44
 80032ba:	bd30      	pop	{r4, r5, pc}

080032bc <uECC_vli_modSquare_fast>:
{
 80032bc:	b510      	push	{r4, lr}
 80032be:	0013      	movs	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
 80032c0:	000a      	movs	r2, r1
 80032c2:	f7ff ffeb 	bl	800329c <uECC_vli_modMult_fast>
}
 80032c6:	bd10      	pop	{r4, pc}

080032c8 <double_jacobian_secp256k1>:

/* Double in place */
void double_jacobian_secp256k1(uECC_word_t * X1,
		uECC_word_t * Y1,
		uECC_word_t * Z1,
		uECC_Curve curve) {
 80032c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ca:	b095      	sub	sp, #84	; 0x54
 80032cc:	0005      	movs	r5, r0
 80032ce:	000c      	movs	r4, r1
 80032d0:	0017      	movs	r7, r2
 80032d2:	001e      	movs	r6, r3
	/* t1 = X, t2 = Y, t3 = Z */
	uECC_word_t t4[NUM_ECC_WORDS];
	uECC_word_t t5[NUM_ECC_WORDS];

	if (uECC_vli_isZero(Z1, NUM_ECC_WORDS)) {
 80032d4:	2108      	movs	r1, #8
 80032d6:	0010      	movs	r0, r2
 80032d8:	f7ff fe1d 	bl	8002f16 <uECC_vli_isZero>
 80032dc:	2800      	cmp	r0, #0
 80032de:	d001      	beq.n	80032e4 <double_jacobian_secp256k1+0x1c>
	uECC_vli_modSub(X1, X1, t4, curve->p, NUM_ECC_WORDS); /* t1 = B^2 - 2A = x3 */

	uECC_vli_modSub(t4, t4, X1, curve->p, NUM_ECC_WORDS); /* t4 = A - x3 */
	uECC_vli_modMult_fast(Y1, Y1, t4, curve);                   /* t2 = B * (A - x3) */
	uECC_vli_modSub(Y1, Y1, t5, curve->p, NUM_ECC_WORDS); /* t2 = B * (A - x3) - y1^4 = y3 */
}
 80032e0:	b015      	add	sp, #84	; 0x54
 80032e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_modSquare_fast(t5, Y1, curve);   /* t5 = y1^2 */
 80032e4:	0032      	movs	r2, r6
 80032e6:	0021      	movs	r1, r4
 80032e8:	a804      	add	r0, sp, #16
 80032ea:	f7ff ffe7 	bl	80032bc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t4, X1, t5, curve); /* t4 = x1*y1^2 = A */
 80032ee:	0033      	movs	r3, r6
 80032f0:	aa04      	add	r2, sp, #16
 80032f2:	0029      	movs	r1, r5
 80032f4:	a80c      	add	r0, sp, #48	; 0x30
 80032f6:	f7ff ffd1 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(X1, X1, curve);   /* t1 = x1^2 */
 80032fa:	0032      	movs	r2, r6
 80032fc:	0029      	movs	r1, r5
 80032fe:	0028      	movs	r0, r5
 8003300:	f7ff ffdc 	bl	80032bc <uECC_vli_modSquare_fast>
	uECC_vli_modSquare_fast(t5, t5, curve);   /* t5 = y1^4 */
 8003304:	0032      	movs	r2, r6
 8003306:	a904      	add	r1, sp, #16
 8003308:	0008      	movs	r0, r1
 800330a:	f7ff ffd7 	bl	80032bc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Z1, Y1, Z1, curve); /* t3 = y1*z1 = z3 */
 800330e:	0033      	movs	r3, r6
 8003310:	003a      	movs	r2, r7
 8003312:	0021      	movs	r1, r4
 8003314:	0038      	movs	r0, r7
 8003316:	f7ff ffc1 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Y1, X1, X1, curve->p, NUM_ECC_WORDS); /* t2 = 2*x1^2 */
 800331a:	1d33      	adds	r3, r6, #4
 800331c:	2708      	movs	r7, #8
 800331e:	9700      	str	r7, [sp, #0]
 8003320:	9303      	str	r3, [sp, #12]
 8003322:	002a      	movs	r2, r5
 8003324:	0029      	movs	r1, r5
 8003326:	0020      	movs	r0, r4
 8003328:	f7ff fec1 	bl	80030ae <uECC_vli_modAdd>
	uECC_vli_modAdd(Y1, Y1, X1, curve->p, NUM_ECC_WORDS); /* t2 = 3*x1^2 */
 800332c:	9700      	str	r7, [sp, #0]
 800332e:	9f03      	ldr	r7, [sp, #12]
 8003330:	003b      	movs	r3, r7
 8003332:	002a      	movs	r2, r5
 8003334:	0021      	movs	r1, r4
 8003336:	0020      	movs	r0, r4
 8003338:	f7ff feb9 	bl	80030ae <uECC_vli_modAdd>
	if (uECC_vli_testBit(Y1, 0)) {
 800333c:	2100      	movs	r1, #0
 800333e:	0020      	movs	r0, r4
 8003340:	f7ff fdfb 	bl	8002f3a <uECC_vli_testBit>
 8003344:	2800      	cmp	r0, #0
 8003346:	d037      	beq.n	80033b8 <double_jacobian_secp256k1+0xf0>
		uECC_word_t carry = uECC_vli_add(Y1, Y1, curve->p, NUM_ECC_WORDS);
 8003348:	2308      	movs	r3, #8
 800334a:	003a      	movs	r2, r7
 800334c:	0021      	movs	r1, r4
 800334e:	0020      	movs	r0, r4
 8003350:	f7ff fd79 	bl	8002e46 <uECC_vli_add>
 8003354:	0007      	movs	r7, r0
		uECC_vli_rshift1(Y1, NUM_ECC_WORDS);
 8003356:	2108      	movs	r1, #8
 8003358:	0020      	movs	r0, r4
 800335a:	f7ff fca3 	bl	8002ca4 <uECC_vli_rshift1>
		Y1[NUM_ECC_WORDS - 1] |= carry << (uECC_WORD_BITS - 1);
 800335e:	07f8      	lsls	r0, r7, #31
 8003360:	69e3      	ldr	r3, [r4, #28]
 8003362:	4318      	orrs	r0, r3
 8003364:	61e0      	str	r0, [r4, #28]
	uECC_vli_modSquare_fast(X1, Y1, curve);                     /* t1 = B^2 */
 8003366:	0032      	movs	r2, r6
 8003368:	0021      	movs	r1, r4
 800336a:	0028      	movs	r0, r5
 800336c:	f7ff ffa6 	bl	80032bc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X1, X1, t4, curve->p, NUM_ECC_WORDS); /* t1 = B^2 - A */
 8003370:	2708      	movs	r7, #8
 8003372:	9700      	str	r7, [sp, #0]
 8003374:	9b03      	ldr	r3, [sp, #12]
 8003376:	aa0c      	add	r2, sp, #48	; 0x30
 8003378:	0029      	movs	r1, r5
 800337a:	0028      	movs	r0, r5
 800337c:	f7ff feb0 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modSub(X1, X1, t4, curve->p, NUM_ECC_WORDS); /* t1 = B^2 - 2A = x3 */
 8003380:	9700      	str	r7, [sp, #0]
 8003382:	9b03      	ldr	r3, [sp, #12]
 8003384:	aa0c      	add	r2, sp, #48	; 0x30
 8003386:	0029      	movs	r1, r5
 8003388:	0028      	movs	r0, r5
 800338a:	f7ff fea9 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modSub(t4, t4, X1, curve->p, NUM_ECC_WORDS); /* t4 = A - x3 */
 800338e:	9700      	str	r7, [sp, #0]
 8003390:	9b03      	ldr	r3, [sp, #12]
 8003392:	002a      	movs	r2, r5
 8003394:	a90c      	add	r1, sp, #48	; 0x30
 8003396:	0008      	movs	r0, r1
 8003398:	f7ff fea2 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t4, curve);                   /* t2 = B * (A - x3) */
 800339c:	0033      	movs	r3, r6
 800339e:	aa0c      	add	r2, sp, #48	; 0x30
 80033a0:	0021      	movs	r1, r4
 80033a2:	0020      	movs	r0, r4
 80033a4:	f7ff ff7a 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y1, Y1, t5, curve->p, NUM_ECC_WORDS); /* t2 = B * (A - x3) - y1^4 = y3 */
 80033a8:	9700      	str	r7, [sp, #0]
 80033aa:	9b03      	ldr	r3, [sp, #12]
 80033ac:	aa04      	add	r2, sp, #16
 80033ae:	0021      	movs	r1, r4
 80033b0:	0020      	movs	r0, r4
 80033b2:	f7ff fe95 	bl	80030e0 <uECC_vli_modSub>
 80033b6:	e793      	b.n	80032e0 <double_jacobian_secp256k1+0x18>
		uECC_vli_rshift1(Y1, NUM_ECC_WORDS);
 80033b8:	2108      	movs	r1, #8
 80033ba:	0020      	movs	r0, r4
 80033bc:	f7ff fc72 	bl	8002ca4 <uECC_vli_rshift1>
 80033c0:	e7d1      	b.n	8003366 <double_jacobian_secp256k1+0x9e>

080033c2 <x_side_secp256k1>:

/* Computes result = x^3 + b. result must not overlap x. */
void x_side_secp256k1(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
 80033c2:	b570      	push	{r4, r5, r6, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	0005      	movs	r5, r0
 80033c8:	000e      	movs	r6, r1
 80033ca:	0014      	movs	r4, r2
	uECC_vli_modSquare_fast(result, x, curve);                                /* r = x^2 */
 80033cc:	f7ff ff76 	bl	80032bc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(result, result, x, curve);                          /* r = x^3 */
 80033d0:	0023      	movs	r3, r4
 80033d2:	0032      	movs	r2, r6
 80033d4:	0029      	movs	r1, r5
 80033d6:	0028      	movs	r0, r5
 80033d8:	f7ff ff60 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, NUM_ECC_WORDS); /* r = x^3 + b */
 80033dc:	1d23      	adds	r3, r4, #4
 80033de:	0022      	movs	r2, r4
 80033e0:	3284      	adds	r2, #132	; 0x84
 80033e2:	2108      	movs	r1, #8
 80033e4:	9100      	str	r1, [sp, #0]
 80033e6:	0029      	movs	r1, r5
 80033e8:	0028      	movs	r0, r5
 80033ea:	f7ff fe60 	bl	80030ae <uECC_vli_modAdd>
}
 80033ee:	b002      	add	sp, #8
 80033f0:	bd70      	pop	{r4, r5, r6, pc}

080033f2 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		uECC_word_t * X2, uECC_word_t * Y2,
		uECC_Curve curve)
{
 80033f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f4:	b09d      	sub	sp, #116	; 0x74
 80033f6:	0007      	movs	r7, r0
 80033f8:	9102      	str	r1, [sp, #8]
 80033fa:	0016      	movs	r6, r2
 80033fc:	9303      	str	r3, [sp, #12]
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
 80033fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003400:	2500      	movs	r5, #0
 8003402:	5755      	ldrsb	r5, [r2, r5]

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8003404:	1d14      	adds	r4, r2, #4
 8003406:	9500      	str	r5, [sp, #0]
 8003408:	0023      	movs	r3, r4
 800340a:	0002      	movs	r2, r0
 800340c:	0031      	movs	r1, r6
 800340e:	a814      	add	r0, sp, #80	; 0x50
 8003410:	f7ff fe66 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
 8003414:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003416:	a914      	add	r1, sp, #80	; 0x50
 8003418:	0008      	movs	r0, r1
 800341a:	f7ff ff4f 	bl	80032bc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 800341e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003420:	aa14      	add	r2, sp, #80	; 0x50
 8003422:	0039      	movs	r1, r7
 8003424:	0038      	movs	r0, r7
 8003426:	f7ff ff39 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 800342a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800342c:	aa14      	add	r2, sp, #80	; 0x50
 800342e:	0031      	movs	r1, r6
 8003430:	0030      	movs	r0, r6
 8003432:	f7ff ff33 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 8003436:	9500      	str	r5, [sp, #0]
 8003438:	0023      	movs	r3, r4
 800343a:	9a02      	ldr	r2, [sp, #8]
 800343c:	9903      	ldr	r1, [sp, #12]
 800343e:	a814      	add	r0, sp, #80	; 0x50
 8003440:	f7ff fe35 	bl	80030ae <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8003444:	9500      	str	r5, [sp, #0]
 8003446:	0023      	movs	r3, r4
 8003448:	9a02      	ldr	r2, [sp, #8]
 800344a:	9803      	ldr	r0, [sp, #12]
 800344c:	0001      	movs	r1, r0
 800344e:	f7ff fe47 	bl	80030e0 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 8003452:	9500      	str	r5, [sp, #0]
 8003454:	0023      	movs	r3, r4
 8003456:	003a      	movs	r2, r7
 8003458:	0031      	movs	r1, r6
 800345a:	a80c      	add	r0, sp, #48	; 0x30
 800345c:	f7ff fe40 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 8003460:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003462:	aa0c      	add	r2, sp, #48	; 0x30
 8003464:	9802      	ldr	r0, [sp, #8]
 8003466:	0001      	movs	r1, r0
 8003468:	f7ff ff18 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 800346c:	9500      	str	r5, [sp, #0]
 800346e:	0023      	movs	r3, r4
 8003470:	0032      	movs	r2, r6
 8003472:	0039      	movs	r1, r7
 8003474:	a80c      	add	r0, sp, #48	; 0x30
 8003476:	f7ff fe1a 	bl	80030ae <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 800347a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800347c:	9903      	ldr	r1, [sp, #12]
 800347e:	0030      	movs	r0, r6
 8003480:	f7ff ff1c 	bl	80032bc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
 8003484:	9500      	str	r5, [sp, #0]
 8003486:	0023      	movs	r3, r4
 8003488:	aa0c      	add	r2, sp, #48	; 0x30
 800348a:	0031      	movs	r1, r6
 800348c:	0030      	movs	r0, r6
 800348e:	f7ff fe27 	bl	80030e0 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 8003492:	9500      	str	r5, [sp, #0]
 8003494:	0023      	movs	r3, r4
 8003496:	0032      	movs	r2, r6
 8003498:	0039      	movs	r1, r7
 800349a:	a804      	add	r0, sp, #16
 800349c:	f7ff fe20 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 80034a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034a2:	aa04      	add	r2, sp, #16
 80034a4:	9e03      	ldr	r6, [sp, #12]
 80034a6:	0031      	movs	r1, r6
 80034a8:	0030      	movs	r0, r6
 80034aa:	f7ff fef7 	bl	800329c <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
 80034ae:	9500      	str	r5, [sp, #0]
 80034b0:	0023      	movs	r3, r4
 80034b2:	9a02      	ldr	r2, [sp, #8]
 80034b4:	0031      	movs	r1, r6
 80034b6:	0030      	movs	r0, r6
 80034b8:	f7ff fe12 	bl	80030e0 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 80034bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80034be:	a914      	add	r1, sp, #80	; 0x50
 80034c0:	ab04      	add	r3, sp, #16
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7ff fefa 	bl	80032bc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
 80034c8:	9500      	str	r5, [sp, #0]
 80034ca:	0023      	movs	r3, r4
 80034cc:	aa0c      	add	r2, sp, #48	; 0x30
 80034ce:	a904      	add	r1, sp, #16
 80034d0:	0008      	movs	r0, r1
 80034d2:	f7ff fe05 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 80034d6:	9500      	str	r5, [sp, #0]
 80034d8:	0023      	movs	r3, r4
 80034da:	003a      	movs	r2, r7
 80034dc:	a904      	add	r1, sp, #16
 80034de:	ae0c      	add	r6, sp, #48	; 0x30
 80034e0:	0030      	movs	r0, r6
 80034e2:	f7ff fdfd 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 80034e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034e8:	aa14      	add	r2, sp, #80	; 0x50
 80034ea:	a90c      	add	r1, sp, #48	; 0x30
 80034ec:	0008      	movs	r0, r1
 80034ee:	f7ff fed5 	bl	800329c <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
 80034f2:	9500      	str	r5, [sp, #0]
 80034f4:	0023      	movs	r3, r4
 80034f6:	9802      	ldr	r0, [sp, #8]
 80034f8:	0002      	movs	r2, r0
 80034fa:	a90c      	add	r1, sp, #48	; 0x30
 80034fc:	f7ff fdf0 	bl	80030e0 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
 8003500:	002a      	movs	r2, r5
 8003502:	a904      	add	r1, sp, #16
 8003504:	0038      	movs	r0, r7
 8003506:	f7ff fd4b 	bl	8002fa0 <uECC_vli_set>
}
 800350a:	b01d      	add	sp, #116	; 0x74
 800350c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800350e <uECC_vli_modInv>:
{
 800350e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003510:	b0a3      	sub	sp, #140	; 0x8c
 8003512:	0006      	movs	r6, r0
 8003514:	000f      	movs	r7, r1
 8003516:	0015      	movs	r5, r2
 8003518:	001c      	movs	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
 800351a:	0019      	movs	r1, r3
 800351c:	0038      	movs	r0, r7
 800351e:	f7ff fcfa 	bl	8002f16 <uECC_vli_isZero>
 8003522:	2800      	cmp	r0, #0
 8003524:	d115      	bne.n	8003552 <uECC_vli_modInv+0x44>
	uECC_vli_set(a, input, num_words);
 8003526:	0022      	movs	r2, r4
 8003528:	0039      	movs	r1, r7
 800352a:	a81a      	add	r0, sp, #104	; 0x68
 800352c:	f7ff fd38 	bl	8002fa0 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
 8003530:	0022      	movs	r2, r4
 8003532:	0029      	movs	r1, r5
 8003534:	a812      	add	r0, sp, #72	; 0x48
 8003536:	f7ff fd33 	bl	8002fa0 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
 800353a:	0021      	movs	r1, r4
 800353c:	a80a      	add	r0, sp, #40	; 0x28
 800353e:	f7ff fcdd 	bl	8002efc <uECC_vli_clear>
	u[0] = 1;
 8003542:	2301      	movs	r3, #1
 8003544:	930a      	str	r3, [sp, #40]	; 0x28
	uECC_vli_clear(v, num_words);
 8003546:	0021      	movs	r1, r4
 8003548:	a802      	add	r0, sp, #8
 800354a:	f7ff fcd7 	bl	8002efc <uECC_vli_clear>
		if (EVEN(a)) {
 800354e:	2701      	movs	r7, #1
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8003550:	e023      	b.n	800359a <uECC_vli_modInv+0x8c>
		uECC_vli_clear(result, num_words);
 8003552:	0021      	movs	r1, r4
 8003554:	0030      	movs	r0, r6
 8003556:	f7ff fcd1 	bl	8002efc <uECC_vli_clear>
 800355a:	e070      	b.n	800363e <uECC_vli_modInv+0x130>
			uECC_vli_rshift1(a, num_words);
 800355c:	0021      	movs	r1, r4
 800355e:	a81a      	add	r0, sp, #104	; 0x68
 8003560:	f7ff fba0 	bl	8002ca4 <uECC_vli_rshift1>
			vli_modInv_update(u, mod, num_words);
 8003564:	0022      	movs	r2, r4
 8003566:	0029      	movs	r1, r5
 8003568:	a80a      	add	r0, sp, #40	; 0x28
 800356a:	f7ff fc97 	bl	8002e9c <vli_modInv_update>
 800356e:	e014      	b.n	800359a <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
 8003570:	0021      	movs	r1, r4
 8003572:	a812      	add	r0, sp, #72	; 0x48
 8003574:	f7ff fb96 	bl	8002ca4 <uECC_vli_rshift1>
			vli_modInv_update(v, mod, num_words);
 8003578:	0022      	movs	r2, r4
 800357a:	0029      	movs	r1, r5
 800357c:	a802      	add	r0, sp, #8
 800357e:	f7ff fc8d 	bl	8002e9c <vli_modInv_update>
 8003582:	e00a      	b.n	800359a <uECC_vli_modInv+0x8c>
			uECC_vli_sub(u, u, v, num_words);
 8003584:	0023      	movs	r3, r4
 8003586:	aa02      	add	r2, sp, #8
 8003588:	a90a      	add	r1, sp, #40	; 0x28
 800358a:	0008      	movs	r0, r1
 800358c:	f7ff fd4e 	bl	800302c <uECC_vli_sub>
			vli_modInv_update(u, mod, num_words);
 8003590:	0022      	movs	r2, r4
 8003592:	0029      	movs	r1, r5
 8003594:	a80a      	add	r0, sp, #40	; 0x28
 8003596:	f7ff fc81 	bl	8002e9c <vli_modInv_update>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 800359a:	0022      	movs	r2, r4
 800359c:	a912      	add	r1, sp, #72	; 0x48
 800359e:	a81a      	add	r0, sp, #104	; 0x68
 80035a0:	f7ff fd0c 	bl	8002fbc <uECC_vli_cmp_unsafe>
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d045      	beq.n	8003634 <uECC_vli_modInv+0x126>
		if (EVEN(a)) {
 80035a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	423b      	tst	r3, r7
 80035ae:	d0d5      	beq.n	800355c <uECC_vli_modInv+0x4e>
		} else if (EVEN(b)) {
 80035b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	423b      	tst	r3, r7
 80035b6:	d0db      	beq.n	8003570 <uECC_vli_modInv+0x62>
		} else if (cmpResult > 0) {
 80035b8:	2800      	cmp	r0, #0
 80035ba:	dd17      	ble.n	80035ec <uECC_vli_modInv+0xde>
			uECC_vli_sub(a, a, b, num_words);
 80035bc:	0023      	movs	r3, r4
 80035be:	aa12      	add	r2, sp, #72	; 0x48
 80035c0:	a91a      	add	r1, sp, #104	; 0x68
 80035c2:	0008      	movs	r0, r1
 80035c4:	f7ff fd32 	bl	800302c <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
 80035c8:	0021      	movs	r1, r4
 80035ca:	a81a      	add	r0, sp, #104	; 0x68
 80035cc:	f7ff fb6a 	bl	8002ca4 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 80035d0:	0022      	movs	r2, r4
 80035d2:	a902      	add	r1, sp, #8
 80035d4:	a80a      	add	r0, sp, #40	; 0x28
 80035d6:	f7ff fcf1 	bl	8002fbc <uECC_vli_cmp_unsafe>
 80035da:	2800      	cmp	r0, #0
 80035dc:	dad2      	bge.n	8003584 <uECC_vli_modInv+0x76>
				uECC_vli_add(u, u, mod, num_words);
 80035de:	0023      	movs	r3, r4
 80035e0:	002a      	movs	r2, r5
 80035e2:	a90a      	add	r1, sp, #40	; 0x28
 80035e4:	0008      	movs	r0, r1
 80035e6:	f7ff fc2e 	bl	8002e46 <uECC_vli_add>
 80035ea:	e7cb      	b.n	8003584 <uECC_vli_modInv+0x76>
			uECC_vli_sub(b, b, a, num_words);
 80035ec:	0023      	movs	r3, r4
 80035ee:	aa1a      	add	r2, sp, #104	; 0x68
 80035f0:	a912      	add	r1, sp, #72	; 0x48
 80035f2:	0008      	movs	r0, r1
 80035f4:	f7ff fd1a 	bl	800302c <uECC_vli_sub>
			uECC_vli_rshift1(b, num_words);
 80035f8:	0021      	movs	r1, r4
 80035fa:	a812      	add	r0, sp, #72	; 0x48
 80035fc:	f7ff fb52 	bl	8002ca4 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 8003600:	0022      	movs	r2, r4
 8003602:	a90a      	add	r1, sp, #40	; 0x28
 8003604:	a802      	add	r0, sp, #8
 8003606:	f7ff fcd9 	bl	8002fbc <uECC_vli_cmp_unsafe>
 800360a:	2800      	cmp	r0, #0
 800360c:	db0b      	blt.n	8003626 <uECC_vli_modInv+0x118>
			uECC_vli_sub(v, v, u, num_words);
 800360e:	0023      	movs	r3, r4
 8003610:	aa0a      	add	r2, sp, #40	; 0x28
 8003612:	a902      	add	r1, sp, #8
 8003614:	0008      	movs	r0, r1
 8003616:	f7ff fd09 	bl	800302c <uECC_vli_sub>
			vli_modInv_update(v, mod, num_words);
 800361a:	0022      	movs	r2, r4
 800361c:	0029      	movs	r1, r5
 800361e:	a802      	add	r0, sp, #8
 8003620:	f7ff fc3c 	bl	8002e9c <vli_modInv_update>
 8003624:	e7b9      	b.n	800359a <uECC_vli_modInv+0x8c>
				uECC_vli_add(v, v, mod, num_words);
 8003626:	0023      	movs	r3, r4
 8003628:	002a      	movs	r2, r5
 800362a:	a902      	add	r1, sp, #8
 800362c:	0008      	movs	r0, r1
 800362e:	f7ff fc0a 	bl	8002e46 <uECC_vli_add>
 8003632:	e7ec      	b.n	800360e <uECC_vli_modInv+0x100>
	uECC_vli_set(result, u, num_words);
 8003634:	0022      	movs	r2, r4
 8003636:	a90a      	add	r1, sp, #40	; 0x28
 8003638:	0030      	movs	r0, r6
 800363a:	f7ff fcb1 	bl	8002fa0 <uECC_vli_set>
}
 800363e:	b023      	add	sp, #140	; 0x8c
 8003640:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003644 <uECC_secp256k1>:
}
 8003644:	4800      	ldr	r0, [pc, #0]	; (8003648 <uECC_secp256k1+0x4>)
 8003646:	4770      	bx	lr
 8003648:	08004e78 	.word	0x08004e78

0800364c <omega_mult_secp256k1>:
void omega_mult_secp256k1(uECC_word_t * result, const uECC_word_t * right) {
 800364c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364e:	46ce      	mov	lr, r9
 8003650:	b500      	push	{lr}
 8003652:	b082      	sub	sp, #8
 8003654:	0006      	movs	r6, r0
 8003656:	4689      	mov	r9, r1
 8003658:	2700      	movs	r7, #0
	uint32_t carry = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	9301      	str	r3, [sp, #4]
		uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
 800365e:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <omega_mult_secp256k1+0x4c>)
 8003660:	2300      	movs	r3, #0
 8003662:	4649      	mov	r1, r9
 8003664:	59c8      	ldr	r0, [r1, r7]
 8003666:	2100      	movs	r1, #0
 8003668:	f7fc feec 	bl	8000444 <__aeabi_lmul>
 800366c:	9c01      	ldr	r4, [sp, #4]
 800366e:	2500      	movs	r5, #0
 8003670:	1900      	adds	r0, r0, r4
 8003672:	4169      	adcs	r1, r5
		result[k] = (uint32_t) p;
 8003674:	51f0      	str	r0, [r6, r7]
		carry = p >> 32;
 8003676:	9101      	str	r1, [sp, #4]
 8003678:	3704      	adds	r7, #4
	for (k = 0; k < NUM_ECC_WORDS; ++k) {
 800367a:	2f20      	cmp	r7, #32
 800367c:	d1ef      	bne.n	800365e <omega_mult_secp256k1+0x12>
	result[NUM_ECC_WORDS] = carry;
 800367e:	6231      	str	r1, [r6, #32]
	result[1 + NUM_ECC_WORDS] =	uECC_vli_add(result + 1, result + 1, right, NUM_ECC_WORDS);
 8003680:	1d30      	adds	r0, r6, #4
 8003682:	2308      	movs	r3, #8
 8003684:	464a      	mov	r2, r9
 8003686:	0001      	movs	r1, r0
 8003688:	f7ff fbdd 	bl	8002e46 <uECC_vli_add>
 800368c:	6270      	str	r0, [r6, #36]	; 0x24
}
 800368e:	b002      	add	sp, #8
 8003690:	bc04      	pop	{r2}
 8003692:	4691      	mov	r9, r2
 8003694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	000003d1 	.word	0x000003d1

0800369c <vli_mmod_fast_secp256k1>:
{
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	b090      	sub	sp, #64	; 0x40
 80036a0:	0005      	movs	r5, r0
 80036a2:	000e      	movs	r6, r1
	uECC_vli_clear(tmp, NUM_ECC_WORDS);
 80036a4:	2108      	movs	r1, #8
 80036a6:	4668      	mov	r0, sp
 80036a8:	f7ff fc28 	bl	8002efc <uECC_vli_clear>
	uECC_vli_clear(tmp + NUM_ECC_WORDS, NUM_ECC_WORDS);
 80036ac:	2108      	movs	r1, #8
 80036ae:	a808      	add	r0, sp, #32
 80036b0:	f7ff fc24 	bl	8002efc <uECC_vli_clear>
	omega_mult_secp256k1(tmp, product + NUM_ECC_WORDS); /* (Rq, q) = q * c */
 80036b4:	0031      	movs	r1, r6
 80036b6:	3120      	adds	r1, #32
 80036b8:	4668      	mov	r0, sp
 80036ba:	f7ff ffc7 	bl	800364c <omega_mult_secp256k1>
	carry = uECC_vli_add(result, product, tmp, NUM_ECC_WORDS); /* (C, r) = r + q       */
 80036be:	2308      	movs	r3, #8
 80036c0:	466a      	mov	r2, sp
 80036c2:	0031      	movs	r1, r6
 80036c4:	0028      	movs	r0, r5
 80036c6:	f7ff fbbe 	bl	8002e46 <uECC_vli_add>
 80036ca:	0004      	movs	r4, r0
	uECC_vli_clear(product, NUM_ECC_WORDS);
 80036cc:	2108      	movs	r1, #8
 80036ce:	0030      	movs	r0, r6
 80036d0:	f7ff fc14 	bl	8002efc <uECC_vli_clear>
	omega_mult_secp256k1(product, tmp + NUM_ECC_WORDS); /* Rq*c */
 80036d4:	a908      	add	r1, sp, #32
 80036d6:	0030      	movs	r0, r6
 80036d8:	f7ff ffb8 	bl	800364c <omega_mult_secp256k1>
	carry += uECC_vli_add(result, result, product, NUM_ECC_WORDS); /* (C1, r) = r + Rq*c */
 80036dc:	2308      	movs	r3, #8
 80036de:	0032      	movs	r2, r6
 80036e0:	0029      	movs	r1, r5
 80036e2:	0028      	movs	r0, r5
 80036e4:	f7ff fbaf 	bl	8002e46 <uECC_vli_add>
 80036e8:	1824      	adds	r4, r4, r0
	while (carry > 0) {
 80036ea:	2c00      	cmp	r4, #0
 80036ec:	d00a      	beq.n	8003704 <vli_mmod_fast_secp256k1+0x68>
		uECC_vli_sub(result, result, curve_secp256k1.p, NUM_ECC_WORDS);
 80036ee:	4e0e      	ldr	r6, [pc, #56]	; (8003728 <vli_mmod_fast_secp256k1+0x8c>)
 80036f0:	3604      	adds	r6, #4
		--carry;
 80036f2:	3c01      	subs	r4, #1
		uECC_vli_sub(result, result, curve_secp256k1.p, NUM_ECC_WORDS);
 80036f4:	2308      	movs	r3, #8
 80036f6:	0032      	movs	r2, r6
 80036f8:	0029      	movs	r1, r5
 80036fa:	0028      	movs	r0, r5
 80036fc:	f7ff fc96 	bl	800302c <uECC_vli_sub>
	while (carry > 0) {
 8003700:	2c00      	cmp	r4, #0
 8003702:	d1f6      	bne.n	80036f2 <vli_mmod_fast_secp256k1+0x56>
	if (uECC_vli_cmp_unsafe(result, curve_secp256k1.p, NUM_ECC_WORDS) > 0) {
 8003704:	2208      	movs	r2, #8
 8003706:	4908      	ldr	r1, [pc, #32]	; (8003728 <vli_mmod_fast_secp256k1+0x8c>)
 8003708:	3104      	adds	r1, #4
 800370a:	0028      	movs	r0, r5
 800370c:	f7ff fc56 	bl	8002fbc <uECC_vli_cmp_unsafe>
 8003710:	2800      	cmp	r0, #0
 8003712:	dd06      	ble.n	8003722 <vli_mmod_fast_secp256k1+0x86>
		uECC_vli_sub(result, result, curve_secp256k1.p, NUM_ECC_WORDS);
 8003714:	2308      	movs	r3, #8
 8003716:	4a04      	ldr	r2, [pc, #16]	; (8003728 <vli_mmod_fast_secp256k1+0x8c>)
 8003718:	3204      	adds	r2, #4
 800371a:	0029      	movs	r1, r5
 800371c:	0028      	movs	r0, r5
 800371e:	f7ff fc85 	bl	800302c <uECC_vli_sub>
}
 8003722:	b010      	add	sp, #64	; 0x40
 8003724:	bd70      	pop	{r4, r5, r6, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	08004e78 	.word	0x08004e78

0800372c <EccPoint_isZero>:
{
 800372c:	b510      	push	{r4, lr}
	return uECC_vli_isZero(point, curve->num_words * 2);
 800372e:	7809      	ldrb	r1, [r1, #0]
 8003730:	0049      	lsls	r1, r1, #1
 8003732:	b249      	sxtb	r1, r1
 8003734:	f7ff fbef 	bl	8002f16 <uECC_vli_isZero>
}
 8003738:	bd10      	pop	{r4, pc}

0800373a <apply_z>:
{
 800373a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373c:	b089      	sub	sp, #36	; 0x24
 800373e:	0007      	movs	r7, r0
 8003740:	000d      	movs	r5, r1
 8003742:	0016      	movs	r6, r2
 8003744:	001c      	movs	r4, r3
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 8003746:	001a      	movs	r2, r3
 8003748:	0031      	movs	r1, r6
 800374a:	4668      	mov	r0, sp
 800374c:	f7ff fdb6 	bl	80032bc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 8003750:	0023      	movs	r3, r4
 8003752:	466a      	mov	r2, sp
 8003754:	0039      	movs	r1, r7
 8003756:	0038      	movs	r0, r7
 8003758:	f7ff fda0 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 800375c:	0023      	movs	r3, r4
 800375e:	0032      	movs	r2, r6
 8003760:	4669      	mov	r1, sp
 8003762:	4668      	mov	r0, sp
 8003764:	f7ff fd9a 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 8003768:	0023      	movs	r3, r4
 800376a:	466a      	mov	r2, sp
 800376c:	0029      	movs	r1, r5
 800376e:	0028      	movs	r0, r5
 8003770:	f7ff fd94 	bl	800329c <uECC_vli_modMult_fast>
}
 8003774:	b009      	add	sp, #36	; 0x24
 8003776:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003778 <XYcZ_add>:
{
 8003778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377a:	b08d      	sub	sp, #52	; 0x34
 800377c:	9103      	str	r1, [sp, #12]
 800377e:	0014      	movs	r4, r2
 8003780:	001e      	movs	r6, r3
	wordcount_t num_words = curve->num_words;
 8003782:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003784:	2500      	movs	r5, #0
 8003786:	575d      	ldrsb	r5, [r3, r5]
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8003788:	1d1f      	adds	r7, r3, #4
 800378a:	9500      	str	r5, [sp, #0]
 800378c:	003b      	movs	r3, r7
 800378e:	9002      	str	r0, [sp, #8]
 8003790:	0002      	movs	r2, r0
 8003792:	0021      	movs	r1, r4
 8003794:	a804      	add	r0, sp, #16
 8003796:	f7ff fca3 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
 800379a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800379c:	ab04      	add	r3, sp, #16
 800379e:	0019      	movs	r1, r3
 80037a0:	0018      	movs	r0, r3
 80037a2:	f7ff fd8b 	bl	80032bc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 80037a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037a8:	aa04      	add	r2, sp, #16
 80037aa:	9802      	ldr	r0, [sp, #8]
 80037ac:	0001      	movs	r1, r0
 80037ae:	f7ff fd75 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 80037b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037b4:	aa04      	add	r2, sp, #16
 80037b6:	0021      	movs	r1, r4
 80037b8:	0020      	movs	r0, r4
 80037ba:	f7ff fd6f 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 80037be:	9500      	str	r5, [sp, #0]
 80037c0:	003b      	movs	r3, r7
 80037c2:	9a03      	ldr	r2, [sp, #12]
 80037c4:	0031      	movs	r1, r6
 80037c6:	0030      	movs	r0, r6
 80037c8:	f7ff fc8a 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 80037cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80037ce:	0031      	movs	r1, r6
 80037d0:	ab04      	add	r3, sp, #16
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7ff fd72 	bl	80032bc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 80037d8:	9500      	str	r5, [sp, #0]
 80037da:	003b      	movs	r3, r7
 80037dc:	9a02      	ldr	r2, [sp, #8]
 80037de:	a904      	add	r1, sp, #16
 80037e0:	0008      	movs	r0, r1
 80037e2:	f7ff fc7d 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 80037e6:	9500      	str	r5, [sp, #0]
 80037e8:	003b      	movs	r3, r7
 80037ea:	0022      	movs	r2, r4
 80037ec:	a904      	add	r1, sp, #16
 80037ee:	0008      	movs	r0, r1
 80037f0:	f7ff fc76 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 80037f4:	9500      	str	r5, [sp, #0]
 80037f6:	003b      	movs	r3, r7
 80037f8:	9a02      	ldr	r2, [sp, #8]
 80037fa:	0021      	movs	r1, r4
 80037fc:	0020      	movs	r0, r4
 80037fe:	f7ff fc6f 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
 8003802:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003804:	0022      	movs	r2, r4
 8003806:	9803      	ldr	r0, [sp, #12]
 8003808:	0001      	movs	r1, r0
 800380a:	f7ff fd47 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 800380e:	9500      	str	r5, [sp, #0]
 8003810:	003b      	movs	r3, r7
 8003812:	aa04      	add	r2, sp, #16
 8003814:	9902      	ldr	r1, [sp, #8]
 8003816:	0020      	movs	r0, r4
 8003818:	f7ff fc62 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 800381c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800381e:	0022      	movs	r2, r4
 8003820:	0031      	movs	r1, r6
 8003822:	0030      	movs	r0, r6
 8003824:	f7ff fd3a 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 8003828:	9500      	str	r5, [sp, #0]
 800382a:	003b      	movs	r3, r7
 800382c:	9a03      	ldr	r2, [sp, #12]
 800382e:	0031      	movs	r1, r6
 8003830:	0030      	movs	r0, r6
 8003832:	f7ff fc55 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
 8003836:	002a      	movs	r2, r5
 8003838:	a904      	add	r1, sp, #16
 800383a:	0020      	movs	r0, r4
 800383c:	f7ff fbb0 	bl	8002fa0 <uECC_vli_set>
}
 8003840:	b00d      	add	sp, #52	; 0x34
 8003842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003844 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		const uECC_word_t * scalar,
		const uECC_word_t * initial_Z,
		bitcount_t num_bits, uECC_Curve curve)
{
 8003844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003846:	46de      	mov	lr, fp
 8003848:	4657      	mov	r7, sl
 800384a:	464e      	mov	r6, r9
 800384c:	b5c0      	push	{r6, r7, lr}
 800384e:	b0b8      	sub	sp, #224	; 0xe0
 8003850:	9007      	str	r0, [sp, #28]
 8003852:	9203      	str	r2, [sp, #12]
 8003854:	001d      	movs	r5, r3
 8003856:	ab40      	add	r3, sp, #256	; 0x100
 8003858:	2700      	movs	r7, #0
 800385a:	5fdf      	ldrsh	r7, [r3, r7]
 800385c:	9e41      	ldr	r6, [sp, #260]	; 0x104
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
 800385e:	2300      	movs	r3, #0
 8003860:	56f3      	ldrsb	r3, [r6, r3]
 8003862:	001c      	movs	r4, r3
 8003864:	9304      	str	r3, [sp, #16]

	uECC_vli_set(Rx[1], point, num_words);
 8003866:	001a      	movs	r2, r3
 8003868:	9105      	str	r1, [sp, #20]
 800386a:	a830      	add	r0, sp, #192	; 0xc0
 800386c:	f7ff fb98 	bl	8002fa0 <uECC_vli_set>
	uECC_vli_set(Ry[1], point + num_words, num_words);
 8003870:	00a0      	lsls	r0, r4, #2
 8003872:	4683      	mov	fp, r0
 8003874:	9a05      	ldr	r2, [sp, #20]
 8003876:	445a      	add	r2, fp
 8003878:	0011      	movs	r1, r2
 800387a:	9206      	str	r2, [sp, #24]
 800387c:	0022      	movs	r2, r4
 800387e:	a820      	add	r0, sp, #128	; 0x80
 8003880:	f7ff fb8e 	bl	8002fa0 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
 8003884:	2400      	movs	r4, #0
 8003886:	5734      	ldrsb	r4, [r6, r4]
	if (initial_Z) {
 8003888:	2d00      	cmp	r5, #0
 800388a:	d100      	bne.n	800388e <EccPoint_mult+0x4a>
 800388c:	e0b9      	b.n	8003a02 <EccPoint_mult+0x1be>
		uECC_vli_set(z, initial_Z, num_words);
 800388e:	0022      	movs	r2, r4
 8003890:	0029      	movs	r1, r5
 8003892:	a808      	add	r0, sp, #32
 8003894:	f7ff fb84 	bl	8002fa0 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
 8003898:	0022      	movs	r2, r4
 800389a:	a930      	add	r1, sp, #192	; 0xc0
 800389c:	a828      	add	r0, sp, #160	; 0xa0
 800389e:	f7ff fb7f 	bl	8002fa0 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
 80038a2:	0022      	movs	r2, r4
 80038a4:	a920      	add	r1, sp, #128	; 0x80
 80038a6:	a818      	add	r0, sp, #96	; 0x60
 80038a8:	f7ff fb7a 	bl	8002fa0 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
 80038ac:	0033      	movs	r3, r6
 80038ae:	aa08      	add	r2, sp, #32
 80038b0:	a920      	add	r1, sp, #128	; 0x80
 80038b2:	a830      	add	r0, sp, #192	; 0xc0
 80038b4:	f7ff ff41 	bl	800373a <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
 80038b8:	23a4      	movs	r3, #164	; 0xa4
 80038ba:	58f4      	ldr	r4, [r6, r3]
 80038bc:	0033      	movs	r3, r6
 80038be:	aa08      	add	r2, sp, #32
 80038c0:	a920      	add	r1, sp, #128	; 0x80
 80038c2:	a830      	add	r0, sp, #192	; 0xc0
 80038c4:	47a0      	blx	r4
	apply_z(X2, Y2, z, curve);
 80038c6:	0033      	movs	r3, r6
 80038c8:	aa08      	add	r2, sp, #32
 80038ca:	a918      	add	r1, sp, #96	; 0x60
 80038cc:	a828      	add	r0, sp, #160	; 0xa0
 80038ce:	f7ff ff34 	bl	800373a <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
 80038d2:	1ebb      	subs	r3, r7, #2
 80038d4:	b21f      	sxth	r7, r3
 80038d6:	2f00      	cmp	r7, #0
 80038d8:	dd2c      	ble.n	8003934 <EccPoint_mult+0xf0>
		nb = !uECC_vli_testBit(scalar, i);
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 80038da:	2301      	movs	r3, #1
 80038dc:	469a      	mov	sl, r3
 80038de:	46b1      	mov	r9, r6
 80038e0:	003e      	movs	r6, r7
		nb = !uECC_vli_testBit(scalar, i);
 80038e2:	0031      	movs	r1, r6
 80038e4:	9803      	ldr	r0, [sp, #12]
 80038e6:	f7ff fb28 	bl	8002f3a <uECC_vli_testBit>
 80038ea:	4244      	negs	r4, r0
 80038ec:	4144      	adcs	r4, r0
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 80038ee:	4653      	mov	r3, sl
 80038f0:	1b1d      	subs	r5, r3, r4
 80038f2:	016d      	lsls	r5, r5, #5
 80038f4:	ab28      	add	r3, sp, #160	; 0xa0
 80038f6:	469c      	mov	ip, r3
 80038f8:	44ac      	add	ip, r5
 80038fa:	4660      	mov	r0, ip
 80038fc:	ab18      	add	r3, sp, #96	; 0x60
 80038fe:	469c      	mov	ip, r3
 8003900:	4465      	add	r5, ip
 8003902:	0164      	lsls	r4, r4, #5
 8003904:	ab28      	add	r3, sp, #160	; 0xa0
 8003906:	191f      	adds	r7, r3, r4
 8003908:	4464      	add	r4, ip
 800390a:	464b      	mov	r3, r9
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	0023      	movs	r3, r4
 8003910:	003a      	movs	r2, r7
 8003912:	0029      	movs	r1, r5
 8003914:	9002      	str	r0, [sp, #8]
 8003916:	f7ff fd6c 	bl	80033f2 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 800391a:	464b      	mov	r3, r9
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	002b      	movs	r3, r5
 8003920:	9a02      	ldr	r2, [sp, #8]
 8003922:	0021      	movs	r1, r4
 8003924:	0038      	movs	r0, r7
 8003926:	f7ff ff27 	bl	8003778 <XYcZ_add>
 800392a:	3e01      	subs	r6, #1
 800392c:	b236      	sxth	r6, r6
	for (i = num_bits - 2; i > 0; --i) {
 800392e:	2e00      	cmp	r6, #0
 8003930:	d1d7      	bne.n	80038e2 <EccPoint_mult+0x9e>
 8003932:	464e      	mov	r6, r9
	}

	nb = !uECC_vli_testBit(scalar, 0);
 8003934:	2100      	movs	r1, #0
 8003936:	9803      	ldr	r0, [sp, #12]
 8003938:	f7ff faff 	bl	8002f3a <uECC_vli_testBit>
 800393c:	4244      	negs	r4, r0
 800393e:	4144      	adcs	r4, r0
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8003940:	2701      	movs	r7, #1
 8003942:	1b3f      	subs	r7, r7, r4
 8003944:	017f      	lsls	r7, r7, #5
 8003946:	ab28      	add	r3, sp, #160	; 0xa0
 8003948:	19dd      	adds	r5, r3, r7
 800394a:	ab18      	add	r3, sp, #96	; 0x60
 800394c:	469c      	mov	ip, r3
 800394e:	4467      	add	r7, ip
 8003950:	0164      	lsls	r4, r4, #5
 8003952:	ab28      	add	r3, sp, #160	; 0xa0
 8003954:	469c      	mov	ip, r3
 8003956:	44a4      	add	ip, r4
 8003958:	4662      	mov	r2, ip
 800395a:	ab18      	add	r3, sp, #96	; 0x60
 800395c:	469c      	mov	ip, r3
 800395e:	4464      	add	r4, ip
 8003960:	9600      	str	r6, [sp, #0]
 8003962:	0023      	movs	r3, r4
 8003964:	9202      	str	r2, [sp, #8]
 8003966:	0039      	movs	r1, r7
 8003968:	0028      	movs	r0, r5
 800396a:	f7ff fd42 	bl	80033f2 <XYcZ_addC>

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 800396e:	1d33      	adds	r3, r6, #4
 8003970:	0019      	movs	r1, r3
 8003972:	9b04      	ldr	r3, [sp, #16]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	9103      	str	r1, [sp, #12]
 8003978:	000b      	movs	r3, r1
 800397a:	aa28      	add	r2, sp, #160	; 0xa0
 800397c:	a930      	add	r1, sp, #192	; 0xc0
 800397e:	a810      	add	r0, sp, #64	; 0x40
 8003980:	f7ff fbae 	bl	80030e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
 8003984:	0033      	movs	r3, r6
 8003986:	003a      	movs	r2, r7
 8003988:	a910      	add	r1, sp, #64	; 0x40
 800398a:	0008      	movs	r0, r1
 800398c:	f7ff fc86 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
 8003990:	0033      	movs	r3, r6
 8003992:	9a05      	ldr	r2, [sp, #20]
 8003994:	a910      	add	r1, sp, #64	; 0x40
 8003996:	0008      	movs	r0, r1
 8003998:	f7ff fc80 	bl	800329c <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
 800399c:	9b04      	ldr	r3, [sp, #16]
 800399e:	9a03      	ldr	r2, [sp, #12]
 80039a0:	a910      	add	r1, sp, #64	; 0x40
 80039a2:	0008      	movs	r0, r1
 80039a4:	f7ff fdb3 	bl	800350e <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
 80039a8:	0033      	movs	r3, r6
 80039aa:	9a06      	ldr	r2, [sp, #24]
 80039ac:	a910      	add	r1, sp, #64	; 0x40
 80039ae:	0008      	movs	r0, r1
 80039b0:	f7ff fc74 	bl	800329c <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
 80039b4:	0033      	movs	r3, r6
 80039b6:	002a      	movs	r2, r5
 80039b8:	a910      	add	r1, sp, #64	; 0x40
 80039ba:	0008      	movs	r0, r1
 80039bc:	f7ff fc6e 	bl	800329c <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 80039c0:	9600      	str	r6, [sp, #0]
 80039c2:	003b      	movs	r3, r7
 80039c4:	002a      	movs	r2, r5
 80039c6:	0021      	movs	r1, r4
 80039c8:	9802      	ldr	r0, [sp, #8]
 80039ca:	f7ff fed5 	bl	8003778 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
 80039ce:	0033      	movs	r3, r6
 80039d0:	aa10      	add	r2, sp, #64	; 0x40
 80039d2:	a918      	add	r1, sp, #96	; 0x60
 80039d4:	a828      	add	r0, sp, #160	; 0xa0
 80039d6:	f7ff feb0 	bl	800373a <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
 80039da:	9c04      	ldr	r4, [sp, #16]
 80039dc:	0022      	movs	r2, r4
 80039de:	a928      	add	r1, sp, #160	; 0xa0
 80039e0:	9d07      	ldr	r5, [sp, #28]
 80039e2:	0028      	movs	r0, r5
 80039e4:	f7ff fadc 	bl	8002fa0 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
 80039e8:	002b      	movs	r3, r5
 80039ea:	445b      	add	r3, fp
 80039ec:	0018      	movs	r0, r3
 80039ee:	0022      	movs	r2, r4
 80039f0:	a918      	add	r1, sp, #96	; 0x60
 80039f2:	f7ff fad5 	bl	8002fa0 <uECC_vli_set>
}
 80039f6:	b038      	add	sp, #224	; 0xe0
 80039f8:	bc1c      	pop	{r2, r3, r4}
 80039fa:	4691      	mov	r9, r2
 80039fc:	469a      	mov	sl, r3
 80039fe:	46a3      	mov	fp, r4
 8003a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_vli_clear(z, num_words);
 8003a02:	0021      	movs	r1, r4
 8003a04:	a808      	add	r0, sp, #32
 8003a06:	f7ff fa79 	bl	8002efc <uECC_vli_clear>
		z[0] = 1;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	9308      	str	r3, [sp, #32]
 8003a0e:	e743      	b.n	8003898 <EccPoint_mult+0x54>

08003a10 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
		uECC_word_t *k1, uECC_Curve curve)
{
 8003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a12:	b085      	sub	sp, #20
 8003a14:	000e      	movs	r6, r1
 8003a16:	9202      	str	r2, [sp, #8]

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8003a18:	2202      	movs	r2, #2
 8003a1a:	5e9f      	ldrsh	r7, [r3, r2]
 8003a1c:	9703      	str	r7, [sp, #12]
 8003a1e:	0039      	movs	r1, r7
 8003a20:	311f      	adds	r1, #31
 8003a22:	17cc      	asrs	r4, r1, #31
 8003a24:	221f      	movs	r2, #31
 8003a26:	4022      	ands	r2, r4
 8003a28:	1852      	adds	r2, r2, r1
 8003a2a:	1152      	asrs	r2, r2, #5
 8003a2c:	b255      	sxtb	r5, r2

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8003a2e:	3324      	adds	r3, #36	; 0x24
 8003a30:	001c      	movs	r4, r3
 8003a32:	002b      	movs	r3, r5
 8003a34:	0022      	movs	r2, r4
 8003a36:	0001      	movs	r1, r0
 8003a38:	9601      	str	r6, [sp, #4]
 8003a3a:	0030      	movs	r0, r6
 8003a3c:	f7ff fa03 	bl	8002e46 <uECC_vli_add>
 8003a40:	2601      	movs	r6, #1
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d10b      	bne.n	8003a5e <regularize_k+0x4e>
			(num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
 8003a46:	016b      	lsls	r3, r5, #5
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8003a48:	2600      	movs	r6, #0
 8003a4a:	9a03      	ldr	r2, [sp, #12]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	da06      	bge.n	8003a5e <regularize_k+0x4e>
					uECC_vli_testBit(k0, num_n_bits));
 8003a50:	0039      	movs	r1, r7
 8003a52:	9801      	ldr	r0, [sp, #4]
 8003a54:	f7ff fa71 	bl	8002f3a <uECC_vli_testBit>
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8003a58:	0006      	movs	r6, r0
 8003a5a:	1e70      	subs	r0, r6, #1
 8003a5c:	4186      	sbcs	r6, r0

	uECC_vli_add(k1, k0, curve->n, num_n_words);
 8003a5e:	002b      	movs	r3, r5
 8003a60:	0022      	movs	r2, r4
 8003a62:	9901      	ldr	r1, [sp, #4]
 8003a64:	9802      	ldr	r0, [sp, #8]
 8003a66:	f7ff f9ee 	bl	8002e46 <uECC_vli_add>

	return carry;
}
 8003a6a:	0030      	movs	r0, r6
 8003a6c:	b005      	add	sp, #20
 8003a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a70 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
		uECC_word_t *private_key,
		uECC_Curve curve)
{
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	b094      	sub	sp, #80	; 0x50
 8003a74:	0005      	movs	r5, r0
 8003a76:	0008      	movs	r0, r1
 8003a78:	0014      	movs	r4, r2

	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
 8003a7a:	ae02      	add	r6, sp, #8
 8003a7c:	a90c      	add	r1, sp, #48	; 0x30
 8003a7e:	9102      	str	r1, [sp, #8]
 8003a80:	aa04      	add	r2, sp, #16
 8003a82:	9203      	str	r2, [sp, #12]
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
 8003a84:	0023      	movs	r3, r4
 8003a86:	f7ff ffc3 	bl	8003a10 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
 8003a8a:	4243      	negs	r3, r0
 8003a8c:	4158      	adcs	r0, r3
 8003a8e:	0080      	lsls	r0, r0, #2
 8003a90:	5982      	ldr	r2, [r0, r6]
 8003a92:	0021      	movs	r1, r4
 8003a94:	3144      	adds	r1, #68	; 0x44
 8003a96:	9401      	str	r4, [sp, #4]
 8003a98:	8863      	ldrh	r3, [r4, #2]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	b21b      	sxth	r3, r3
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	0028      	movs	r0, r5
 8003aa4:	f7ff fece 	bl	8003844 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
 8003aa8:	0021      	movs	r1, r4
 8003aaa:	0028      	movs	r0, r5
 8003aac:	f7ff fe3e 	bl	800372c <EccPoint_isZero>
 8003ab0:	4243      	negs	r3, r0
 8003ab2:	4158      	adcs	r0, r3
		return 0;
	}
	return 1;
}
 8003ab4:	b014      	add	sp, #80	; 0x50
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}

08003ab8 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
		const unsigned int *native)
{
 8003ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
 8003aba:	2900      	cmp	r1, #0
 8003abc:	dd10      	ble.n	8003ae0 <uECC_vli_nativeToBytes+0x28>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	2400      	movs	r4, #0
		unsigned b = num_bytes - 1 - i;
 8003ac2:	1e4f      	subs	r7, r1, #1
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
 8003ac4:	2603      	movs	r6, #3
		unsigned b = num_bytes - 1 - i;
 8003ac6:	1afb      	subs	r3, r7, r3
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
 8003ac8:	001d      	movs	r5, r3
 8003aca:	43b5      	bics	r5, r6
 8003acc:	4033      	ands	r3, r6
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	5955      	ldr	r5, [r2, r5]
 8003ad2:	40dd      	lsrs	r5, r3
 8003ad4:	5505      	strb	r5, [r0, r4]
 8003ad6:	3401      	adds	r4, #1
 8003ad8:	b264      	sxtb	r4, r4
	for (i = 0; i < num_bytes; ++i) {
 8003ada:	0023      	movs	r3, r4
 8003adc:	428c      	cmp	r4, r1
 8003ade:	dbf2      	blt.n	8003ac6 <uECC_vli_nativeToBytes+0xe>
	}
}
 8003ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ae2 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
		int num_bytes)
{
 8003ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae4:	46c6      	mov	lr, r8
 8003ae6:	b500      	push	{lr}
 8003ae8:	0005      	movs	r5, r0
 8003aea:	000e      	movs	r6, r1
 8003aec:	0014      	movs	r4, r2
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8003aee:	1cd3      	adds	r3, r2, #3
 8003af0:	17da      	asrs	r2, r3, #31
 8003af2:	2103      	movs	r1, #3
 8003af4:	4011      	ands	r1, r2
 8003af6:	18c9      	adds	r1, r1, r3
 8003af8:	1089      	asrs	r1, r1, #2
 8003afa:	b249      	sxtb	r1, r1
 8003afc:	f7ff f9fe 	bl	8002efc <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
 8003b00:	2c00      	cmp	r4, #0
 8003b02:	dd16      	ble.n	8003b32 <uECC_vli_bytesToNative+0x50>
 8003b04:	2300      	movs	r3, #0
 8003b06:	2200      	movs	r2, #0
		unsigned b = num_bytes - 1 - i;
 8003b08:	1e61      	subs	r1, r4, #1
 8003b0a:	4688      	mov	r8, r1
		native[b / uECC_WORD_SIZE] |=
 8003b0c:	2003      	movs	r0, #3
		unsigned b = num_bytes - 1 - i;
 8003b0e:	4641      	mov	r1, r8
 8003b10:	1acb      	subs	r3, r1, r3
		native[b / uECC_WORD_SIZE] |=
 8003b12:	0019      	movs	r1, r3
 8003b14:	4381      	bics	r1, r0
 8003b16:	1869      	adds	r1, r5, r1
				(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
 8003b18:	5cb7      	ldrb	r7, [r6, r2]
 8003b1a:	4003      	ands	r3, r0
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	409f      	lsls	r7, r3
 8003b20:	003b      	movs	r3, r7
		native[b / uECC_WORD_SIZE] |=
 8003b22:	680f      	ldr	r7, [r1, #0]
 8003b24:	433b      	orrs	r3, r7
 8003b26:	600b      	str	r3, [r1, #0]
 8003b28:	3201      	adds	r2, #1
 8003b2a:	b252      	sxtb	r2, r2
	for (i = 0; i < num_bytes; ++i) {
 8003b2c:	0013      	movs	r3, r2
 8003b2e:	4294      	cmp	r4, r2
 8003b30:	dced      	bgt.n	8003b0e <uECC_vli_bytesToNative+0x2c>
	}
}
 8003b32:	bc04      	pop	{r2}
 8003b34:	4690      	mov	r8, r2
 8003b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b38 <uECC_compute_public_key>:

	return uECC_valid_point(_public, curve);
}

int uECC_compute_public_key(const uint8_t *private_key, uint8_t *public_key, uECC_Curve curve)
{
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	b098      	sub	sp, #96	; 0x60
 8003b3c:	000d      	movs	r5, r1
 8003b3e:	0016      	movs	r6, r2
	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(
			_private,
			private_key,
			BITS_TO_BYTES(curve->num_n_bits));
 8003b40:	2202      	movs	r2, #2
 8003b42:	5eb3      	ldrsh	r3, [r6, r2]
 8003b44:	3307      	adds	r3, #7
	uECC_vli_bytesToNative(
 8003b46:	17d9      	asrs	r1, r3, #31
 8003b48:	2207      	movs	r2, #7
 8003b4a:	400a      	ands	r2, r1
 8003b4c:	18d2      	adds	r2, r2, r3
 8003b4e:	10d2      	asrs	r2, r2, #3
 8003b50:	0001      	movs	r1, r0
 8003b52:	a810      	add	r0, sp, #64	; 0x40
 8003b54:	f7ff ffc5 	bl	8003ae2 <uECC_vli_bytesToNative>

	/* Make sure the private key is in the range [1, n-1]. */
	if (uECC_vli_isZero(_private, BITS_TO_WORDS(curve->num_n_bits))) {
 8003b58:	2202      	movs	r2, #2
 8003b5a:	5eb3      	ldrsh	r3, [r6, r2]
 8003b5c:	331f      	adds	r3, #31
 8003b5e:	17da      	asrs	r2, r3, #31
 8003b60:	241f      	movs	r4, #31
 8003b62:	4014      	ands	r4, r2
 8003b64:	18e4      	adds	r4, r4, r3
 8003b66:	1164      	asrs	r4, r4, #5
 8003b68:	b264      	sxtb	r4, r4
 8003b6a:	0021      	movs	r1, r4
 8003b6c:	a810      	add	r0, sp, #64	; 0x40
 8003b6e:	f7ff f9d2 	bl	8002f16 <uECC_vli_isZero>
		return 0;
 8003b72:	2300      	movs	r3, #0
	if (uECC_vli_isZero(_private, BITS_TO_WORDS(curve->num_n_bits))) {
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d002      	beq.n	8003b7e <uECC_compute_public_key+0x46>
	uECC_vli_nativeToBytes(public_key, curve->num_bytes, _public);
	uECC_vli_nativeToBytes(
			public_key +
			curve->num_bytes, curve->num_bytes, _public + curve->num_words);
	return 1;
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	b018      	add	sp, #96	; 0x60
 8003b7c:	bd70      	pop	{r4, r5, r6, pc}
	if (uECC_vli_cmp(curve->n, _private, BITS_TO_WORDS(curve->num_n_bits)) != 1) {
 8003b7e:	0030      	movs	r0, r6
 8003b80:	3024      	adds	r0, #36	; 0x24
 8003b82:	0022      	movs	r2, r4
 8003b84:	a910      	add	r1, sp, #64	; 0x40
 8003b86:	f7ff fa7c 	bl	8003082 <uECC_vli_cmp>
		return 0;
 8003b8a:	2300      	movs	r3, #0
	if (uECC_vli_cmp(curve->n, _private, BITS_TO_WORDS(curve->num_n_bits)) != 1) {
 8003b8c:	2801      	cmp	r0, #1
 8003b8e:	d1f3      	bne.n	8003b78 <uECC_compute_public_key+0x40>
	if (!EccPoint_compute_public_key(_public, _private, curve)) {
 8003b90:	0032      	movs	r2, r6
 8003b92:	a910      	add	r1, sp, #64	; 0x40
 8003b94:	4668      	mov	r0, sp
 8003b96:	f7ff ff6b 	bl	8003a70 <EccPoint_compute_public_key>
		return 0;
 8003b9a:	2300      	movs	r3, #0
	if (!EccPoint_compute_public_key(_public, _private, curve)) {
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d0eb      	beq.n	8003b78 <uECC_compute_public_key+0x40>
	uECC_vli_nativeToBytes(public_key, curve->num_bytes, _public);
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	5671      	ldrsb	r1, [r6, r1]
 8003ba4:	466a      	mov	r2, sp
 8003ba6:	0028      	movs	r0, r5
 8003ba8:	f7ff ff86 	bl	8003ab8 <uECC_vli_nativeToBytes>
			curve->num_bytes, curve->num_bytes, _public + curve->num_words);
 8003bac:	2101      	movs	r1, #1
 8003bae:	5671      	ldrsb	r1, [r6, r1]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	56b2      	ldrsb	r2, [r6, r2]
 8003bb4:	0092      	lsls	r2, r2, #2
	uECC_vli_nativeToBytes(
 8003bb6:	446a      	add	r2, sp
 8003bb8:	1868      	adds	r0, r5, r1
 8003bba:	f7ff ff7d 	bl	8003ab8 <uECC_vli_nativeToBytes>
	return 1;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e7da      	b.n	8003b78 <uECC_compute_public_key+0x40>

08003bc2 <bits2int>:
static uECC_RNG_Function g_rng_function = 0;
#endif

static void bits2int(uECC_word_t *native, const uint8_t *bits,
		     unsigned bits_size, uECC_Curve curve)
{
 8003bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	9000      	str	r0, [sp, #0]
 8003bc8:	000e      	movs	r6, r1
 8003bca:	001f      	movs	r7, r3
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 8003bcc:	2102      	movs	r1, #2
 8003bce:	5e5b      	ldrsh	r3, [r3, r1]
	unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	301f      	adds	r0, #31
 8003bd4:	17c5      	asrs	r5, r0, #31
 8003bd6:	211f      	movs	r1, #31
 8003bd8:	4029      	ands	r1, r5
 8003bda:	1809      	adds	r1, r1, r0
 8003bdc:	114c      	asrs	r4, r1, #5
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 8003bde:	1dd9      	adds	r1, r3, #7
 8003be0:	17c8      	asrs	r0, r1, #31
 8003be2:	2307      	movs	r3, #7
 8003be4:	4003      	ands	r3, r0
 8003be6:	185b      	adds	r3, r3, r1
 8003be8:	10dd      	asrs	r5, r3, #3
 8003bea:	4295      	cmp	r5, r2
 8003bec:	d900      	bls.n	8003bf0 <bits2int+0x2e>
 8003bee:	0015      	movs	r5, r2

	if (bits_size > num_n_bytes) {
		bits_size = num_n_bytes;
	}

	uECC_vli_clear(native, num_n_words);
 8003bf0:	b263      	sxtb	r3, r4
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	9800      	ldr	r0, [sp, #0]
 8003bf8:	f7ff f980 	bl	8002efc <uECC_vli_clear>
	uECC_vli_bytesToNative(native, bits, bits_size);
 8003bfc:	002a      	movs	r2, r5
 8003bfe:	0031      	movs	r1, r6
 8003c00:	9e00      	ldr	r6, [sp, #0]
 8003c02:	0030      	movs	r0, r6
 8003c04:	f7ff ff6d 	bl	8003ae2 <uECC_vli_bytesToNative>
	if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
 8003c08:	00ea      	lsls	r2, r5, #3
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	5e7b      	ldrsh	r3, [r7, r1]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d929      	bls.n	8003c66 <bits2int+0xa4>
		return;
	}
	shift = bits_size * 8 - curve->num_n_bits;
 8003c12:	1ad2      	subs	r2, r2, r3
	carry = 0;
	ptr = native + num_n_words;
 8003c14:	00a1      	lsls	r1, r4, #2
 8003c16:	46b4      	mov	ip, r6
 8003c18:	4461      	add	r1, ip
	while (ptr-- > native) {
 8003c1a:	1f0b      	subs	r3, r1, #4
 8003c1c:	428e      	cmp	r6, r1
 8003c1e:	d212      	bcs.n	8003c46 <bits2int+0x84>
 8003c20:	1b98      	subs	r0, r3, r6
 8003c22:	3003      	adds	r0, #3
 8003c24:	0880      	lsrs	r0, r0, #2
 8003c26:	0080      	lsls	r0, r0, #2
 8003c28:	1a08      	subs	r0, r1, r0
 8003c2a:	3808      	subs	r0, #8
 8003c2c:	2400      	movs	r4, #0
		uECC_word_t temp = *ptr;
		*ptr = (temp >> shift) | carry;
		carry = temp << (uECC_WORD_BITS - shift);
 8003c2e:	2520      	movs	r5, #32
 8003c30:	1aad      	subs	r5, r5, r2
		uECC_word_t temp = *ptr;
 8003c32:	681e      	ldr	r6, [r3, #0]
		*ptr = (temp >> shift) | carry;
 8003c34:	0031      	movs	r1, r6
 8003c36:	40d1      	lsrs	r1, r2
 8003c38:	4321      	orrs	r1, r4
 8003c3a:	6019      	str	r1, [r3, #0]
		carry = temp << (uECC_WORD_BITS - shift);
 8003c3c:	0034      	movs	r4, r6
 8003c3e:	40ac      	lsls	r4, r5
	while (ptr-- > native) {
 8003c40:	3b04      	subs	r3, #4
 8003c42:	4283      	cmp	r3, r0
 8003c44:	d1f5      	bne.n	8003c32 <bits2int+0x70>
	}

	/* Reduce mod curve_n */
	if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
 8003c46:	3724      	adds	r7, #36	; 0x24
 8003c48:	9d01      	ldr	r5, [sp, #4]
 8003c4a:	002a      	movs	r2, r5
 8003c4c:	9c00      	ldr	r4, [sp, #0]
 8003c4e:	0021      	movs	r1, r4
 8003c50:	0038      	movs	r0, r7
 8003c52:	f7ff f9b3 	bl	8002fbc <uECC_vli_cmp_unsafe>
 8003c56:	2801      	cmp	r0, #1
 8003c58:	d005      	beq.n	8003c66 <bits2int+0xa4>
		uECC_vli_sub(native, native, curve->n, num_n_words);
 8003c5a:	002b      	movs	r3, r5
 8003c5c:	003a      	movs	r2, r7
 8003c5e:	0021      	movs	r1, r4
 8003c60:	0020      	movs	r0, r4
 8003c62:	f7ff f9e3 	bl	800302c <uECC_vli_sub>
	}
}
 8003c66:	b003      	add	sp, #12
 8003c68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c6a <uECC_sign_with_k>:

int uECC_sign_with_k(const uint8_t *private_key, const uint8_t *message_hash,
		     unsigned hash_size, uECC_word_t *k, uint8_t *signature,
		     uECC_Curve curve)
{
 8003c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6c:	b0ab      	sub	sp, #172	; 0xac
 8003c6e:	9004      	str	r0, [sp, #16]
 8003c70:	9105      	str	r1, [sp, #20]
 8003c72:	9206      	str	r2, [sp, #24]
 8003c74:	0018      	movs	r0, r3
 8003c76:	9303      	str	r3, [sp, #12]
 8003c78:	9c31      	ldr	r4, [sp, #196]	; 0xc4

	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t s[NUM_ECC_WORDS];
	uECC_word_t *k2[2] = {tmp, s};
 8003c7a:	ab22      	add	r3, sp, #136	; 0x88
 8003c7c:	9318      	str	r3, [sp, #96]	; 0x60
 8003c7e:	ab1a      	add	r3, sp, #104	; 0x68
 8003c80:	9319      	str	r3, [sp, #100]	; 0x64
	uECC_word_t p[NUM_ECC_WORDS * 2];
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
 8003c82:	2500      	movs	r5, #0
 8003c84:	5765      	ldrsb	r5, [r4, r5]
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8003c86:	2302      	movs	r3, #2
 8003c88:	5ee7      	ldrsh	r7, [r4, r3]
	bitcount_t num_n_bits = curve->num_n_bits;

	/* Make sure 0 < k < curve_n */
  	if (uECC_vli_isZero(k, num_words) ||
 8003c8a:	0029      	movs	r1, r5
 8003c8c:	f7ff f943 	bl	8002f16 <uECC_vli_isZero>
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
		return 0;
 8003c90:	2300      	movs	r3, #0
  	if (uECC_vli_isZero(k, num_words) ||
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d002      	beq.n	8003c9c <uECC_sign_with_k+0x32>
		return 0;
	}

	uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
	return 1;
}
 8003c96:	0018      	movs	r0, r3
 8003c98:	b02b      	add	sp, #172	; 0xac
 8003c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8003c9c:	003a      	movs	r2, r7
 8003c9e:	321f      	adds	r2, #31
 8003ca0:	17d1      	asrs	r1, r2, #31
 8003ca2:	331f      	adds	r3, #31
 8003ca4:	400b      	ands	r3, r1
 8003ca6:	189b      	adds	r3, r3, r2
 8003ca8:	115b      	asrs	r3, r3, #5
 8003caa:	b25e      	sxtb	r6, r3
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
 8003cac:	2324      	movs	r3, #36	; 0x24
 8003cae:	469c      	mov	ip, r3
 8003cb0:	44a4      	add	ip, r4
 8003cb2:	4663      	mov	r3, ip
 8003cb4:	9307      	str	r3, [sp, #28]
 8003cb6:	0032      	movs	r2, r6
 8003cb8:	9903      	ldr	r1, [sp, #12]
 8003cba:	4660      	mov	r0, ip
 8003cbc:	f7ff f9e1 	bl	8003082 <uECC_vli_cmp>
		return 0;
 8003cc0:	2300      	movs	r3, #0
  	if (uECC_vli_isZero(k, num_words) ||
 8003cc2:	2801      	cmp	r0, #1
 8003cc4:	d1e7      	bne.n	8003c96 <uECC_sign_with_k+0x2c>
	carry = regularize_k(k, tmp, s, curve);
 8003cc6:	0023      	movs	r3, r4
 8003cc8:	aa1a      	add	r2, sp, #104	; 0x68
 8003cca:	a922      	add	r1, sp, #136	; 0x88
 8003ccc:	9803      	ldr	r0, [sp, #12]
 8003cce:	f7ff fe9f 	bl	8003a10 <regularize_k>
	EccPoint_mult(p, curve->G, k2[!carry], 0, num_n_bits + 1, curve);
 8003cd2:	4243      	negs	r3, r0
 8003cd4:	4158      	adcs	r0, r3
 8003cd6:	0080      	lsls	r0, r0, #2
 8003cd8:	ab18      	add	r3, sp, #96	; 0x60
 8003cda:	58c2      	ldr	r2, [r0, r3]
 8003cdc:	0021      	movs	r1, r4
 8003cde:	3144      	adds	r1, #68	; 0x44
 8003ce0:	9401      	str	r4, [sp, #4]
 8003ce2:	1c7b      	adds	r3, r7, #1
 8003ce4:	b21b      	sxth	r3, r3
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	a808      	add	r0, sp, #32
 8003cec:	f7ff fdaa 	bl	8003844 <EccPoint_mult>
	if (uECC_vli_isZero(p, num_words)) {
 8003cf0:	0029      	movs	r1, r5
 8003cf2:	a808      	add	r0, sp, #32
 8003cf4:	f7ff f90f 	bl	8002f16 <uECC_vli_isZero>
		return 0;
 8003cf8:	2300      	movs	r3, #0
	if (uECC_vli_isZero(p, num_words)) {
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	d1cb      	bne.n	8003c96 <uECC_sign_with_k+0x2c>
		uECC_vli_clear(tmp, num_n_words);
 8003cfe:	0031      	movs	r1, r6
 8003d00:	a822      	add	r0, sp, #136	; 0x88
 8003d02:	f7ff f8fb 	bl	8002efc <uECC_vli_clear>
		tmp[0] = 1;
 8003d06:	2301      	movs	r3, #1
 8003d08:	9322      	str	r3, [sp, #136]	; 0x88
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 8003d0a:	9600      	str	r6, [sp, #0]
 8003d0c:	9b07      	ldr	r3, [sp, #28]
 8003d0e:	aa22      	add	r2, sp, #136	; 0x88
 8003d10:	9f03      	ldr	r7, [sp, #12]
 8003d12:	0039      	movs	r1, r7
 8003d14:	0038      	movs	r0, r7
 8003d16:	f7ff faae 	bl	8003276 <uECC_vli_modMult>
	uECC_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 8003d1a:	0033      	movs	r3, r6
 8003d1c:	9a07      	ldr	r2, [sp, #28]
 8003d1e:	0039      	movs	r1, r7
 8003d20:	0038      	movs	r0, r7
 8003d22:	f7ff fbf4 	bl	800350e <uECC_vli_modInv>
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 8003d26:	9600      	str	r6, [sp, #0]
 8003d28:	9b07      	ldr	r3, [sp, #28]
 8003d2a:	aa22      	add	r2, sp, #136	; 0x88
 8003d2c:	0039      	movs	r1, r7
 8003d2e:	9703      	str	r7, [sp, #12]
 8003d30:	0038      	movs	r0, r7
 8003d32:	f7ff faa0 	bl	8003276 <uECC_vli_modMult>
	uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 8003d36:	2101      	movs	r1, #1
 8003d38:	5661      	ldrsb	r1, [r4, r1]
 8003d3a:	ab08      	add	r3, sp, #32
 8003d3c:	001a      	movs	r2, r3
 8003d3e:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8003d40:	f7ff feba 	bl	8003ab8 <uECC_vli_nativeToBytes>
	uECC_vli_bytesToNative(tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
 8003d44:	2102      	movs	r1, #2
 8003d46:	5e63      	ldrsh	r3, [r4, r1]
 8003d48:	3307      	adds	r3, #7
 8003d4a:	17d9      	asrs	r1, r3, #31
 8003d4c:	2207      	movs	r2, #7
 8003d4e:	400a      	ands	r2, r1
 8003d50:	18d2      	adds	r2, r2, r3
 8003d52:	10d2      	asrs	r2, r2, #3
 8003d54:	9904      	ldr	r1, [sp, #16]
 8003d56:	ab22      	add	r3, sp, #136	; 0x88
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7ff fec2 	bl	8003ae2 <uECC_vli_bytesToNative>
	s[num_n_words - 1] = 0;
 8003d5e:	af1a      	add	r7, sp, #104	; 0x68
 8003d60:	1e73      	subs	r3, r6, #1
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	2200      	movs	r2, #0
 8003d66:	51da      	str	r2, [r3, r7]
	uECC_vli_set(s, p, num_words);
 8003d68:	002a      	movs	r2, r5
 8003d6a:	a908      	add	r1, sp, #32
 8003d6c:	0038      	movs	r0, r7
 8003d6e:	f7ff f917 	bl	8002fa0 <uECC_vli_set>
	uECC_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 8003d72:	9600      	str	r6, [sp, #0]
 8003d74:	9d07      	ldr	r5, [sp, #28]
 8003d76:	002b      	movs	r3, r5
 8003d78:	003a      	movs	r2, r7
 8003d7a:	a922      	add	r1, sp, #136	; 0x88
 8003d7c:	0038      	movs	r0, r7
 8003d7e:	f7ff fa7a 	bl	8003276 <uECC_vli_modMult>
	bits2int(tmp, message_hash, hash_size, curve);
 8003d82:	0023      	movs	r3, r4
 8003d84:	9a06      	ldr	r2, [sp, #24]
 8003d86:	9905      	ldr	r1, [sp, #20]
 8003d88:	a822      	add	r0, sp, #136	; 0x88
 8003d8a:	f7ff ff1a 	bl	8003bc2 <bits2int>
	uECC_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 8003d8e:	9600      	str	r6, [sp, #0]
 8003d90:	002b      	movs	r3, r5
 8003d92:	003a      	movs	r2, r7
 8003d94:	a922      	add	r1, sp, #136	; 0x88
 8003d96:	0038      	movs	r0, r7
 8003d98:	f7ff f989 	bl	80030ae <uECC_vli_modAdd>
	uECC_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 8003d9c:	9600      	str	r6, [sp, #0]
 8003d9e:	002b      	movs	r3, r5
 8003da0:	9a03      	ldr	r2, [sp, #12]
 8003da2:	0039      	movs	r1, r7
 8003da4:	0038      	movs	r0, r7
 8003da6:	f7ff fa66 	bl	8003276 <uECC_vli_modMult>
	if (uECC_vli_numBits(s, num_n_words) > (bitcount_t)curve->num_bytes * 8) {
 8003daa:	0031      	movs	r1, r6
 8003dac:	0038      	movs	r0, r7
 8003dae:	f7ff f8cd 	bl	8002f4c <uECC_vli_numBits>
 8003db2:	2101      	movs	r1, #1
 8003db4:	5661      	ldrsb	r1, [r4, r1]
 8003db6:	00ca      	lsls	r2, r1, #3
		return 0;
 8003db8:	2300      	movs	r3, #0
	if (uECC_vli_numBits(s, num_n_words) > (bitcount_t)curve->num_bytes * 8) {
 8003dba:	4290      	cmp	r0, r2
 8003dbc:	dd00      	ble.n	8003dc0 <uECC_sign_with_k+0x156>
 8003dbe:	e76a      	b.n	8003c96 <uECC_sign_with_k+0x2c>
	uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 8003dc0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8003dc2:	1858      	adds	r0, r3, r1
 8003dc4:	aa1a      	add	r2, sp, #104	; 0x68
 8003dc6:	f7ff fe77 	bl	8003ab8 <uECC_vli_nativeToBytes>
	return 1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e763      	b.n	8003c96 <uECC_sign_with_k+0x2c>

08003dce <uECC_sign>:

int uECC_sign(const uint8_t *private_key, const uint8_t *message_hash,
	      unsigned hash_size, uint8_t *signature, uECC_Curve curve)
{
 8003dce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd0:	b09f      	sub	sp, #124	; 0x7c
 8003dd2:	9002      	str	r0, [sp, #8]
 8003dd4:	9103      	str	r1, [sp, #12]
 8003dd6:	9204      	str	r2, [sp, #16]
 8003dd8:	001c      	movs	r4, r3
 8003dda:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8003ddc:	2740      	movs	r7, #64	; 0x40
		    !rng_function((uint8_t *)_random, 2*NUM_ECC_WORDS*uECC_WORD_SIZE)) {
			return 0;
		}

		// computing k as modular reduction of _random (see FIPS 186.4 B.5.1):
		uECC_vli_mmod(k, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
 8003dde:	261f      	movs	r6, #31
 8003de0:	2324      	movs	r3, #36	; 0x24
 8003de2:	469c      	mov	ip, r3
 8003de4:	44ac      	add	ip, r5
 8003de6:	4663      	mov	r3, ip
 8003de8:	9305      	str	r3, [sp, #20]
		uECC_RNG_Function rng_function = uECC_get_rng();
 8003dea:	f7ff f881 	bl	8002ef0 <uECC_get_rng>
 8003dee:	1e03      	subs	r3, r0, #0
		if (!rng_function ||
 8003df0:	d01f      	beq.n	8003e32 <uECC_sign+0x64>
		    !rng_function((uint8_t *)_random, 2*NUM_ECC_WORDS*uECC_WORD_SIZE)) {
 8003df2:	2140      	movs	r1, #64	; 0x40
 8003df4:	a80e      	add	r0, sp, #56	; 0x38
 8003df6:	4798      	blx	r3
		if (!rng_function ||
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d01b      	beq.n	8003e34 <uECC_sign+0x66>
		uECC_vli_mmod(k, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	5eea      	ldrsh	r2, [r5, r3]
 8003e00:	321f      	adds	r2, #31
 8003e02:	17d3      	asrs	r3, r2, #31
 8003e04:	4033      	ands	r3, r6
 8003e06:	189b      	adds	r3, r3, r2
 8003e08:	115b      	asrs	r3, r3, #5
 8003e0a:	b25b      	sxtb	r3, r3
 8003e0c:	9a05      	ldr	r2, [sp, #20]
 8003e0e:	a90e      	add	r1, sp, #56	; 0x38
 8003e10:	a806      	add	r0, sp, #24
 8003e12:	f7ff f978 	bl	8003106 <uECC_vli_mmod>

		if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature, 
 8003e16:	9501      	str	r5, [sp, #4]
 8003e18:	9400      	str	r4, [sp, #0]
 8003e1a:	ab06      	add	r3, sp, #24
 8003e1c:	9a04      	ldr	r2, [sp, #16]
 8003e1e:	9903      	ldr	r1, [sp, #12]
 8003e20:	9802      	ldr	r0, [sp, #8]
 8003e22:	f7ff ff22 	bl	8003c6a <uECC_sign_with_k>
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d106      	bne.n	8003e38 <uECC_sign+0x6a>
 8003e2a:	3f01      	subs	r7, #1
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 8003e2c:	2f00      	cmp	r7, #0
 8003e2e:	d1dc      	bne.n	8003dea <uECC_sign+0x1c>
 8003e30:	e000      	b.n	8003e34 <uECC_sign+0x66>
			return 0;
 8003e32:	2000      	movs	r0, #0
		    curve)) {
			return 1;
		}
	}
	return 0;
}
 8003e34:	b01f      	add	sp, #124	; 0x7c
 8003e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return 1;
 8003e38:	2001      	movs	r0, #1
 8003e3a:	e7fb      	b.n	8003e34 <uECC_sign+0x66>

08003e3c <uECC_verify>:
}

int uECC_verify(const uint8_t *public_key, const uint8_t *message_hash,
		unsigned hash_size, const uint8_t *signature,
	        uECC_Curve curve)
{
 8003e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3e:	46de      	mov	lr, fp
 8003e40:	4657      	mov	r7, sl
 8003e42:	464e      	mov	r6, r9
 8003e44:	4645      	mov	r5, r8
 8003e46:	b5e0      	push	{r5, r6, r7, lr}
 8003e48:	b0fb      	sub	sp, #492	; 0x1ec
 8003e4a:	9104      	str	r1, [sp, #16]
 8003e4c:	9205      	str	r2, [sp, #20]
 8003e4e:	001c      	movs	r4, r3
 8003e50:	9d84      	ldr	r5, [sp, #528]	; 0x210
	bitcount_t num_bits;
	bitcount_t i;

	uECC_word_t _public[NUM_ECC_WORDS * 2];
	uECC_word_t r[NUM_ECC_WORDS], s[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
 8003e52:	2700      	movs	r7, #0
 8003e54:	57ef      	ldrsb	r7, [r5, r7]
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8003e56:	2302      	movs	r3, #2
 8003e58:	5eea      	ldrsh	r2, [r5, r3]
 8003e5a:	321f      	adds	r2, #31
 8003e5c:	17d1      	asrs	r1, r2, #31
 8003e5e:	231f      	movs	r3, #31
 8003e60:	400b      	ands	r3, r1
 8003e62:	189b      	adds	r3, r3, r2
 8003e64:	115b      	asrs	r3, r3, #5
 8003e66:	b25e      	sxtb	r6, r3

	rx[num_n_words - 1] = 0;
 8003e68:	1e73      	subs	r3, r6, #1
 8003e6a:	469b      	mov	fp, r3
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	2200      	movs	r2, #0
 8003e70:	a94a      	add	r1, sp, #296	; 0x128
 8003e72:	505a      	str	r2, [r3, r1]
	r[num_n_words - 1] = 0;
 8003e74:	a90e      	add	r1, sp, #56	; 0x38
 8003e76:	505a      	str	r2, [r3, r1]
	s[num_n_words - 1] = 0;
 8003e78:	a906      	add	r1, sp, #24
 8003e7a:	505a      	str	r2, [r3, r1]

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	56aa      	ldrsb	r2, [r5, r2]
 8003e80:	9003      	str	r0, [sp, #12]
 8003e82:	0001      	movs	r1, r0
 8003e84:	a816      	add	r0, sp, #88	; 0x58
 8003e86:	f7ff fe2c 	bl	8003ae2 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 8003e8a:	00ba      	lsls	r2, r7, #2
 8003e8c:	4690      	mov	r8, r2
 8003e8e:	ab16      	add	r3, sp, #88	; 0x58
 8003e90:	4443      	add	r3, r8
 8003e92:	4699      	mov	r9, r3
 8003e94:	2201      	movs	r2, #1
 8003e96:	56aa      	ldrsb	r2, [r5, r2]
 8003e98:	9b03      	ldr	r3, [sp, #12]
 8003e9a:	1899      	adds	r1, r3, r2
 8003e9c:	4648      	mov	r0, r9
 8003e9e:	f7ff fe20 	bl	8003ae2 <uECC_vli_bytesToNative>
			       curve->num_bytes);
	uECC_vli_bytesToNative(r, signature, curve->num_bytes);
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	56aa      	ldrsb	r2, [r5, r2]
 8003ea6:	0021      	movs	r1, r4
 8003ea8:	a80e      	add	r0, sp, #56	; 0x38
 8003eaa:	f7ff fe1a 	bl	8003ae2 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 8003eae:	2201      	movs	r2, #1
 8003eb0:	56aa      	ldrsb	r2, [r5, r2]
 8003eb2:	18a1      	adds	r1, r4, r2
 8003eb4:	a806      	add	r0, sp, #24
 8003eb6:	f7ff fe14 	bl	8003ae2 <uECC_vli_bytesToNative>

	/* r, s must not be 0. */
	if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
 8003eba:	0039      	movs	r1, r7
 8003ebc:	a80e      	add	r0, sp, #56	; 0x38
 8003ebe:	f7ff f82a 	bl	8002f16 <uECC_vli_isZero>
		return 0;
 8003ec2:	2300      	movs	r3, #0
	if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	d007      	beq.n	8003ed8 <uECC_verify+0x9c>
		uECC_vli_sub(rx, rx, curve->n, num_n_words);
	}

	/* Accept only if v == r. */
	return (int)(uECC_vli_equal(rx, r, num_words) == 0);
}
 8003ec8:	0018      	movs	r0, r3
 8003eca:	b07b      	add	sp, #492	; 0x1ec
 8003ecc:	bc3c      	pop	{r2, r3, r4, r5}
 8003ece:	4690      	mov	r8, r2
 8003ed0:	4699      	mov	r9, r3
 8003ed2:	46a2      	mov	sl, r4
 8003ed4:	46ab      	mov	fp, r5
 8003ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
 8003ed8:	0039      	movs	r1, r7
 8003eda:	a806      	add	r0, sp, #24
 8003edc:	f7ff f81b 	bl	8002f16 <uECC_vli_isZero>
		return 0;
 8003ee0:	2300      	movs	r3, #0
	if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
 8003ee2:	2800      	cmp	r0, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <uECC_verify+0x8c>
	if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8003ee6:	3324      	adds	r3, #36	; 0x24
 8003ee8:	469c      	mov	ip, r3
 8003eea:	44ac      	add	ip, r5
 8003eec:	4663      	mov	r3, ip
 8003eee:	9303      	str	r3, [sp, #12]
 8003ef0:	0032      	movs	r2, r6
 8003ef2:	a90e      	add	r1, sp, #56	; 0x38
 8003ef4:	4660      	mov	r0, ip
 8003ef6:	f7ff f861 	bl	8002fbc <uECC_vli_cmp_unsafe>
		return 0;
 8003efa:	2300      	movs	r3, #0
	if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8003efc:	2801      	cmp	r0, #1
 8003efe:	d1e3      	bne.n	8003ec8 <uECC_verify+0x8c>
	    uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 8003f00:	0032      	movs	r2, r6
 8003f02:	a906      	add	r1, sp, #24
 8003f04:	9803      	ldr	r0, [sp, #12]
 8003f06:	f7ff f859 	bl	8002fbc <uECC_vli_cmp_unsafe>
		return 0;
 8003f0a:	2300      	movs	r3, #0
	if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8003f0c:	2801      	cmp	r0, #1
 8003f0e:	d1db      	bne.n	8003ec8 <uECC_verify+0x8c>
	uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 8003f10:	0033      	movs	r3, r6
 8003f12:	9c03      	ldr	r4, [sp, #12]
 8003f14:	0022      	movs	r2, r4
 8003f16:	a906      	add	r1, sp, #24
 8003f18:	a862      	add	r0, sp, #392	; 0x188
 8003f1a:	f7ff faf8 	bl	800350e <uECC_vli_modInv>
	u1[num_n_words - 1] = 0;
 8003f1e:	465b      	mov	r3, fp
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	2200      	movs	r2, #0
 8003f24:	4693      	mov	fp, r2
 8003f26:	aa04      	add	r2, sp, #16
 8003f28:	21dc      	movs	r1, #220	; 0xdc
 8003f2a:	0049      	lsls	r1, r1, #1
 8003f2c:	1852      	adds	r2, r2, r1
 8003f2e:	4659      	mov	r1, fp
 8003f30:	50d1      	str	r1, [r2, r3]
	bits2int(u1, message_hash, hash_size, curve);
 8003f32:	002b      	movs	r3, r5
 8003f34:	9a05      	ldr	r2, [sp, #20]
 8003f36:	9904      	ldr	r1, [sp, #16]
 8003f38:	a872      	add	r0, sp, #456	; 0x1c8
 8003f3a:	f7ff fe42 	bl	8003bc2 <bits2int>
	uECC_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 8003f3e:	9600      	str	r6, [sp, #0]
 8003f40:	0023      	movs	r3, r4
 8003f42:	aa62      	add	r2, sp, #392	; 0x188
 8003f44:	a972      	add	r1, sp, #456	; 0x1c8
 8003f46:	0008      	movs	r0, r1
 8003f48:	f7ff f995 	bl	8003276 <uECC_vli_modMult>
	uECC_vli_modMult(u2, r, z, curve->n, num_n_words); /* u2 = r/s */
 8003f4c:	9600      	str	r6, [sp, #0]
 8003f4e:	0023      	movs	r3, r4
 8003f50:	aa62      	add	r2, sp, #392	; 0x188
 8003f52:	a90e      	add	r1, sp, #56	; 0x38
 8003f54:	a86a      	add	r0, sp, #424	; 0x1a8
 8003f56:	f7ff f98e 	bl	8003276 <uECC_vli_modMult>
	uECC_vli_set(sum, _public, num_words);
 8003f5a:	ab16      	add	r3, sp, #88	; 0x58
 8003f5c:	469a      	mov	sl, r3
 8003f5e:	ac52      	add	r4, sp, #328	; 0x148
 8003f60:	003a      	movs	r2, r7
 8003f62:	0019      	movs	r1, r3
 8003f64:	0020      	movs	r0, r4
 8003f66:	f7ff f81b 	bl	8002fa0 <uECC_vli_set>
	uECC_vli_set(sum + num_words, _public + num_words, num_words);
 8003f6a:	0023      	movs	r3, r4
 8003f6c:	4443      	add	r3, r8
 8003f6e:	003a      	movs	r2, r7
 8003f70:	4649      	mov	r1, r9
 8003f72:	9305      	str	r3, [sp, #20]
 8003f74:	0018      	movs	r0, r3
 8003f76:	f7ff f813 	bl	8002fa0 <uECC_vli_set>
	uECC_vli_set(tx, curve->G, num_words);
 8003f7a:	2244      	movs	r2, #68	; 0x44
 8003f7c:	4691      	mov	r9, r2
 8003f7e:	44a9      	add	r9, r5
 8003f80:	003a      	movs	r2, r7
 8003f82:	4649      	mov	r1, r9
 8003f84:	a83a      	add	r0, sp, #232	; 0xe8
 8003f86:	f7ff f80b 	bl	8002fa0 <uECC_vli_set>
	uECC_vli_set(ty, curve->G + num_words, num_words);
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	4441      	add	r1, r8
 8003f8e:	003a      	movs	r2, r7
 8003f90:	a832      	add	r0, sp, #200	; 0xc8
 8003f92:	f7ff f805 	bl	8002fa0 <uECC_vli_set>
	uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 8003f96:	1d2a      	adds	r2, r5, #4
 8003f98:	9700      	str	r7, [sp, #0]
 8003f9a:	9204      	str	r2, [sp, #16]
 8003f9c:	0013      	movs	r3, r2
 8003f9e:	a93a      	add	r1, sp, #232	; 0xe8
 8003fa0:	000a      	movs	r2, r1
 8003fa2:	0021      	movs	r1, r4
 8003fa4:	a862      	add	r0, sp, #392	; 0x188
 8003fa6:	f7ff f89b 	bl	80030e0 <uECC_vli_modSub>
	XYcZ_add(tx, ty, sum, sum + num_words, curve);
 8003faa:	9500      	str	r5, [sp, #0]
 8003fac:	9b05      	ldr	r3, [sp, #20]
 8003fae:	0022      	movs	r2, r4
 8003fb0:	a932      	add	r1, sp, #200	; 0xc8
 8003fb2:	a83a      	add	r0, sp, #232	; 0xe8
 8003fb4:	f7ff fbe0 	bl	8003778 <XYcZ_add>
	uECC_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 8003fb8:	003b      	movs	r3, r7
 8003fba:	9a04      	ldr	r2, [sp, #16]
 8003fbc:	a962      	add	r1, sp, #392	; 0x188
 8003fbe:	0008      	movs	r0, r1
 8003fc0:	f7ff faa5 	bl	800350e <uECC_vli_modInv>
	apply_z(sum, sum + num_words, z, curve);
 8003fc4:	002b      	movs	r3, r5
 8003fc6:	aa62      	add	r2, sp, #392	; 0x188
 8003fc8:	9905      	ldr	r1, [sp, #20]
 8003fca:	0020      	movs	r0, r4
 8003fcc:	f7ff fbb5 	bl	800373a <apply_z>
	points[0] = 0;
 8003fd0:	465b      	mov	r3, fp
 8003fd2:	9326      	str	r3, [sp, #152]	; 0x98
	points[1] = curve->G;
 8003fd4:	464b      	mov	r3, r9
 8003fd6:	9327      	str	r3, [sp, #156]	; 0x9c
	points[2] = _public;
 8003fd8:	4653      	mov	r3, sl
 8003fda:	9328      	str	r3, [sp, #160]	; 0xa0
	points[3] = sum;
 8003fdc:	9429      	str	r4, [sp, #164]	; 0xa4
	num_bits = smax(uECC_vli_numBits(u1, num_n_words),
 8003fde:	0031      	movs	r1, r6
 8003fe0:	a872      	add	r0, sp, #456	; 0x1c8
 8003fe2:	f7fe ffb3 	bl	8002f4c <uECC_vli_numBits>
 8003fe6:	0004      	movs	r4, r0
 8003fe8:	0031      	movs	r1, r6
 8003fea:	a86a      	add	r0, sp, #424	; 0x1a8
 8003fec:	f7fe ffae 	bl	8002f4c <uECC_vli_numBits>
	return (a > b ? a : b);
 8003ff0:	1c23      	adds	r3, r4, #0
 8003ff2:	4284      	cmp	r4, r0
 8003ff4:	da00      	bge.n	8003ff8 <uECC_verify+0x1bc>
 8003ff6:	1c03      	adds	r3, r0, #0
	point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	4699      	mov	r9, r3
 8003ffc:	1e5c      	subs	r4, r3, #1
 8003ffe:	b224      	sxth	r4, r4
 8004000:	0021      	movs	r1, r4
 8004002:	a872      	add	r0, sp, #456	; 0x1c8
 8004004:	f7fe ff99 	bl	8002f3a <uECC_vli_testBit>
 8004008:	0003      	movs	r3, r0
 800400a:	1e58      	subs	r0, r3, #1
 800400c:	4183      	sbcs	r3, r0
 800400e:	469a      	mov	sl, r3
                       ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 8004010:	0021      	movs	r1, r4
 8004012:	a86a      	add	r0, sp, #424	; 0x1a8
 8004014:	f7fe ff91 	bl	8002f3a <uECC_vli_testBit>
 8004018:	1e43      	subs	r3, r0, #1
 800401a:	4198      	sbcs	r0, r3
 800401c:	0040      	lsls	r0, r0, #1
	point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 800401e:	4653      	mov	r3, sl
 8004020:	4303      	orrs	r3, r0
 8004022:	009a      	lsls	r2, r3, #2
 8004024:	ab26      	add	r3, sp, #152	; 0x98
 8004026:	58d4      	ldr	r4, [r2, r3]
	uECC_vli_set(rx, point, num_words);
 8004028:	003a      	movs	r2, r7
 800402a:	0021      	movs	r1, r4
 800402c:	a84a      	add	r0, sp, #296	; 0x128
 800402e:	f7fe ffb7 	bl	8002fa0 <uECC_vli_set>
	uECC_vli_set(ry, point + num_words, num_words);
 8004032:	0021      	movs	r1, r4
 8004034:	4441      	add	r1, r8
 8004036:	003a      	movs	r2, r7
 8004038:	a842      	add	r0, sp, #264	; 0x108
 800403a:	f7fe ffb1 	bl	8002fa0 <uECC_vli_set>
	uECC_vli_clear(z, num_words);
 800403e:	0039      	movs	r1, r7
 8004040:	a862      	add	r0, sp, #392	; 0x188
 8004042:	f7fe ff5b 	bl	8002efc <uECC_vli_clear>
	z[0] = 1;
 8004046:	2301      	movs	r3, #1
 8004048:	9362      	str	r3, [sp, #392]	; 0x188
	for (i = num_bits - 2; i >= 0; --i) {
 800404a:	464b      	mov	r3, r9
 800404c:	3b02      	subs	r3, #2
 800404e:	b21b      	sxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	db49      	blt.n	80040e8 <uECC_verify+0x2ac>
		curve->double_jacobian(rx, ry, z, curve);
 8004054:	001c      	movs	r4, r3
 8004056:	46c1      	mov	r9, r8
 8004058:	46b0      	mov	r8, r6
 800405a:	e003      	b.n	8004064 <uECC_verify+0x228>
 800405c:	3c01      	subs	r4, #1
 800405e:	b224      	sxth	r4, r4
	for (i = num_bits - 2; i >= 0; --i) {
 8004060:	2c00      	cmp	r4, #0
 8004062:	db40      	blt.n	80040e6 <uECC_verify+0x2aa>
		curve->double_jacobian(rx, ry, z, curve);
 8004064:	23a4      	movs	r3, #164	; 0xa4
 8004066:	58ee      	ldr	r6, [r5, r3]
 8004068:	002b      	movs	r3, r5
 800406a:	aa62      	add	r2, sp, #392	; 0x188
 800406c:	a942      	add	r1, sp, #264	; 0x108
 800406e:	a84a      	add	r0, sp, #296	; 0x128
 8004070:	47b0      	blx	r6
		index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
 8004072:	0021      	movs	r1, r4
 8004074:	a872      	add	r0, sp, #456	; 0x1c8
 8004076:	f7fe ff60 	bl	8002f3a <uECC_vli_testBit>
 800407a:	0006      	movs	r6, r0
 800407c:	1e70      	subs	r0, r6, #1
 800407e:	4186      	sbcs	r6, r0
 8004080:	0021      	movs	r1, r4
 8004082:	a86a      	add	r0, sp, #424	; 0x1a8
 8004084:	f7fe ff59 	bl	8002f3a <uECC_vli_testBit>
 8004088:	1e43      	subs	r3, r0, #1
 800408a:	4198      	sbcs	r0, r3
 800408c:	0040      	lsls	r0, r0, #1
 800408e:	4330      	orrs	r0, r6
		point = points[index];
 8004090:	0080      	lsls	r0, r0, #2
 8004092:	ab26      	add	r3, sp, #152	; 0x98
 8004094:	58c6      	ldr	r6, [r0, r3]
		if (point) {
 8004096:	2e00      	cmp	r6, #0
 8004098:	d0e0      	beq.n	800405c <uECC_verify+0x220>
			uECC_vli_set(tx, point, num_words);
 800409a:	003a      	movs	r2, r7
 800409c:	0031      	movs	r1, r6
 800409e:	a83a      	add	r0, sp, #232	; 0xe8
 80040a0:	f7fe ff7e 	bl	8002fa0 <uECC_vli_set>
			uECC_vli_set(ty, point + num_words, num_words);
 80040a4:	0031      	movs	r1, r6
 80040a6:	4449      	add	r1, r9
 80040a8:	003a      	movs	r2, r7
 80040aa:	a832      	add	r0, sp, #200	; 0xc8
 80040ac:	f7fe ff78 	bl	8002fa0 <uECC_vli_set>
			apply_z(tx, ty, z, curve);
 80040b0:	002b      	movs	r3, r5
 80040b2:	aa62      	add	r2, sp, #392	; 0x188
 80040b4:	a932      	add	r1, sp, #200	; 0xc8
 80040b6:	a83a      	add	r0, sp, #232	; 0xe8
 80040b8:	f7ff fb3f 	bl	800373a <apply_z>
			uECC_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 80040bc:	9700      	str	r7, [sp, #0]
 80040be:	9b04      	ldr	r3, [sp, #16]
 80040c0:	aa3a      	add	r2, sp, #232	; 0xe8
 80040c2:	a94a      	add	r1, sp, #296	; 0x128
 80040c4:	a82a      	add	r0, sp, #168	; 0xa8
 80040c6:	f7ff f80b 	bl	80030e0 <uECC_vli_modSub>
			XYcZ_add(tx, ty, rx, ry, curve);
 80040ca:	9500      	str	r5, [sp, #0]
 80040cc:	ab42      	add	r3, sp, #264	; 0x108
 80040ce:	aa4a      	add	r2, sp, #296	; 0x128
 80040d0:	a932      	add	r1, sp, #200	; 0xc8
 80040d2:	a83a      	add	r0, sp, #232	; 0xe8
 80040d4:	f7ff fb50 	bl	8003778 <XYcZ_add>
			uECC_vli_modMult_fast(z, z, tz, curve);
 80040d8:	002b      	movs	r3, r5
 80040da:	aa2a      	add	r2, sp, #168	; 0xa8
 80040dc:	a962      	add	r1, sp, #392	; 0x188
 80040de:	0008      	movs	r0, r1
 80040e0:	f7ff f8dc 	bl	800329c <uECC_vli_modMult_fast>
 80040e4:	e7ba      	b.n	800405c <uECC_verify+0x220>
 80040e6:	4646      	mov	r6, r8
	uECC_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 80040e8:	003b      	movs	r3, r7
 80040ea:	9a04      	ldr	r2, [sp, #16]
 80040ec:	a962      	add	r1, sp, #392	; 0x188
 80040ee:	0008      	movs	r0, r1
 80040f0:	f7ff fa0d 	bl	800350e <uECC_vli_modInv>
	apply_z(rx, ry, z, curve);
 80040f4:	002b      	movs	r3, r5
 80040f6:	aa62      	add	r2, sp, #392	; 0x188
 80040f8:	a942      	add	r1, sp, #264	; 0x108
 80040fa:	a84a      	add	r0, sp, #296	; 0x128
 80040fc:	f7ff fb1d 	bl	800373a <apply_z>
	if (uECC_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 8004100:	0032      	movs	r2, r6
 8004102:	a94a      	add	r1, sp, #296	; 0x128
 8004104:	9c03      	ldr	r4, [sp, #12]
 8004106:	0020      	movs	r0, r4
 8004108:	f7fe ff58 	bl	8002fbc <uECC_vli_cmp_unsafe>
 800410c:	2801      	cmp	r0, #1
 800410e:	d005      	beq.n	800411c <uECC_verify+0x2e0>
		uECC_vli_sub(rx, rx, curve->n, num_n_words);
 8004110:	0033      	movs	r3, r6
 8004112:	0022      	movs	r2, r4
 8004114:	a94a      	add	r1, sp, #296	; 0x128
 8004116:	0008      	movs	r0, r1
 8004118:	f7fe ff88 	bl	800302c <uECC_vli_sub>
	return (int)(uECC_vli_equal(rx, r, num_words) == 0);
 800411c:	003a      	movs	r2, r7
 800411e:	a90e      	add	r1, sp, #56	; 0x38
 8004120:	a84a      	add	r0, sp, #296	; 0x128
 8004122:	f7fe ff6e 	bl	8003002 <uECC_vli_equal>
 8004126:	4243      	negs	r3, r0
 8004128:	4143      	adcs	r3, r0
 800412a:	e6cd      	b.n	8003ec8 <uECC_verify+0x8c>

0800412c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800412c:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800412e:	f000 fcf5 	bl	8004b1c <xTaskGetSchedulerState>
 8004132:	2801      	cmp	r0, #1
 8004134:	d001      	beq.n	800413a <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8004136:	f000 f90d 	bl	8004354 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800413a:	bd10      	pop	{r4, pc}

0800413c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800413c:	0003      	movs	r3, r0
 800413e:	3308      	adds	r3, #8
 8004140:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004142:	2201      	movs	r2, #1
 8004144:	4252      	negs	r2, r2
 8004146:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004148:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800414a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004150:	4770      	bx	lr

08004152 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004152:	2300      	movs	r3, #0
 8004154:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004156:	4770      	bx	lr

08004158 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004158:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800415a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004164:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004166:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004168:	6803      	ldr	r3, [r0, #0]
 800416a:	3301      	adds	r3, #1
 800416c:	6003      	str	r3, [r0, #0]
}
 800416e:	4770      	bx	lr

08004170 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004170:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004172:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004174:	0002      	movs	r2, r0
 8004176:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8004178:	1c63      	adds	r3, r4, #1
 800417a:	d102      	bne.n	8004182 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800417c:	6902      	ldr	r2, [r0, #16]
 800417e:	e004      	b.n	800418a <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004180:	001a      	movs	r2, r3
 8004182:	6853      	ldr	r3, [r2, #4]
 8004184:	681d      	ldr	r5, [r3, #0]
 8004186:	42ac      	cmp	r4, r5
 8004188:	d2fa      	bcs.n	8004180 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800418a:	6853      	ldr	r3, [r2, #4]
 800418c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800418e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004190:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004192:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004194:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004196:	6803      	ldr	r3, [r0, #0]
 8004198:	3301      	adds	r3, #1
 800419a:	6003      	str	r3, [r0, #0]
}
 800419c:	bd30      	pop	{r4, r5, pc}

0800419e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800419e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041a0:	6842      	ldr	r2, [r0, #4]
 80041a2:	6881      	ldr	r1, [r0, #8]
 80041a4:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041a6:	6882      	ldr	r2, [r0, #8]
 80041a8:	6841      	ldr	r1, [r0, #4]
 80041aa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	4290      	cmp	r0, r2
 80041b0:	d006      	beq.n	80041c0 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80041b2:	2200      	movs	r2, #0
 80041b4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	3a01      	subs	r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041bc:	6818      	ldr	r0, [r3, #0]
}
 80041be:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041c0:	6882      	ldr	r2, [r0, #8]
 80041c2:	605a      	str	r2, [r3, #4]
 80041c4:	e7f5      	b.n	80041b2 <uxListRemove+0x14>
	...

080041c8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041c8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <prvTaskExitError+0x20>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3301      	adds	r3, #1
 80041d4:	d001      	beq.n	80041da <prvTaskExitError+0x12>
 80041d6:	b672      	cpsid	i
 80041d8:	e7fe      	b.n	80041d8 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 80041da:	b672      	cpsid	i
	while( ulDummy == 0 )
 80041dc:	9b01      	ldr	r3, [sp, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0fc      	beq.n	80041dc <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041e2:	b002      	add	sp, #8
 80041e4:	4770      	bx	lr
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	20000008 	.word	0x20000008
 80041ec:	00000000 	.word	0x00000000

080041f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80041f0:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <pxCurrentTCBConst2>)
 80041f2:	6813      	ldr	r3, [r2, #0]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	3020      	adds	r0, #32
 80041f8:	f380 8809 	msr	PSP, r0
 80041fc:	2002      	movs	r0, #2
 80041fe:	f380 8814 	msr	CONTROL, r0
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004208:	46ae      	mov	lr, r5
 800420a:	bc08      	pop	{r3}
 800420c:	bc04      	pop	{r2}
 800420e:	b662      	cpsie	i
 8004210:	4718      	bx	r3
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	46c0      	nop			; (mov r8, r8)
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	46c0      	nop			; (mov r8, r8)
 800421e:	46c0      	nop			; (mov r8, r8)

08004220 <pxCurrentTCBConst2>:
 8004220:	20000d28 	.word	0x20000d28

08004224 <pxPortInitialiseStack>:
{
 8004224:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004226:	1f03      	subs	r3, r0, #4
 8004228:	2480      	movs	r4, #128	; 0x80
 800422a:	0464      	lsls	r4, r4, #17
 800422c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800422e:	3b04      	subs	r3, #4
 8004230:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004232:	3b04      	subs	r3, #4
 8004234:	4902      	ldr	r1, [pc, #8]	; (8004240 <pxPortInitialiseStack+0x1c>)
 8004236:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004238:	3b14      	subs	r3, #20
 800423a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800423c:	3840      	subs	r0, #64	; 0x40
}
 800423e:	bd10      	pop	{r4, pc}
 8004240:	080041c9 	.word	0x080041c9

08004244 <SVC_Handler>:
}
 8004244:	4770      	bx	lr
	...

08004248 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004248:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <xPortStartScheduler+0x4c>)
 800424c:	6819      	ldr	r1, [r3, #0]
 800424e:	22ff      	movs	r2, #255	; 0xff
 8004250:	0412      	lsls	r2, r2, #16
 8004252:	430a      	orrs	r2, r1
 8004254:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8004256:	6819      	ldr	r1, [r3, #0]
 8004258:	22ff      	movs	r2, #255	; 0xff
 800425a:	0612      	lsls	r2, r2, #24
 800425c:	430a      	orrs	r2, r1
 800425e:	601a      	str	r2, [r3, #0]
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004260:	4d0d      	ldr	r5, [pc, #52]	; (8004298 <xPortStartScheduler+0x50>)
 8004262:	2400      	movs	r4, #0
 8004264:	602c      	str	r4, [r5, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <xPortStartScheduler+0x54>)
 8004268:	601c      	str	r4, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800426a:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <xPortStartScheduler+0x58>)
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	21fa      	movs	r1, #250	; 0xfa
 8004270:	0089      	lsls	r1, r1, #2
 8004272:	f7fb ff51 	bl	8000118 <__udivsi3>
 8004276:	3801      	subs	r0, #1
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <xPortStartScheduler+0x5c>)
 800427a:	6018      	str	r0, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800427c:	2307      	movs	r3, #7
 800427e:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <xPortStartScheduler+0x60>)
 8004282:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
 8004284:	f7ff ffb4 	bl	80041f0 <vPortStartFirstTask>
	vTaskSwitchContext();
 8004288:	f000 fbfa 	bl	8004a80 <vTaskSwitchContext>
	prvTaskExitError();
 800428c:	f7ff ff9c 	bl	80041c8 <prvTaskExitError>
}
 8004290:	2000      	movs	r0, #0
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	e000ed20 	.word	0xe000ed20
 8004298:	e000e010 	.word	0xe000e010
 800429c:	e000e018 	.word	0xe000e018
 80042a0:	20000000 	.word	0x20000000
 80042a4:	e000e014 	.word	0xe000e014
 80042a8:	20000008 	.word	0x20000008

080042ac <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80042ac:	2280      	movs	r2, #128	; 0x80
 80042ae:	0552      	lsls	r2, r2, #21
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <vPortYield+0x14>)
 80042b2:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80042b4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80042b8:	f3bf 8f6f 	isb	sy
}
 80042bc:	4770      	bx	lr
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	e000ed04 	.word	0xe000ed04

080042c4 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 80042c4:	b672      	cpsid	i
    uxCriticalNesting++;
 80042c6:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <vPortEnterCritical+0x14>)
 80042c8:	6813      	ldr	r3, [r2, #0]
 80042ca:	3301      	adds	r3, #1
 80042cc:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 80042ce:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80042d2:	f3bf 8f6f 	isb	sy
}
 80042d6:	4770      	bx	lr
 80042d8:	20000008 	.word	0x20000008

080042dc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <vPortExitCritical+0x1c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <vPortExitCritical+0xc>
 80042e4:	b672      	cpsid	i
 80042e6:	e7fe      	b.n	80042e6 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 80042e8:	3b01      	subs	r3, #1
 80042ea:	4a03      	ldr	r2, [pc, #12]	; (80042f8 <vPortExitCritical+0x1c>)
 80042ec:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d100      	bne.n	80042f4 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 80042f2:	b662      	cpsie	i
}
 80042f4:	4770      	bx	lr
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	20000008 	.word	0x20000008

080042fc <ulSetInterruptMaskFromISR>:
	__asm volatile(
 80042fc:	f3ef 8010 	mrs	r0, PRIMASK
 8004300:	b672      	cpsid	i
 8004302:	4770      	bx	lr

08004304 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8004304:	f380 8810 	msr	PRIMASK, r0
 8004308:	4770      	bx	lr
 800430a:	0000      	movs	r0, r0
 800430c:	0000      	movs	r0, r0
	...

08004310 <PendSV_Handler>:
	__asm volatile
 8004310:	f3ef 8009 	mrs	r0, PSP
 8004314:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <pxCurrentTCBConst>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	3820      	subs	r0, #32
 800431a:	6010      	str	r0, [r2, #0]
 800431c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800431e:	4644      	mov	r4, r8
 8004320:	464d      	mov	r5, r9
 8004322:	4656      	mov	r6, sl
 8004324:	465f      	mov	r7, fp
 8004326:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004328:	b508      	push	{r3, lr}
 800432a:	b672      	cpsid	i
 800432c:	f000 fba8 	bl	8004a80 <vTaskSwitchContext>
 8004330:	b662      	cpsie	i
 8004332:	bc0c      	pop	{r2, r3}
 8004334:	6811      	ldr	r1, [r2, #0]
 8004336:	6808      	ldr	r0, [r1, #0]
 8004338:	3010      	adds	r0, #16
 800433a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800433c:	46a0      	mov	r8, r4
 800433e:	46a9      	mov	r9, r5
 8004340:	46b2      	mov	sl, r6
 8004342:	46bb      	mov	fp, r7
 8004344:	f380 8809 	msr	PSP, r0
 8004348:	3820      	subs	r0, #32
 800434a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800434c:	4718      	bx	r3
 800434e:	46c0      	nop			; (mov r8, r8)

08004350 <pxCurrentTCBConst>:
 8004350:	20000d28 	.word	0x20000d28

08004354 <xPortSysTickHandler>:
{
 8004354:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004356:	f7ff ffd1 	bl	80042fc <ulSetInterruptMaskFromISR>
 800435a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800435c:	f000 fa7c 	bl	8004858 <xTaskIncrementTick>
 8004360:	2800      	cmp	r0, #0
 8004362:	d003      	beq.n	800436c <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8004364:	2280      	movs	r2, #128	; 0x80
 8004366:	0552      	lsls	r2, r2, #21
 8004368:	4b02      	ldr	r3, [pc, #8]	; (8004374 <xPortSysTickHandler+0x20>)
 800436a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800436c:	0020      	movs	r0, r4
 800436e:	f7ff ffc9 	bl	8004304 <vClearInterruptMaskFromISR>
}
 8004372:	bd10      	pop	{r4, pc}
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004378:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <prvInsertBlockIntoFreeList+0x4c>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4282      	cmp	r2, r0
 8004380:	d319      	bcc.n	80043b6 <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004382:	685c      	ldr	r4, [r3, #4]
 8004384:	1919      	adds	r1, r3, r4
 8004386:	4288      	cmp	r0, r1
 8004388:	d103      	bne.n	8004392 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800438a:	6841      	ldr	r1, [r0, #4]
 800438c:	1909      	adds	r1, r1, r4
 800438e:	6059      	str	r1, [r3, #4]
 8004390:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004392:	6841      	ldr	r1, [r0, #4]
 8004394:	1844      	adds	r4, r0, r1
 8004396:	42a2      	cmp	r2, r4
 8004398:	d111      	bne.n	80043be <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800439a:	4c0b      	ldr	r4, [pc, #44]	; (80043c8 <prvInsertBlockIntoFreeList+0x50>)
 800439c:	6824      	ldr	r4, [r4, #0]
 800439e:	42a2      	cmp	r2, r4
 80043a0:	d00b      	beq.n	80043ba <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043a2:	6852      	ldr	r2, [r2, #4]
 80043a4:	1852      	adds	r2, r2, r1
 80043a6:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043ae:	4298      	cmp	r0, r3
 80043b0:	d000      	beq.n	80043b4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043b2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043b4:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043b6:	0013      	movs	r3, r2
 80043b8:	e7e0      	b.n	800437c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043ba:	6002      	str	r2, [r0, #0]
 80043bc:	e7f7      	b.n	80043ae <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043be:	6002      	str	r2, [r0, #0]
 80043c0:	e7f5      	b.n	80043ae <prvInsertBlockIntoFreeList+0x36>
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	20000d20 	.word	0x20000d20
 80043c8:	20000110 	.word	0x20000110

080043cc <pvPortMalloc>:
{
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	0004      	movs	r4, r0
	vTaskSuspendAll();
 80043d0:	f000 fa3a 	bl	8004848 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80043d4:	4b3c      	ldr	r3, [pc, #240]	; (80044c8 <pvPortMalloc+0xfc>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d015      	beq.n	8004408 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043dc:	4b3b      	ldr	r3, [pc, #236]	; (80044cc <pvPortMalloc+0x100>)
 80043de:	681f      	ldr	r7, [r3, #0]
 80043e0:	423c      	tst	r4, r7
 80043e2:	d168      	bne.n	80044b6 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 80043e4:	2c00      	cmp	r4, #0
 80043e6:	d06a      	beq.n	80044be <pvPortMalloc+0xf2>
				xWantedSize += xHeapStructSize;
 80043e8:	0023      	movs	r3, r4
 80043ea:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043ec:	075a      	lsls	r2, r3, #29
 80043ee:	d002      	beq.n	80043f6 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043f0:	2207      	movs	r2, #7
 80043f2:	4393      	bics	r3, r2
 80043f4:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d05d      	beq.n	80044b6 <pvPortMalloc+0xea>
 80043fa:	4a35      	ldr	r2, [pc, #212]	; (80044d0 <pvPortMalloc+0x104>)
 80043fc:	6816      	ldr	r6, [r2, #0]
 80043fe:	42b3      	cmp	r3, r6
 8004400:	d859      	bhi.n	80044b6 <pvPortMalloc+0xea>
				pxBlock = xStart.pxNextFreeBlock;
 8004402:	4a34      	ldr	r2, [pc, #208]	; (80044d4 <pvPortMalloc+0x108>)
 8004404:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004406:	e027      	b.n	8004458 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8004408:	4a33      	ldr	r2, [pc, #204]	; (80044d8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800440a:	0753      	lsls	r3, r2, #29
 800440c:	d01f      	beq.n	800444e <pvPortMalloc+0x82>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800440e:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004410:	2307      	movs	r3, #7
 8004412:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004414:	23c0      	movs	r3, #192	; 0xc0
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	18d3      	adds	r3, r2, r3
 800441a:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800441c:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800441e:	482d      	ldr	r0, [pc, #180]	; (80044d4 <pvPortMalloc+0x108>)
 8004420:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004422:	2100      	movs	r1, #0
 8004424:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004426:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
 8004428:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800442a:	2007      	movs	r0, #7
 800442c:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
 800442e:	4826      	ldr	r0, [pc, #152]	; (80044c8 <pvPortMalloc+0xfc>)
 8004430:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8004432:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004434:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004436:	1a99      	subs	r1, r3, r2
 8004438:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800443a:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800443c:	4b27      	ldr	r3, [pc, #156]	; (80044dc <pvPortMalloc+0x110>)
 800443e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004440:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <pvPortMalloc+0x104>)
 8004442:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004444:	2280      	movs	r2, #128	; 0x80
 8004446:	0612      	lsls	r2, r2, #24
 8004448:	4b20      	ldr	r3, [pc, #128]	; (80044cc <pvPortMalloc+0x100>)
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	e7c6      	b.n	80043dc <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800444e:	23c0      	movs	r3, #192	; 0xc0
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	e7e4      	b.n	800441e <pvPortMalloc+0x52>
 8004454:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8004456:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004458:	6861      	ldr	r1, [r4, #4]
 800445a:	428b      	cmp	r3, r1
 800445c:	d902      	bls.n	8004464 <pvPortMalloc+0x98>
 800445e:	6821      	ldr	r1, [r4, #0]
 8004460:	2900      	cmp	r1, #0
 8004462:	d1f7      	bne.n	8004454 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8004464:	4918      	ldr	r1, [pc, #96]	; (80044c8 <pvPortMalloc+0xfc>)
 8004466:	6809      	ldr	r1, [r1, #0]
 8004468:	428c      	cmp	r4, r1
 800446a:	d024      	beq.n	80044b6 <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800446c:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800446e:	6821      	ldr	r1, [r4, #0]
 8004470:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004472:	6862      	ldr	r2, [r4, #4]
 8004474:	1ad2      	subs	r2, r2, r3
 8004476:	2a10      	cmp	r2, #16
 8004478:	d908      	bls.n	800448c <pvPortMalloc+0xc0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800447a:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800447c:	0741      	lsls	r1, r0, #29
 800447e:	d001      	beq.n	8004484 <pvPortMalloc+0xb8>
 8004480:	b672      	cpsid	i
 8004482:	e7fe      	b.n	8004482 <pvPortMalloc+0xb6>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004484:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004486:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004488:	f7ff ff76 	bl	8004378 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800448c:	6862      	ldr	r2, [r4, #4]
 800448e:	1ab6      	subs	r6, r6, r2
 8004490:	490f      	ldr	r1, [pc, #60]	; (80044d0 <pvPortMalloc+0x104>)
 8004492:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004494:	4911      	ldr	r1, [pc, #68]	; (80044dc <pvPortMalloc+0x110>)
 8004496:	6809      	ldr	r1, [r1, #0]
 8004498:	428e      	cmp	r6, r1
 800449a:	d201      	bcs.n	80044a0 <pvPortMalloc+0xd4>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800449c:	490f      	ldr	r1, [pc, #60]	; (80044dc <pvPortMalloc+0x110>)
 800449e:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044a0:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044a2:	4317      	orrs	r7, r2
 80044a4:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 80044aa:	f000 fa5f 	bl	800496c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044ae:	076b      	lsls	r3, r5, #29
 80044b0:	d008      	beq.n	80044c4 <pvPortMalloc+0xf8>
 80044b2:	b672      	cpsid	i
 80044b4:	e7fe      	b.n	80044b4 <pvPortMalloc+0xe8>
	( void ) xTaskResumeAll();
 80044b6:	f000 fa59 	bl	800496c <xTaskResumeAll>
 80044ba:	2500      	movs	r5, #0
 80044bc:	e002      	b.n	80044c4 <pvPortMalloc+0xf8>
 80044be:	f000 fa55 	bl	800496c <xTaskResumeAll>
void *pvReturn = NULL;
 80044c2:	2500      	movs	r5, #0
}
 80044c4:	0028      	movs	r0, r5
 80044c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044c8:	20000110 	.word	0x20000110
 80044cc:	20000d14 	.word	0x20000d14
 80044d0:	20000d18 	.word	0x20000d18
 80044d4:	20000d20 	.word	0x20000d20
 80044d8:	20000114 	.word	0x20000114
 80044dc:	20000d1c 	.word	0x20000d1c

080044e0 <vPortFree>:
{
 80044e0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d020      	beq.n	8004528 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044e6:	0003      	movs	r3, r0
 80044e8:	3b08      	subs	r3, #8
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4a0f      	ldr	r2, [pc, #60]	; (800452c <vPortFree+0x4c>)
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	421a      	tst	r2, r3
 80044f2:	d101      	bne.n	80044f8 <vPortFree+0x18>
 80044f4:	b672      	cpsid	i
 80044f6:	e7fe      	b.n	80044f6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044f8:	0001      	movs	r1, r0
 80044fa:	3908      	subs	r1, #8
 80044fc:	6809      	ldr	r1, [r1, #0]
 80044fe:	2900      	cmp	r1, #0
 8004500:	d001      	beq.n	8004506 <vPortFree+0x26>
 8004502:	b672      	cpsid	i
 8004504:	e7fe      	b.n	8004504 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004506:	3808      	subs	r0, #8
 8004508:	0004      	movs	r4, r0
 800450a:	4393      	bics	r3, r2
 800450c:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800450e:	f000 f99b 	bl	8004848 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004512:	4a07      	ldr	r2, [pc, #28]	; (8004530 <vPortFree+0x50>)
 8004514:	6863      	ldr	r3, [r4, #4]
 8004516:	6811      	ldr	r1, [r2, #0]
 8004518:	468c      	mov	ip, r1
 800451a:	4463      	add	r3, ip
 800451c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800451e:	0020      	movs	r0, r4
 8004520:	f7ff ff2a 	bl	8004378 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8004524:	f000 fa22 	bl	800496c <xTaskResumeAll>
}
 8004528:	bd10      	pop	{r4, pc}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	20000d14 	.word	0x20000d14
 8004530:	20000d18 	.word	0x20000d18

08004534 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004534:	4b08      	ldr	r3, [pc, #32]	; (8004558 <prvResetNextTaskUnblockTime+0x24>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <prvResetNextTaskUnblockTime+0x24>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	4b04      	ldr	r3, [pc, #16]	; (800455c <prvResetNextTaskUnblockTime+0x28>)
 800454a:	601a      	str	r2, [r3, #0]
	}
}
 800454c:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800454e:	2201      	movs	r2, #1
 8004550:	4252      	negs	r2, r2
 8004552:	4b02      	ldr	r3, [pc, #8]	; (800455c <prvResetNextTaskUnblockTime+0x28>)
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e7f9      	b.n	800454c <prvResetNextTaskUnblockTime+0x18>
 8004558:	20000d2c 	.word	0x20000d2c
 800455c:	20000e04 	.word	0x20000e04

08004560 <prvIdleTask>:
{
 8004560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004562:	46c6      	mov	lr, r8
 8004564:	b500      	push	{lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004566:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <prvIdleTask+0x58>)
 8004568:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800456a:	4f14      	ldr	r7, [pc, #80]	; (80045bc <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800456c:	4e14      	ldr	r6, [pc, #80]	; (80045c0 <prvIdleTask+0x60>)
				--uxDeletedTasksWaitingCleanUp;
 800456e:	001d      	movs	r5, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004570:	4643      	mov	r3, r8
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d017      	beq.n	80045a8 <prvIdleTask+0x48>
			taskENTER_CRITICAL();
 8004578:	f7ff fea4 	bl	80042c4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004580:	1d20      	adds	r0, r4, #4
 8004582:	f7ff fe0c 	bl	800419e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004586:	6833      	ldr	r3, [r6, #0]
 8004588:	3b01      	subs	r3, #1
 800458a:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	3b01      	subs	r3, #1
 8004590:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 8004592:	f7ff fea3 	bl	80042dc <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8004596:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004598:	f7ff ffa2 	bl	80044e0 <vPortFree>
			vPortFree( pxTCB );
 800459c:	0020      	movs	r0, r4
 800459e:	f7ff ff9f 	bl	80044e0 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045a2:	682b      	ldr	r3, [r5, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e7      	bne.n	8004578 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <prvIdleTask+0x64>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d9df      	bls.n	8004570 <prvIdleTask+0x10>
				taskYIELD();
 80045b0:	f7ff fe7c 	bl	80042ac <vPortYield>
 80045b4:	e7dc      	b.n	8004570 <prvIdleTask+0x10>
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	20000dc4 	.word	0x20000dc4
 80045bc:	20000e38 	.word	0x20000e38
 80045c0:	20000dc0 	.word	0x20000dc0
 80045c4:	20000d34 	.word	0x20000d34

080045c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	0004      	movs	r4, r0
 80045cc:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045ce:	4b17      	ldr	r3, [pc, #92]	; (800462c <prvAddCurrentTaskToDelayedList+0x64>)
 80045d0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045d2:	4b17      	ldr	r3, [pc, #92]	; (8004630 <prvAddCurrentTaskToDelayedList+0x68>)
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	3004      	adds	r0, #4
 80045d8:	f7ff fde1 	bl	800419e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045dc:	1c63      	adds	r3, r4, #1
 80045de:	d013      	beq.n	8004608 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045e0:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045e2:	4b13      	ldr	r3, [pc, #76]	; (8004630 <prvAddCurrentTaskToDelayedList+0x68>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80045e8:	42a6      	cmp	r6, r4
 80045ea:	d816      	bhi.n	800461a <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ec:	4b11      	ldr	r3, [pc, #68]	; (8004634 <prvAddCurrentTaskToDelayedList+0x6c>)
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <prvAddCurrentTaskToDelayedList+0x68>)
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	3104      	adds	r1, #4
 80045f6:	f7ff fdbb 	bl	8004170 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80045fa:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <prvAddCurrentTaskToDelayedList+0x70>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	429c      	cmp	r4, r3
 8004600:	d212      	bcs.n	8004628 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8004602:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <prvAddCurrentTaskToDelayedList+0x70>)
 8004604:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004606:	e00f      	b.n	8004628 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004608:	2d00      	cmp	r5, #0
 800460a:	d0e9      	beq.n	80045e0 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800460c:	4b08      	ldr	r3, [pc, #32]	; (8004630 <prvAddCurrentTaskToDelayedList+0x68>)
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	3104      	adds	r1, #4
 8004612:	480a      	ldr	r0, [pc, #40]	; (800463c <prvAddCurrentTaskToDelayedList+0x74>)
 8004614:	f7ff fda0 	bl	8004158 <vListInsertEnd>
 8004618:	e006      	b.n	8004628 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800461a:	4b09      	ldr	r3, [pc, #36]	; (8004640 <prvAddCurrentTaskToDelayedList+0x78>)
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	4b04      	ldr	r3, [pc, #16]	; (8004630 <prvAddCurrentTaskToDelayedList+0x68>)
 8004620:	6819      	ldr	r1, [r3, #0]
 8004622:	3104      	adds	r1, #4
 8004624:	f7ff fda4 	bl	8004170 <vListInsert>
}
 8004628:	bd70      	pop	{r4, r5, r6, pc}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	20000e4c 	.word	0x20000e4c
 8004630:	20000d28 	.word	0x20000d28
 8004634:	20000d2c 	.word	0x20000d2c
 8004638:	20000e04 	.word	0x20000e04
 800463c:	20000e24 	.word	0x20000e24
 8004640:	20000d30 	.word	0x20000d30

08004644 <xTaskCreate>:
	{
 8004644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004646:	46c6      	mov	lr, r8
 8004648:	b500      	push	{lr}
 800464a:	b082      	sub	sp, #8
 800464c:	9000      	str	r0, [sp, #0]
 800464e:	000f      	movs	r7, r1
 8004650:	9301      	str	r3, [sp, #4]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004652:	0095      	lsls	r5, r2, #2
 8004654:	0028      	movs	r0, r5
 8004656:	f7ff feb9 	bl	80043cc <pvPortMalloc>
 800465a:	1e04      	subs	r4, r0, #0
			if( pxStack != NULL )
 800465c:	d100      	bne.n	8004660 <xTaskCreate+0x1c>
 800465e:	e080      	b.n	8004762 <xTaskCreate+0x11e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004660:	2054      	movs	r0, #84	; 0x54
 8004662:	f7ff feb3 	bl	80043cc <pvPortMalloc>
 8004666:	1e06      	subs	r6, r0, #0
				if( pxNewTCB != NULL )
 8004668:	d100      	bne.n	800466c <xTaskCreate+0x28>
 800466a:	e077      	b.n	800475c <xTaskCreate+0x118>
					pxNewTCB->pxStack = pxStack;
 800466c:	6304      	str	r4, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800466e:	1f2a      	subs	r2, r5, #4
 8004670:	18a2      	adds	r2, r4, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004672:	2307      	movs	r3, #7
 8004674:	439a      	bics	r2, r3
 8004676:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004678:	783a      	ldrb	r2, [r7, #0]
 800467a:	332d      	adds	r3, #45	; 0x2d
 800467c:	54c2      	strb	r2, [r0, r3]
		if( pcName[ x ] == 0x00 )
 800467e:	783b      	ldrb	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <xTaskCreate+0x5a>
 8004684:	3701      	adds	r7, #1
 8004686:	0003      	movs	r3, r0
 8004688:	3335      	adds	r3, #53	; 0x35
 800468a:	3044      	adds	r0, #68	; 0x44
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800468c:	783a      	ldrb	r2, [r7, #0]
 800468e:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 8004690:	783a      	ldrb	r2, [r7, #0]
 8004692:	2a00      	cmp	r2, #0
 8004694:	d003      	beq.n	800469e <xTaskCreate+0x5a>
 8004696:	3701      	adds	r7, #1
 8004698:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800469a:	4283      	cmp	r3, r0
 800469c:	d1f6      	bne.n	800468c <xTaskCreate+0x48>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800469e:	2200      	movs	r2, #0
 80046a0:	2343      	movs	r3, #67	; 0x43
 80046a2:	54f2      	strb	r2, [r6, r3]
 80046a4:	9d08      	ldr	r5, [sp, #32]
 80046a6:	2d06      	cmp	r5, #6
 80046a8:	d900      	bls.n	80046ac <xTaskCreate+0x68>
 80046aa:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80046ac:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80046ae:	6475      	str	r5, [r6, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80046b0:	2400      	movs	r4, #0
 80046b2:	64b4      	str	r4, [r6, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046b4:	1d37      	adds	r7, r6, #4
 80046b6:	0038      	movs	r0, r7
 80046b8:	f7ff fd4b 	bl	8004152 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046bc:	0030      	movs	r0, r6
 80046be:	3018      	adds	r0, #24
 80046c0:	f7ff fd47 	bl	8004152 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046c4:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046c6:	2307      	movs	r3, #7
 80046c8:	1b5b      	subs	r3, r3, r5
 80046ca:	61b3      	str	r3, [r6, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046cc:	6276      	str	r6, [r6, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80046ce:	64f4      	str	r4, [r6, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046d0:	2350      	movs	r3, #80	; 0x50
 80046d2:	54f4      	strb	r4, [r6, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046d4:	9a01      	ldr	r2, [sp, #4]
 80046d6:	9900      	ldr	r1, [sp, #0]
 80046d8:	4640      	mov	r0, r8
 80046da:	f7ff fda3 	bl	8004224 <pxPortInitialiseStack>
 80046de:	6030      	str	r0, [r6, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80046e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d000      	beq.n	80046e8 <xTaskCreate+0xa4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046e6:	601e      	str	r6, [r3, #0]
	taskENTER_CRITICAL();
 80046e8:	f7ff fdec 	bl	80042c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80046ec:	4a32      	ldr	r2, [pc, #200]	; (80047b8 <xTaskCreate+0x174>)
 80046ee:	6813      	ldr	r3, [r2, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046f4:	4b31      	ldr	r3, [pc, #196]	; (80047bc <xTaskCreate+0x178>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d035      	beq.n	8004768 <xTaskCreate+0x124>
			if( xSchedulerRunning == pdFALSE )
 80046fc:	4b30      	ldr	r3, [pc, #192]	; (80047c0 <xTaskCreate+0x17c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d107      	bne.n	8004714 <xTaskCreate+0xd0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004704:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <xTaskCreate+0x178>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800470c:	4293      	cmp	r3, r2
 800470e:	d801      	bhi.n	8004714 <xTaskCreate+0xd0>
					pxCurrentTCB = pxNewTCB;
 8004710:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <xTaskCreate+0x178>)
 8004712:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8004714:	4a2b      	ldr	r2, [pc, #172]	; (80047c4 <xTaskCreate+0x180>)
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	3301      	adds	r3, #1
 800471a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800471c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800471e:	4a2a      	ldr	r2, [pc, #168]	; (80047c8 <xTaskCreate+0x184>)
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <xTaskCreate+0xe6>
 8004726:	4a28      	ldr	r2, [pc, #160]	; (80047c8 <xTaskCreate+0x184>)
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	0098      	lsls	r0, r3, #2
 800472c:	18c0      	adds	r0, r0, r3
 800472e:	0080      	lsls	r0, r0, #2
 8004730:	4b26      	ldr	r3, [pc, #152]	; (80047cc <xTaskCreate+0x188>)
 8004732:	1818      	adds	r0, r3, r0
 8004734:	0039      	movs	r1, r7
 8004736:	f7ff fd0f 	bl	8004158 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800473a:	f7ff fdcf 	bl	80042dc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <xTaskCreate+0x17c>)
 8004740:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 8004742:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <xTaskCreate+0x110>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004748:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <xTaskCreate+0x178>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004750:	429a      	cmp	r2, r3
 8004752:	d32d      	bcc.n	80047b0 <xTaskCreate+0x16c>
	}
 8004754:	b002      	add	sp, #8
 8004756:	bc04      	pop	{r2}
 8004758:	4690      	mov	r8, r2
 800475a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 800475c:	0020      	movs	r0, r4
 800475e:	f7ff febf 	bl	80044e0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004762:	2001      	movs	r0, #1
 8004764:	4240      	negs	r0, r0
 8004766:	e7f5      	b.n	8004754 <xTaskCreate+0x110>
			pxCurrentTCB = pxNewTCB;
 8004768:	4b14      	ldr	r3, [pc, #80]	; (80047bc <xTaskCreate+0x178>)
 800476a:	601e      	str	r6, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800476c:	6813      	ldr	r3, [r2, #0]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d1d0      	bne.n	8004714 <xTaskCreate+0xd0>
 8004772:	4c16      	ldr	r4, [pc, #88]	; (80047cc <xTaskCreate+0x188>)
 8004774:	0025      	movs	r5, r4
 8004776:	358c      	adds	r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004778:	0020      	movs	r0, r4
 800477a:	f7ff fcdf 	bl	800413c <vListInitialise>
 800477e:	3414      	adds	r4, #20
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004780:	42a5      	cmp	r5, r4
 8004782:	d1f9      	bne.n	8004778 <xTaskCreate+0x134>
	vListInitialise( &xDelayedTaskList1 );
 8004784:	4d12      	ldr	r5, [pc, #72]	; (80047d0 <xTaskCreate+0x18c>)
 8004786:	0028      	movs	r0, r5
 8004788:	f7ff fcd8 	bl	800413c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800478c:	4c11      	ldr	r4, [pc, #68]	; (80047d4 <xTaskCreate+0x190>)
 800478e:	0020      	movs	r0, r4
 8004790:	f7ff fcd4 	bl	800413c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004794:	4810      	ldr	r0, [pc, #64]	; (80047d8 <xTaskCreate+0x194>)
 8004796:	f7ff fcd1 	bl	800413c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800479a:	4810      	ldr	r0, [pc, #64]	; (80047dc <xTaskCreate+0x198>)
 800479c:	f7ff fcce 	bl	800413c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80047a0:	480f      	ldr	r0, [pc, #60]	; (80047e0 <xTaskCreate+0x19c>)
 80047a2:	f7ff fccb 	bl	800413c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80047a6:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <xTaskCreate+0x1a0>)
 80047a8:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047aa:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <xTaskCreate+0x1a4>)
 80047ac:	601c      	str	r4, [r3, #0]
 80047ae:	e7b1      	b.n	8004714 <xTaskCreate+0xd0>
			taskYIELD_IF_USING_PREEMPTION();
 80047b0:	f7ff fd7c 	bl	80042ac <vPortYield>
			xReturn = pdPASS;
 80047b4:	2001      	movs	r0, #1
 80047b6:	e7cd      	b.n	8004754 <xTaskCreate+0x110>
 80047b8:	20000dc0 	.word	0x20000dc0
 80047bc:	20000d28 	.word	0x20000d28
 80047c0:	20000e20 	.word	0x20000e20
 80047c4:	20000dd0 	.word	0x20000dd0
 80047c8:	20000dd4 	.word	0x20000dd4
 80047cc:	20000d34 	.word	0x20000d34
 80047d0:	20000dd8 	.word	0x20000dd8
 80047d4:	20000dec 	.word	0x20000dec
 80047d8:	20000e0c 	.word	0x20000e0c
 80047dc:	20000e38 	.word	0x20000e38
 80047e0:	20000e24 	.word	0x20000e24
 80047e4:	20000d2c 	.word	0x20000d2c
 80047e8:	20000d30 	.word	0x20000d30

080047ec <vTaskStartScheduler>:
{
 80047ec:	b500      	push	{lr}
 80047ee:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <vTaskStartScheduler+0x44>)
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	2300      	movs	r3, #0
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	2280      	movs	r2, #128	; 0x80
 80047fa:	490e      	ldr	r1, [pc, #56]	; (8004834 <vTaskStartScheduler+0x48>)
 80047fc:	480e      	ldr	r0, [pc, #56]	; (8004838 <vTaskStartScheduler+0x4c>)
 80047fe:	f7ff ff21 	bl	8004644 <xTaskCreate>
	if( xReturn == pdPASS )
 8004802:	2801      	cmp	r0, #1
 8004804:	d003      	beq.n	800480e <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	d00f      	beq.n	800482a <vTaskStartScheduler+0x3e>
}
 800480a:	b003      	add	sp, #12
 800480c:	bd00      	pop	{pc}
		portDISABLE_INTERRUPTS();
 800480e:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8004810:	2201      	movs	r2, #1
 8004812:	4252      	negs	r2, r2
 8004814:	4b09      	ldr	r3, [pc, #36]	; (800483c <vTaskStartScheduler+0x50>)
 8004816:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004818:	3202      	adds	r2, #2
 800481a:	4b09      	ldr	r3, [pc, #36]	; (8004840 <vTaskStartScheduler+0x54>)
 800481c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800481e:	2200      	movs	r2, #0
 8004820:	4b08      	ldr	r3, [pc, #32]	; (8004844 <vTaskStartScheduler+0x58>)
 8004822:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004824:	f7ff fd10 	bl	8004248 <xPortStartScheduler>
 8004828:	e7ef      	b.n	800480a <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800482a:	b672      	cpsid	i
 800482c:	e7fe      	b.n	800482c <vTaskStartScheduler+0x40>
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	20000e00 	.word	0x20000e00
 8004834:	08004f28 	.word	0x08004f28
 8004838:	08004561 	.word	0x08004561
 800483c:	20000e04 	.word	0x20000e04
 8004840:	20000e20 	.word	0x20000e20
 8004844:	20000e4c 	.word	0x20000e4c

08004848 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004848:	4a02      	ldr	r2, [pc, #8]	; (8004854 <vTaskSuspendAll+0xc>)
 800484a:	6813      	ldr	r3, [r2, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	6013      	str	r3, [r2, #0]
}
 8004850:	4770      	bx	lr
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	20000dcc 	.word	0x20000dcc

08004858 <xTaskIncrementTick>:
{
 8004858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800485a:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800485c:	4b38      	ldr	r3, [pc, #224]	; (8004940 <xTaskIncrementTick+0xe8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d160      	bne.n	8004926 <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004864:	4b37      	ldr	r3, [pc, #220]	; (8004944 <xTaskIncrementTick+0xec>)
 8004866:	681f      	ldr	r7, [r3, #0]
 8004868:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 800486a:	601f      	str	r7, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800486c:	2f00      	cmp	r7, #0
 800486e:	d112      	bne.n	8004896 <xTaskIncrementTick+0x3e>
			taskSWITCH_DELAYED_LISTS();
 8004870:	4b35      	ldr	r3, [pc, #212]	; (8004948 <xTaskIncrementTick+0xf0>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <xTaskIncrementTick+0x26>
 800487a:	b672      	cpsid	i
 800487c:	e7fe      	b.n	800487c <xTaskIncrementTick+0x24>
 800487e:	4a32      	ldr	r2, [pc, #200]	; (8004948 <xTaskIncrementTick+0xf0>)
 8004880:	6811      	ldr	r1, [r2, #0]
 8004882:	4b32      	ldr	r3, [pc, #200]	; (800494c <xTaskIncrementTick+0xf4>)
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	6010      	str	r0, [r2, #0]
 8004888:	6019      	str	r1, [r3, #0]
 800488a:	4a31      	ldr	r2, [pc, #196]	; (8004950 <xTaskIncrementTick+0xf8>)
 800488c:	6813      	ldr	r3, [r2, #0]
 800488e:	3301      	adds	r3, #1
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	f7ff fe4f 	bl	8004534 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004896:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <xTaskIncrementTick+0xfc>)
 8004898:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800489a:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800489c:	429f      	cmp	r7, r3
 800489e:	d333      	bcc.n	8004908 <xTaskIncrementTick+0xb0>
 80048a0:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048a2:	4e29      	ldr	r6, [pc, #164]	; (8004948 <xTaskIncrementTick+0xf0>)
 80048a4:	6833      	ldr	r3, [r6, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d029      	beq.n	8004900 <xTaskIncrementTick+0xa8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80048ac:	4b26      	ldr	r3, [pc, #152]	; (8004948 <xTaskIncrementTick+0xf0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048b4:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 80048b6:	429f      	cmp	r7, r3
 80048b8:	d332      	bcc.n	8004920 <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048ba:	1d2b      	adds	r3, r5, #4
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	0018      	movs	r0, r3
 80048c0:	f7ff fc6d 	bl	800419e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048ca:	0028      	movs	r0, r5
 80048cc:	3018      	adds	r0, #24
 80048ce:	f7ff fc66 	bl	800419e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80048d4:	4a20      	ldr	r2, [pc, #128]	; (8004958 <xTaskIncrementTick+0x100>)
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	4293      	cmp	r3, r2
 80048da:	d901      	bls.n	80048e0 <xTaskIncrementTick+0x88>
 80048dc:	4a1e      	ldr	r2, [pc, #120]	; (8004958 <xTaskIncrementTick+0x100>)
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	0098      	lsls	r0, r3, #2
 80048e2:	18c0      	adds	r0, r0, r3
 80048e4:	0080      	lsls	r0, r0, #2
 80048e6:	4b1d      	ldr	r3, [pc, #116]	; (800495c <xTaskIncrementTick+0x104>)
 80048e8:	1818      	adds	r0, r3, r0
 80048ea:	9901      	ldr	r1, [sp, #4]
 80048ec:	f7ff fc34 	bl	8004158 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <xTaskIncrementTick+0x108>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d3d3      	bcc.n	80048a4 <xTaskIncrementTick+0x4c>
							xSwitchRequired = pdTRUE;
 80048fc:	2401      	movs	r4, #1
 80048fe:	e7d1      	b.n	80048a4 <xTaskIncrementTick+0x4c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004900:	2201      	movs	r2, #1
 8004902:	4252      	negs	r2, r2
 8004904:	4b13      	ldr	r3, [pc, #76]	; (8004954 <xTaskIncrementTick+0xfc>)
 8004906:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004908:	4b15      	ldr	r3, [pc, #84]	; (8004960 <xTaskIncrementTick+0x108>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490e:	0093      	lsls	r3, r2, #2
 8004910:	189b      	adds	r3, r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4a11      	ldr	r2, [pc, #68]	; (800495c <xTaskIncrementTick+0x104>)
 8004916:	589b      	ldr	r3, [r3, r2]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d909      	bls.n	8004930 <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
 800491c:	2401      	movs	r4, #1
 800491e:	e007      	b.n	8004930 <xTaskIncrementTick+0xd8>
						xNextTaskUnblockTime = xItemValue;
 8004920:	4a0c      	ldr	r2, [pc, #48]	; (8004954 <xTaskIncrementTick+0xfc>)
 8004922:	6013      	str	r3, [r2, #0]
						break;
 8004924:	e7f0      	b.n	8004908 <xTaskIncrementTick+0xb0>
		++uxPendedTicks;
 8004926:	4a0f      	ldr	r2, [pc, #60]	; (8004964 <xTaskIncrementTick+0x10c>)
 8004928:	6813      	ldr	r3, [r2, #0]
 800492a:	3301      	adds	r3, #1
 800492c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800492e:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8004930:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <xTaskIncrementTick+0x110>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d000      	beq.n	800493a <xTaskIncrementTick+0xe2>
			xSwitchRequired = pdTRUE;
 8004938:	2401      	movs	r4, #1
}
 800493a:	0020      	movs	r0, r4
 800493c:	b003      	add	sp, #12
 800493e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004940:	20000dcc 	.word	0x20000dcc
 8004944:	20000e4c 	.word	0x20000e4c
 8004948:	20000d2c 	.word	0x20000d2c
 800494c:	20000d30 	.word	0x20000d30
 8004950:	20000e08 	.word	0x20000e08
 8004954:	20000e04 	.word	0x20000e04
 8004958:	20000dd4 	.word	0x20000dd4
 800495c:	20000d34 	.word	0x20000d34
 8004960:	20000d28 	.word	0x20000d28
 8004964:	20000dc8 	.word	0x20000dc8
 8004968:	20000e50 	.word	0x20000e50

0800496c <xTaskResumeAll>:
{
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800496e:	4b30      	ldr	r3, [pc, #192]	; (8004a30 <xTaskResumeAll+0xc4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <xTaskResumeAll+0xe>
 8004976:	b672      	cpsid	i
 8004978:	e7fe      	b.n	8004978 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800497a:	f7ff fca3 	bl	80042c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800497e:	4b2c      	ldr	r3, [pc, #176]	; (8004a30 <xTaskResumeAll+0xc4>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	3a01      	subs	r2, #1
 8004984:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004986:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 8004988:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800498a:	2b00      	cmp	r3, #0
 800498c:	d103      	bne.n	8004996 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800498e:	4b29      	ldr	r3, [pc, #164]	; (8004a34 <xTaskResumeAll+0xc8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
 8004996:	f7ff fca1 	bl	80042dc <vPortExitCritical>
}
 800499a:	0020      	movs	r0, r4
 800499c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800499e:	4e26      	ldr	r6, [pc, #152]	; (8004a38 <xTaskResumeAll+0xcc>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80049a0:	0037      	movs	r7, r6
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049a2:	6833      	ldr	r3, [r6, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d022      	beq.n	80049ee <xTaskResumeAll+0x82>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049ac:	0020      	movs	r0, r4
 80049ae:	3018      	adds	r0, #24
 80049b0:	f7ff fbf5 	bl	800419e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049b4:	1d25      	adds	r5, r4, #4
 80049b6:	0028      	movs	r0, r5
 80049b8:	f7ff fbf1 	bl	800419e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049be:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <xTaskResumeAll+0xd0>)
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <xTaskResumeAll+0x5e>
 80049c6:	4a1d      	ldr	r2, [pc, #116]	; (8004a3c <xTaskResumeAll+0xd0>)
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	0098      	lsls	r0, r3, #2
 80049cc:	18c0      	adds	r0, r0, r3
 80049ce:	0080      	lsls	r0, r0, #2
 80049d0:	4b1b      	ldr	r3, [pc, #108]	; (8004a40 <xTaskResumeAll+0xd4>)
 80049d2:	1818      	adds	r0, r3, r0
 80049d4:	0029      	movs	r1, r5
 80049d6:	f7ff fbbf 	bl	8004158 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049da:	4b1a      	ldr	r3, [pc, #104]	; (8004a44 <xTaskResumeAll+0xd8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d3dd      	bcc.n	80049a2 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 80049e6:	2201      	movs	r2, #1
 80049e8:	4b17      	ldr	r3, [pc, #92]	; (8004a48 <xTaskResumeAll+0xdc>)
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e7d9      	b.n	80049a2 <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
 80049ee:	2c00      	cmp	r4, #0
 80049f0:	d001      	beq.n	80049f6 <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
 80049f2:	f7ff fd9f 	bl	8004534 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <xTaskResumeAll+0xe0>)
 80049f8:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80049fa:	2c00      	cmp	r4, #0
 80049fc:	d00e      	beq.n	8004a1c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 80049fe:	4e12      	ldr	r6, [pc, #72]	; (8004a48 <xTaskResumeAll+0xdc>)
 8004a00:	2501      	movs	r5, #1
 8004a02:	e002      	b.n	8004a0a <xTaskResumeAll+0x9e>
							--uxPendedCounts;
 8004a04:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a06:	2c00      	cmp	r4, #0
 8004a08:	d005      	beq.n	8004a16 <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
 8004a0a:	f7ff ff25 	bl	8004858 <xTaskIncrementTick>
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	d0f8      	beq.n	8004a04 <xTaskResumeAll+0x98>
								xYieldPending = pdTRUE;
 8004a12:	6035      	str	r5, [r6, #0]
 8004a14:	e7f6      	b.n	8004a04 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8004a16:	2200      	movs	r2, #0
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <xTaskResumeAll+0xe0>)
 8004a1a:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <xTaskResumeAll+0xdc>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a20:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0b7      	beq.n	8004996 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004a26:	f7ff fc41 	bl	80042ac <vPortYield>
						xAlreadyYielded = pdTRUE;
 8004a2a:	3401      	adds	r4, #1
 8004a2c:	e7b3      	b.n	8004996 <xTaskResumeAll+0x2a>
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	20000dcc 	.word	0x20000dcc
 8004a34:	20000dc0 	.word	0x20000dc0
 8004a38:	20000e0c 	.word	0x20000e0c
 8004a3c:	20000dd4 	.word	0x20000dd4
 8004a40:	20000d34 	.word	0x20000d34
 8004a44:	20000d28 	.word	0x20000d28
 8004a48:	20000e50 	.word	0x20000e50
 8004a4c:	20000dc8 	.word	0x20000dc8

08004a50 <vTaskDelay>:
	{
 8004a50:	b510      	push	{r4, lr}
 8004a52:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a54:	d00f      	beq.n	8004a76 <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <vTaskDelay+0x2c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <vTaskDelay+0x12>
 8004a5e:	b672      	cpsid	i
 8004a60:	e7fe      	b.n	8004a60 <vTaskDelay+0x10>
			vTaskSuspendAll();
 8004a62:	f7ff fef1 	bl	8004848 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a66:	2100      	movs	r1, #0
 8004a68:	0020      	movs	r0, r4
 8004a6a:	f7ff fdad 	bl	80045c8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004a6e:	f7ff ff7d 	bl	800496c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d101      	bne.n	8004a7a <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
 8004a76:	f7ff fc19 	bl	80042ac <vPortYield>
	}
 8004a7a:	bd10      	pop	{r4, pc}
 8004a7c:	20000dcc 	.word	0x20000dcc

08004a80 <vTaskSwitchContext>:
{
 8004a80:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a82:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <vTaskSwitchContext+0x88>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d118      	bne.n	8004abc <vTaskSwitchContext+0x3c>
		xYieldPending = pdFALSE;
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	4b1f      	ldr	r3, [pc, #124]	; (8004b0c <vTaskSwitchContext+0x8c>)
 8004a8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a90:	4b1f      	ldr	r3, [pc, #124]	; (8004b10 <vTaskSwitchContext+0x90>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	009a      	lsls	r2, r3, #2
 8004a96:	18d2      	adds	r2, r2, r3
 8004a98:	0092      	lsls	r2, r2, #2
 8004a9a:	491e      	ldr	r1, [pc, #120]	; (8004b14 <vTaskSwitchContext+0x94>)
 8004a9c:	5852      	ldr	r2, [r2, r1]
 8004a9e:	2a00      	cmp	r2, #0
 8004aa0:	d110      	bne.n	8004ac4 <vTaskSwitchContext+0x44>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d008      	beq.n	8004ab8 <vTaskSwitchContext+0x38>
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	009a      	lsls	r2, r3, #2
 8004aaa:	18d2      	adds	r2, r2, r3
 8004aac:	0092      	lsls	r2, r2, #2
 8004aae:	5852      	ldr	r2, [r2, r1]
 8004ab0:	2a00      	cmp	r2, #0
 8004ab2:	d107      	bne.n	8004ac4 <vTaskSwitchContext+0x44>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f6      	bne.n	8004aa6 <vTaskSwitchContext+0x26>
 8004ab8:	b672      	cpsid	i
 8004aba:	e7fe      	b.n	8004aba <vTaskSwitchContext+0x3a>
		xYieldPending = pdTRUE;
 8004abc:	2201      	movs	r2, #1
 8004abe:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <vTaskSwitchContext+0x8c>)
 8004ac0:	601a      	str	r2, [r3, #0]
}
 8004ac2:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004ac4:	4813      	ldr	r0, [pc, #76]	; (8004b14 <vTaskSwitchContext+0x94>)
 8004ac6:	009a      	lsls	r2, r3, #2
 8004ac8:	18d1      	adds	r1, r2, r3
 8004aca:	0089      	lsls	r1, r1, #2
 8004acc:	1841      	adds	r1, r0, r1
 8004ace:	684c      	ldr	r4, [r1, #4]
 8004ad0:	6864      	ldr	r4, [r4, #4]
 8004ad2:	604c      	str	r4, [r1, #4]
 8004ad4:	18d2      	adds	r2, r2, r3
 8004ad6:	0092      	lsls	r2, r2, #2
 8004ad8:	3208      	adds	r2, #8
 8004ada:	1882      	adds	r2, r0, r2
 8004adc:	4294      	cmp	r4, r2
 8004ade:	d00b      	beq.n	8004af8 <vTaskSwitchContext+0x78>
 8004ae0:	009a      	lsls	r2, r3, #2
 8004ae2:	18d2      	adds	r2, r2, r3
 8004ae4:	0092      	lsls	r2, r2, #2
 8004ae6:	490b      	ldr	r1, [pc, #44]	; (8004b14 <vTaskSwitchContext+0x94>)
 8004ae8:	188a      	adds	r2, r1, r2
 8004aea:	6852      	ldr	r2, [r2, #4]
 8004aec:	68d1      	ldr	r1, [r2, #12]
 8004aee:	4a0a      	ldr	r2, [pc, #40]	; (8004b18 <vTaskSwitchContext+0x98>)
 8004af0:	6011      	str	r1, [r2, #0]
 8004af2:	4a07      	ldr	r2, [pc, #28]	; (8004b10 <vTaskSwitchContext+0x90>)
 8004af4:	6013      	str	r3, [r2, #0]
}
 8004af6:	e7e4      	b.n	8004ac2 <vTaskSwitchContext+0x42>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004af8:	6860      	ldr	r0, [r4, #4]
 8004afa:	009a      	lsls	r2, r3, #2
 8004afc:	18d2      	adds	r2, r2, r3
 8004afe:	0092      	lsls	r2, r2, #2
 8004b00:	4904      	ldr	r1, [pc, #16]	; (8004b14 <vTaskSwitchContext+0x94>)
 8004b02:	188a      	adds	r2, r1, r2
 8004b04:	6050      	str	r0, [r2, #4]
 8004b06:	e7eb      	b.n	8004ae0 <vTaskSwitchContext+0x60>
 8004b08:	20000dcc 	.word	0x20000dcc
 8004b0c:	20000e50 	.word	0x20000e50
 8004b10:	20000dd4 	.word	0x20000dd4
 8004b14:	20000d34 	.word	0x20000d34
 8004b18:	20000d28 	.word	0x20000d28

08004b1c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <xTaskGetSchedulerState+0x18>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b20:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d004      	beq.n	8004b30 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b26:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <xTaskGetSchedulerState+0x1c>)
 8004b28:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b2a:	4243      	negs	r3, r0
 8004b2c:	4158      	adcs	r0, r3
 8004b2e:	0040      	lsls	r0, r0, #1
	}
 8004b30:	4770      	bx	lr
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	20000e20 	.word	0x20000e20
 8004b38:	20000dcc 	.word	0x20000dcc

08004b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8004b3c:	480d      	ldr	r0, [pc, #52]	; (8004b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004b3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004b40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b42:	e003      	b.n	8004b4c <LoopCopyDataInit>

08004b44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b44:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004b46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b4a:	3104      	adds	r1, #4

08004b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b4c:	480b      	ldr	r0, [pc, #44]	; (8004b7c <LoopForever+0xa>)
  ldr  r3, =_edata
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004b50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b54:	d3f6      	bcc.n	8004b44 <CopyDataInit>
  ldr  r2, =_sbss
 8004b56:	4a0b      	ldr	r2, [pc, #44]	; (8004b84 <LoopForever+0x12>)
  b  LoopFillZerobss
 8004b58:	e002      	b.n	8004b60 <LoopFillZerobss>

08004b5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004b5a:	2300      	movs	r3, #0
  str  r3, [r2]
 8004b5c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b5e:	3204      	adds	r2, #4

08004b60 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <LoopForever+0x16>)
  cmp  r2, r3
 8004b62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b64:	d3f9      	bcc.n	8004b5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004b66:	f7fc fa1f 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b6a:	f000 f811 	bl	8004b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b6e:	f7fb ff61 	bl	8000a34 <main>

08004b72 <LoopForever>:

LoopForever:
    b LoopForever
 8004b72:	e7fe      	b.n	8004b72 <LoopForever>
  ldr   r0, =_estack
 8004b74:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8004b78:	08004f40 	.word	0x08004f40
  ldr  r0, =_sdata
 8004b7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b80:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004b84:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8004b88:	200012a8 	.word	0x200012a8

08004b8c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b8c:	e7fe      	b.n	8004b8c <ADC1_COMP_IRQHandler>
	...

08004b90 <__libc_init_array>:
 8004b90:	b570      	push	{r4, r5, r6, lr}
 8004b92:	2600      	movs	r6, #0
 8004b94:	4d0c      	ldr	r5, [pc, #48]	; (8004bc8 <__libc_init_array+0x38>)
 8004b96:	4c0d      	ldr	r4, [pc, #52]	; (8004bcc <__libc_init_array+0x3c>)
 8004b98:	1b64      	subs	r4, r4, r5
 8004b9a:	10a4      	asrs	r4, r4, #2
 8004b9c:	42a6      	cmp	r6, r4
 8004b9e:	d109      	bne.n	8004bb4 <__libc_init_array+0x24>
 8004ba0:	2600      	movs	r6, #0
 8004ba2:	f000 f83b 	bl	8004c1c <_init>
 8004ba6:	4d0a      	ldr	r5, [pc, #40]	; (8004bd0 <__libc_init_array+0x40>)
 8004ba8:	4c0a      	ldr	r4, [pc, #40]	; (8004bd4 <__libc_init_array+0x44>)
 8004baa:	1b64      	subs	r4, r4, r5
 8004bac:	10a4      	asrs	r4, r4, #2
 8004bae:	42a6      	cmp	r6, r4
 8004bb0:	d105      	bne.n	8004bbe <__libc_init_array+0x2e>
 8004bb2:	bd70      	pop	{r4, r5, r6, pc}
 8004bb4:	00b3      	lsls	r3, r6, #2
 8004bb6:	58eb      	ldr	r3, [r5, r3]
 8004bb8:	4798      	blx	r3
 8004bba:	3601      	adds	r6, #1
 8004bbc:	e7ee      	b.n	8004b9c <__libc_init_array+0xc>
 8004bbe:	00b3      	lsls	r3, r6, #2
 8004bc0:	58eb      	ldr	r3, [r5, r3]
 8004bc2:	4798      	blx	r3
 8004bc4:	3601      	adds	r6, #1
 8004bc6:	e7f2      	b.n	8004bae <__libc_init_array+0x1e>
 8004bc8:	08004f38 	.word	0x08004f38
 8004bcc:	08004f38 	.word	0x08004f38
 8004bd0:	08004f38 	.word	0x08004f38
 8004bd4:	08004f3c 	.word	0x08004f3c

08004bd8 <memcpy>:
 8004bd8:	2300      	movs	r3, #0
 8004bda:	b510      	push	{r4, lr}
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d100      	bne.n	8004be2 <memcpy+0xa>
 8004be0:	bd10      	pop	{r4, pc}
 8004be2:	5ccc      	ldrb	r4, [r1, r3]
 8004be4:	54c4      	strb	r4, [r0, r3]
 8004be6:	3301      	adds	r3, #1
 8004be8:	e7f8      	b.n	8004bdc <memcpy+0x4>

08004bea <memset>:
 8004bea:	0003      	movs	r3, r0
 8004bec:	1882      	adds	r2, r0, r2
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d100      	bne.n	8004bf4 <memset+0xa>
 8004bf2:	4770      	bx	lr
 8004bf4:	7019      	strb	r1, [r3, #0]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	e7f9      	b.n	8004bee <memset+0x4>

08004bfa <strncmp>:
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	b530      	push	{r4, r5, lr}
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d00a      	beq.n	8004c18 <strncmp+0x1e>
 8004c02:	3a01      	subs	r2, #1
 8004c04:	5cc4      	ldrb	r4, [r0, r3]
 8004c06:	5ccd      	ldrb	r5, [r1, r3]
 8004c08:	42ac      	cmp	r4, r5
 8004c0a:	d104      	bne.n	8004c16 <strncmp+0x1c>
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d002      	beq.n	8004c16 <strncmp+0x1c>
 8004c10:	3301      	adds	r3, #1
 8004c12:	2c00      	cmp	r4, #0
 8004c14:	d1f6      	bne.n	8004c04 <strncmp+0xa>
 8004c16:	1b63      	subs	r3, r4, r5
 8004c18:	0018      	movs	r0, r3
 8004c1a:	bd30      	pop	{r4, r5, pc}

08004c1c <_init>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c22:	bc08      	pop	{r3}
 8004c24:	469e      	mov	lr, r3
 8004c26:	4770      	bx	lr

08004c28 <_fini>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2e:	bc08      	pop	{r3}
 8004c30:	469e      	mov	lr, r3
 8004c32:	4770      	bx	lr
